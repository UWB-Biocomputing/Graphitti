digraph "Simulator/Core/Operations.h"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="Simulator/Core/Operations.h",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="This class is public reference to the operation types that the OperationManager can register and exec..."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="Simulator/Core/FunctionNodes\l/GenericFunctionNode.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_generic_function_node_8cpp.html",tooltip="Stores a function to invoke. Used by operation manager to store functions to defined by an operation ..."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="Simulator/Core/FunctionNodes\l/IFunctionNode.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_i_function_node_8h.html",tooltip="Interface for storing and invoking functions. Used to support different FunctionNode classes that def..."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="Simulator/Core/FunctionNodes\l/GenericFunctionNode.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_generic_function_node_8h.html",tooltip="Stores a function to invoke. Used by operation manager to store functions to defined by an operation ..."];
  Node4 -> Node2 [id="edge4_Node000004_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 -> Node5 [id="edge5_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="Simulator/Core/Operation\lManager.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_operation_manager_8cpp.html",tooltip="Singleton instance method that registers and executes functions based on operation types."];
  Node3 -> Node6 [id="edge6_Node000003_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="Simulator/Core/Operation\lManager.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_operation_manager_8h.html",tooltip="Singleton instance method that registers and executes functions based on operation types."];
  Node6 -> Node7 [id="edge7_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="Simulator/Connections\l/Connections.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_connections_8cpp.html",tooltip="Methods for creating and updating connections."];
  Node6 -> Node8 [id="edge8_Node000006_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="Simulator/Connections\l/Neuro/ConnGrowth.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_conn_growth_8cpp.html",tooltip="The model of the activity-dependent neurite outgrowth."];
  Node6 -> Node9 [id="edge9_Node000006_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="Simulator/Connections\l/Neuro/ConnStatic.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_conn_static_8cpp.html",tooltip="The model of the small world network."];
  Node6 -> Node10 [id="edge10_Node000006_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="Simulator/Core/Core.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_core_8cpp.html",tooltip="Orchestrates most functionality in the simulation."];
  Node6 -> Node5 [id="edge11_Node000006_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node11 [id="edge12_Node000006_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="Simulator/Core/Simulator.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_simulator_8cpp.html",tooltip="Platform independent base class for the Brain Grid simulator. Simulator is a singleton class (a class..."];
  Node6 -> Node12 [id="edge13_Node000006_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="Simulator/Edges/AllEdges.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_all_edges_8cpp.html",tooltip="A container of all edge data."];
  Node6 -> Node13 [id="edge14_Node000006_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="Simulator/Layouts/Layout.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_layout_8cpp.html",tooltip="The Layout class defines the layout of neurons in neural networks."];
  Node6 -> Node14 [id="edge15_Node000006_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="Simulator/Recorders\l/Hdf5Recorder.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_hdf5_recorder_8cpp.html",tooltip="An implementation for recording spikes history on hdf5 file."];
  Node6 -> Node15 [id="edge16_Node000006_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="Simulator/Recorders\l/XmlRecorder.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_xml_recorder_8cpp.html",tooltip="An implementation for recording spikes history on xml file."];
  Node6 -> Node16 [id="edge17_Node000006_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="Simulator/Vertices\l/AllVertices.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_all_vertices_8cpp.html",tooltip="A container of the base class of all vertex data."];
  Node6 -> Node17 [id="edge18_Node000006_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="Simulator/Vertices\l/Neuro/AllIFNeurons.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_all_i_f_neurons_8cpp.html",tooltip="A container of all Integate and Fire (IF) neuron data."];
  Node1 -> Node6 [id="edge19_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
