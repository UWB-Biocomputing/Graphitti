<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2292px" preserveAspectRatio="none" style="width:1793px;height:2292px;" version="1.1" viewBox="0 0 1793 2292" width="1793px" zoomAndPan="magnify"><defs><filter height="300%" id="f1746k35ggpdwo" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[cf80cca85261d84eda43dbc026d5d8d1]
class AllIFNeurons--><rect codeLine="6" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="688.2344" id="AllIFNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="397" y="893"/><ellipse cx="728.25" cy="909" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M728.1875,904.8281 Q727.4375,904.8281 726.875,905.125 Q726.3125,905.4063 725.9219,905.9375 Q725.5313,906.4688 725.3281,907.25 Q725.1406,908.0156 725.1406,908.9688 Q725.1406,909.9375 725.3125,910.7031 Q725.5,911.4531 725.8594,911.9688 Q726.2344,912.4844 726.8125,912.7656 Q727.3906,913.0313 728.1875,913.0313 Q728.9219,913.0313 729.6563,912.8594 Q730.4063,912.6875 731.2813,912.3906 L731.2813,914.5469 Q730.875,914.7031 730.4844,914.8281 Q730.0938,914.9375 729.6875,915.0156 Q729.2813,915.0938 728.8594,915.125 Q728.4375,915.1719 727.9375,915.1719 Q726.5313,915.1719 725.5,914.7188 Q724.4844,914.2656 723.8125,913.4531 Q723.1406,912.6406 722.8125,911.5 Q722.4844,910.3438 722.4844,908.9531 Q722.4844,907.5781 722.8594,906.4219 Q723.2344,905.2656 723.9531,904.4375 Q724.6719,903.6094 725.7344,903.1563 Q726.7969,902.6875 728.1875,902.6875 Q729.0938,902.6875 730,902.9219 Q730.9063,903.1406 731.7344,903.5469 L730.9063,905.6406 Q730.2188,905.3125 729.5313,905.0781 Q728.8438,904.8281 728.1875,904.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="748.75" y="913.1543">AllIFNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="398" x2="1137" y1="925" y2="925"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="933"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="417" y="939.2104">IinjectRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="945.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="417" y="952.0151">InoiseRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="958.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="417" y="964.8198">VinitRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="971.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="417" y="977.6245">VresetRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="984.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="417" y="990.4292">VrestingRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="997.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="417" y="1003.2339">VthreshRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1009.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="417" y="1016.0386">starterVresetRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1022.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="417" y="1028.8433">starterVthreshRange_ : BGFLOAT</text><ellipse cx="408" cy="1038.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="417" y="1041.6479">C1_ : BGFLOAT*</text><ellipse cx="408" cy="1051.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="417" y="1054.4526">C2_ : BGFLOAT*</text><ellipse cx="408" cy="1064.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1067.2573">Cm_ : BGFLOAT*</text><ellipse cx="408" cy="1076.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="417" y="1080.062">I0_ : BGFLOAT*</text><ellipse cx="408" cy="1089.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="417" y="1092.8667">Iinject_ : BGFLOAT*</text><ellipse cx="408" cy="1102.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="417" y="1105.6714">Inoise_ : BGFLOAT*</text><ellipse cx="408" cy="1115.2656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="417" y="1118.4761">Isyn_ : BGFLOAT*</text><ellipse cx="408" cy="1128.0703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1131.2808">Rm_ : BGFLOAT*</text><ellipse cx="408" cy="1140.875" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1144.0854">Tau_ : BGFLOAT*</text><ellipse cx="408" cy="1153.6797" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="417" y="1156.8901">Trefract_ : BGFLOAT*</text><ellipse cx="408" cy="1166.4844" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="417" y="1169.6948">Vinit_ : BGFLOAT*</text><ellipse cx="408" cy="1179.2891" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1182.4995">Vm_ : BGFLOAT*</text><ellipse cx="408" cy="1192.0938" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="417" y="1195.3042">Vreset_ : BGFLOAT*</text><ellipse cx="408" cy="1204.8984" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="417" y="1208.1089">Vrest_ : BGFLOAT*</text><ellipse cx="408" cy="1217.7031" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="417" y="1220.9136">Vthresh_ : BGFLOAT*</text><ellipse cx="408" cy="1230.5078" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="417" y="1233.7183">numStepsInRefractoryPeriod_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="398" x2="1137" y1="1240.3125" y2="1240.3125"/><ellipse cx="408" cy="1251.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="417" y="1254.5229">AllIFNeurons()</text><ellipse cx="408" cy="1264.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="417" y="1267.3276">~AllIFNeurons()</text><ellipse cx="408" cy="1276.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="417" y="1280.1323">toString(const int index) : string {query}</text><ellipse cx="408" cy="1289.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="417" y="1292.937">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="408,1297.5313,412,1301.5313,408,1305.5313,404,1301.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="417" y="1305.7417">allocDeviceStruct(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="408" cy="1315.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="417" y="1318.5464">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="408" cy="1328.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="417" y="1331.3511">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="408,1335.9453,412,1339.9453,408,1343.9453,404,1339.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="417" y="1344.1558">copyDeviceToHost(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="408,1348.75,412,1352.75,408,1356.75,404,1352.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="417" y="1356.9604">copyHostToDevice(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="408" cy="1366.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="417" y="1369.7651">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1379.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="417" y="1382.5698">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1392.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="417" y="1395.3745">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1404.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="417" y="1408.1792">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1417.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="417" y="1420.9839">createAllVertices(Layout* layout) : void</text><polygon fill="#FFFF44" points="408,1425.5781,412,1429.5781,408,1433.5781,404,1429.5781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="417" y="1433.7886">createNeuron(int neuronIndex, Layout* layout) : void</text><polygon fill="#FFFF44" points="408,1438.3828,412,1442.3828,408,1446.3828,404,1442.3828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="417" y="1446.5933">deleteDeviceStruct(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="408" cy="1456.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="417" y="1459.3979">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1468.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="417" y="1472.2026">deserialize(istream&amp; input) : void</text><polygon fill="#FFFF44" points="408,1476.7969,412,1480.7969,408,1484.7969,404,1480.7969" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="417" y="1485.0073">initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void</text><ellipse cx="408" cy="1494.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="417" y="1497.812">loadParameters() : void</text><ellipse cx="408" cy="1507.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="417" y="1510.6167">printParameters() : void {query}</text><polygon fill="#FFFF44" points="408,1515.2109,412,1519.2109,408,1523.2109,404,1519.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="417" y="1523.4214">readNeuron(istream&amp; input, int i) : void</text><ellipse cx="408" cy="1533.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="417" y="1536.2261">serialize(ostream&amp; output) : void {query}</text><polygon fill="#FFFF44" points="408,1540.8203,412,1544.8203,408,1548.8203,404,1544.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="417" y="1549.0308">setNeuronDefaults(const int index) : void</text><ellipse cx="408" cy="1558.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="417" y="1561.8354">setupVertices() : void</text><polygon fill="#FFFF44" points="408,1566.4297,412,1570.4297,408,1574.4297,404,1570.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="417" y="1574.6401">writeNeuron(ostream&amp; output, int i) : void {query}</text><!--MD5=[a4e35ff6c4fc9c7a26a0ff69acb0e23b]
class AllIZHNeurons--><rect codeLine="60" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="637.0156" id="AllIZHNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="9" y="1641"/><ellipse cx="335.75" cy="1657" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M335.6875,1652.8281 Q334.9375,1652.8281 334.375,1653.125 Q333.8125,1653.4063 333.4219,1653.9375 Q333.0313,1654.4688 332.8281,1655.25 Q332.6406,1656.0156 332.6406,1656.9688 Q332.6406,1657.9375 332.8125,1658.7031 Q333,1659.4531 333.3594,1659.9688 Q333.7344,1660.4844 334.3125,1660.7656 Q334.8906,1661.0313 335.6875,1661.0313 Q336.4219,1661.0313 337.1563,1660.8594 Q337.9063,1660.6875 338.7813,1660.3906 L338.7813,1662.5469 Q338.375,1662.7031 337.9844,1662.8281 Q337.5938,1662.9375 337.1875,1663.0156 Q336.7813,1663.0938 336.3594,1663.125 Q335.9375,1663.1719 335.4375,1663.1719 Q334.0313,1663.1719 333,1662.7188 Q331.9844,1662.2656 331.3125,1661.4531 Q330.6406,1660.6406 330.3125,1659.5 Q329.9844,1658.3438 329.9844,1656.9531 Q329.9844,1655.5781 330.3594,1654.4219 Q330.7344,1653.2656 331.4531,1652.4375 Q332.1719,1651.6094 333.2344,1651.1563 Q334.2969,1650.6875 335.6875,1650.6875 Q336.5938,1650.6875 337.5,1650.9219 Q338.4063,1651.1406 339.2344,1651.5469 L338.4063,1653.6406 Q337.7188,1653.3125 337.0313,1653.0781 Q336.3438,1652.8281 335.6875,1652.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="356.25" y="1661.1543">AllIZHNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="749" y1="1673" y2="1673"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1681"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="1687.2104">excAconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1693.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="1700.0151">excBconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1706.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="1712.8198">excCconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1719.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="29" y="1725.6245">excDconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1732.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="29" y="1738.4292">inhAconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1745.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="29" y="1751.2339">inhBconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1757.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="29" y="1764.0386">inhCconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1770.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="29" y="1776.8433">inhDconst_ : BGFLOAT</text><ellipse cx="20" cy="1786.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="29" y="1789.6479">Aconst_ : BGFLOAT*</text><ellipse cx="20" cy="1799.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="29" y="1802.4526">Bconst_ : BGFLOAT*</text><ellipse cx="20" cy="1812.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="29" y="1815.2573">C3_ : BGFLOAT*</text><ellipse cx="20" cy="1824.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="29" y="1828.062">Cconst_ : BGFLOAT*</text><ellipse cx="20" cy="1837.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="29" y="1840.8667">Dconst_ : BGFLOAT*</text><ellipse cx="20" cy="1850.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="29" y="1853.6714">u_ : BGFLOAT*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1860.2656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="29" y="1866.4761">DEFAULT_a : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1873.0703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="29" y="1879.2808">DEFAULT_b : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1885.875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="189" x="29" y="1892.0854">DEFAULT_c : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1898.6797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="29" y="1904.8901">DEFAULT_d : static constexpr BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="749" y1="1911.4844" y2="1911.4844"/><ellipse cx="20" cy="1922.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="29" y="1925.6948">AllIZHNeurons()</text><ellipse cx="20" cy="1935.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="29" y="1938.4995">~AllIZHNeurons()</text><ellipse cx="20" cy="1948.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="104" x="29" y="1951.3042">Create() : AllVertices*</text><ellipse cx="20" cy="1960.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="29" y="1964.1089">toString(const int index) : string {query}</text><polygon fill="#FFFF44" points="20,1968.7031,24,1972.7031,20,1976.7031,16,1972.7031" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="29" y="1976.9136">advanceNeuron(const int index) : void</text><ellipse cx="20" cy="1986.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="29" y="1989.7183">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="20,1994.3125,24,1998.3125,20,2002.3125,16,1998.3125" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="29" y="2002.5229">allocDeviceStruct(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="20" cy="2012.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="29" y="2015.3276">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="20" cy="2024.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="29" y="2028.1323">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="20,2032.7266,24,2036.7266,20,2040.7266,16,2036.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="29" y="2040.937">copyDeviceToHost(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="20,2045.5313,24,2049.5313,20,2053.5313,16,2049.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="29" y="2053.7417">copyHostToDevice(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="20" cy="2063.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="29" y="2066.5464">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2076.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="29" y="2079.3511">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2088.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="29" y="2092.1558">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2101.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="29" y="2104.9604">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2114.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="29" y="2117.7651">createAllVertices(Layout* layout) : void</text><polygon fill="#FFFF44" points="20,2122.3594,24,2126.3594,20,2130.3594,16,2126.3594" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="29" y="2130.5698">createNeuron(int neuronIndex, Layout* layout) : void</text><polygon fill="#FFFF44" points="20,2135.1641,24,2139.1641,20,2143.1641,16,2139.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="29" y="2143.3745">deleteDeviceStruct(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="20" cy="2152.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="29" y="2156.1792">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2165.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="29" y="2168.9839">deserialize(istream&amp; input) : void</text><polygon fill="#FFFF44" points="20,2173.5781,24,2177.5781,20,2181.5781,16,2177.5781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="29" y="2181.7886">fire(const int index) : void</text><polygon fill="#FFFF44" points="20,2186.3828,24,2190.3828,20,2194.3828,16,2190.3828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="29" y="2194.5933">initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void</text><ellipse cx="20" cy="2204.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="29" y="2207.3979">printParameters() : void {query}</text><polygon fill="#FFFF44" points="20,2211.9922,24,2215.9922,20,2219.9922,16,2215.9922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="29" y="2220.2026">readNeuron(istream&amp; input, int index) : void</text><ellipse cx="20" cy="2229.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="29" y="2233.0073">serialize(ostream&amp; output) : void {query}</text><polygon fill="#FFFF44" points="20,2237.6016,24,2241.6016,20,2245.6016,16,2241.6016" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="29" y="2245.812">setNeuronDefaults(const int index) : void</text><ellipse cx="20" cy="2255.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="29" y="2258.6167">setupVertices() : void</text><polygon fill="#FFFF44" points="20,2263.2109,24,2267.2109,20,2271.2109,16,2267.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="29" y="2271.4214">writeNeuron(ostream&amp; output, int index) : void {query}</text><!--MD5=[17306769ffb707adf94de37859054409]
class AllLIFNeurons--><rect codeLine="110" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="137.6328" id="AllLIFNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="785" y="1890.5"/><ellipse cx="1113.25" cy="1906.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1113.1875,1902.3281 Q1112.4375,1902.3281 1111.875,1902.625 Q1111.3125,1902.9063 1110.9219,1903.4375 Q1110.5313,1903.9688 1110.3281,1904.75 Q1110.1406,1905.5156 1110.1406,1906.4688 Q1110.1406,1907.4375 1110.3125,1908.2031 Q1110.5,1908.9531 1110.8594,1909.4688 Q1111.2344,1909.9844 1111.8125,1910.2656 Q1112.3906,1910.5313 1113.1875,1910.5313 Q1113.9219,1910.5313 1114.6563,1910.3594 Q1115.4063,1910.1875 1116.2813,1909.8906 L1116.2813,1912.0469 Q1115.875,1912.2031 1115.4844,1912.3281 Q1115.0938,1912.4375 1114.6875,1912.5156 Q1114.2813,1912.5938 1113.8594,1912.625 Q1113.4375,1912.6719 1112.9375,1912.6719 Q1111.5313,1912.6719 1110.5,1912.2188 Q1109.4844,1911.7656 1108.8125,1910.9531 Q1108.1406,1910.1406 1107.8125,1909 Q1107.4844,1907.8438 1107.4844,1906.4531 Q1107.4844,1905.0781 1107.8594,1903.9219 Q1108.2344,1902.7656 1108.9531,1901.9375 Q1109.6719,1901.1094 1110.7344,1900.6563 Q1111.7969,1900.1875 1113.1875,1900.1875 Q1114.0938,1900.1875 1115,1900.4219 Q1115.9063,1900.6406 1116.7344,1901.0469 L1115.9063,1903.1406 Q1115.2188,1902.8125 1114.5313,1902.5781 Q1113.8438,1902.3281 1113.1875,1902.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="1133.75" y="1910.6543">AllLIFNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="786" x2="1525" y1="1922.5" y2="1922.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="786" x2="1525" y1="1930.5" y2="1930.5"/><ellipse cx="796" cy="1941.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="805" y="1944.7104">AllLIFNeurons()</text><ellipse cx="796" cy="1954.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="805" y="1957.5151">~AllLIFNeurons()</text><ellipse cx="796" cy="1967.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="104" x="805" y="1970.3198">Create() : AllVertices*</text><polygon fill="#FFFF44" points="796,1974.9141,800,1978.9141,796,1982.9141,792,1978.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="805" y="1983.1245">advanceNeuron(const int index) : void</text><ellipse cx="796" cy="1992.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="805" y="1995.9292">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="796,2000.5234,800,2004.5234,796,2008.5234,792,2004.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="805" y="2008.7339">fire(const int index) : void</text><ellipse cx="796" cy="2018.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="805" y="2021.5386">printParameters() : void {query}</text><!--MD5=[00675e18512933602d55f5e0e2b1ab32]
class AllSpikingNeurons--><rect codeLine="121" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="278.4844" id="AllSpikingNeurons" style="stroke:#A80036;stroke-width:1.5;" width="471" x="728" y="555"/><ellipse cx="909.75" cy="571" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M912.7031,576 L911.875,573.1094 L907.6875,573.1094 L906.8438,576 L904.25,576 L908.1875,563.8125 L911.3438,563.8125 L915.2969,576 L912.7031,576 Z M911.2656,570.9531 L910.5,568.2969 Q910.4375,568.1406 910.3438,567.8125 Q910.25,567.4688 910.125,567.0625 Q910.0156,566.6406 909.9063,566.2344 Q909.8125,565.8125 909.7813,565.5313 Q909.75,565.7031 909.6875,565.9531 Q909.6406,566.2031 909.5625,566.4844 Q909.5,566.7656 909.4219,567.0469 Q909.3438,567.3281 909.2813,567.5781 Q909.2188,567.8281 909.1563,568.0156 Q909.1094,568.2031 909.0781,568.2969 L908.3125,570.9531 L911.2656,570.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="99" x="930.25" y="575.1543">AllSpikingNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1198" y1="587" y2="587"/><polygon fill="none" points="739,593,743,597,739,601,735,597" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="748" y="601.2104">fAllowBackPropagation_ : bool</text><ellipse cx="739" cy="610.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="748" y="614.0151">vertexEvents_ : vector&lt;EventBuffer&gt;</text><ellipse cx="739" cy="623.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="748" y="626.8198">hasFired_ : vector&lt;bool&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1198" y1="633.4141" y2="633.4141"/><ellipse cx="739" cy="644.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="748" y="647.6245">AllSpikingNeurons()</text><ellipse cx="739" cy="657.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="748" y="660.4292">~AllSpikingNeurons()</text><ellipse cx="739" cy="670.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="748" y="673.2339">getSpikeHistory(int index, int offIndex) : uint64_t</text><polygon fill="#FFFF44" points="739,677.8281,743,681.8281,739,685.8281,735,681.8281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="182" x="748" y="686.0386">advanceNeuron(const int index) : void</text><ellipse cx="739" cy="695.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="748" y="698.8433">advanceVertices(AllEdges&amp; synapses, const EdgeIndexMap* edgeIndexMap) : void</text><polygon fill="#FFFF44" points="739,703.4375,743,707.4375,739,711.4375,735,707.4375" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="748" y="711.6479">clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="739" cy="721.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="264" x="748" y="724.4526">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><ellipse cx="739" cy="734.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="748" y="737.2573">clearSpikeCounts() : void</text><polygon fill="#FFFF44" points="739,741.8516,743,745.8516,739,749.8516,735,745.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="748" y="750.062">copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="739,754.6563,743,758.6563,739,762.6563,735,758.6563" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="445" x="748" y="762.8667">copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="739" cy="772.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="331" x="748" y="775.6714">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="739" cy="785.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="332" x="748" y="788.4761">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="739,793.0703,743,797.0703,739,801.0703,735,797.0703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="748" y="801.2808">fire(const int index) : void</text><ellipse cx="739" cy="810.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="748" y="814.0854">setAdvanceVerticesDeviceParams(AllEdges&amp; synapses) : void</text><ellipse cx="739" cy="823.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="748" y="826.8901">setupVertices() : void</text><!--MD5=[34dee175ca2f1207a5c8be9520f72c2f]
class AllVertices--><rect codeLine="143" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="278.4844" id="AllVertices" style="stroke:#A80036;stroke-width:1.5;" width="725" x="601" y="217"/><ellipse cx="930.75" cy="233" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M933.7031,238 L932.875,235.1094 L928.6875,235.1094 L927.8438,238 L925.25,238 L929.1875,225.8125 L932.3438,225.8125 L936.2969,238 L933.7031,238 Z M932.2656,232.9531 L931.5,230.2969 Q931.4375,230.1406 931.3438,229.8125 Q931.25,229.4688 931.125,229.0625 Q931.0156,228.6406 930.9063,228.2344 Q930.8125,227.8125 930.7813,227.5313 Q930.75,227.7031 930.6875,227.9531 Q930.6406,228.2031 930.5625,228.4844 Q930.5,228.7656 930.4219,229.0469 Q930.3438,229.3281 930.2813,229.5781 Q930.2188,229.8281 930.1563,230.0156 Q930.1094,230.2031 930.0781,230.2969 L929.3125,232.9531 L932.2656,232.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="951.25" y="237.1543">AllVertices</text><line style="stroke:#A80036;stroke-width:1.5;" x1="602" x2="1325" y1="249" y2="249"/><ellipse cx="612" cy="260" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="621" y="263.2104">summationPoints_ : BGFLOAT*</text><polygon fill="none" points="612,267.8047,616,271.8047,612,275.8047,608,271.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="621" y="276.0151">size_ : int</text><polygon fill="none" points="612,280.6094,616,284.6094,612,288.6094,608,284.6094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="621" y="288.8198">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="612,293.4141,616,297.4141,612,301.4141,608,297.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="621" y="301.6245">vertexLogger_ : log4cplus::Logger</text><line style="stroke:#A80036;stroke-width:1.5;" x1="602" x2="1325" y1="308.2188" y2="308.2188"/><ellipse cx="612" cy="319.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="621" y="322.4292">AllVertices()</text><ellipse cx="612" cy="332.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="621" y="335.2339">~AllVertices()</text><ellipse cx="612" cy="344.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="621" y="348.0386">toString(const int i) : string {query}</text><ellipse cx="612" cy="357.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="699" x="621" y="360.8433">advanceVertices(AllEdges&amp; edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><ellipse cx="612" cy="370.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="621" y="373.6479">advanceVertices(AllEdges&amp; edges, const EdgeIndexMap* edgeIndexMap) : void</text><ellipse cx="612" cy="383.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="271" x="621" y="386.4526">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="612" cy="396.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="621" y="399.2573">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="612" cy="408.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="621" y="412.062">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="612" cy="421.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="621" y="424.8667">createAllVertices(Layout* layout) : void</text><ellipse cx="612" cy="434.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="274" x="621" y="437.6714">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="612" cy="447.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112" x="621" y="450.4761">loadParameters() : void</text><ellipse cx="612" cy="460.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="621" y="463.2808">printParameters() : void {query}</text><ellipse cx="612" cy="472.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="621" y="476.0854">setAdvanceVerticesDeviceParams(AllEdges&amp; edges) : void</text><ellipse cx="612" cy="485.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="621" y="488.8901">setupVertices() : void</text><!--MD5=[05f17831147ee39527b2431b4d22ccc3]
class EventBuffer--><rect codeLine="165" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="214.4609" id="EventBuffer" style="stroke:#A80036;stroke-width:1.5;" width="228" x="1173.5" y="1130"/><ellipse cx="1253.25" cy="1146" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1253.1875,1141.8281 Q1252.4375,1141.8281 1251.875,1142.125 Q1251.3125,1142.4063 1250.9219,1142.9375 Q1250.5313,1143.4688 1250.3281,1144.25 Q1250.1406,1145.0156 1250.1406,1145.9688 Q1250.1406,1146.9375 1250.3125,1147.7031 Q1250.5,1148.4531 1250.8594,1148.9688 Q1251.2344,1149.4844 1251.8125,1149.7656 Q1252.3906,1150.0313 1253.1875,1150.0313 Q1253.9219,1150.0313 1254.6563,1149.8594 Q1255.4063,1149.6875 1256.2813,1149.3906 L1256.2813,1151.5469 Q1255.875,1151.7031 1255.4844,1151.8281 Q1255.0938,1151.9375 1254.6875,1152.0156 Q1254.2813,1152.0938 1253.8594,1152.125 Q1253.4375,1152.1719 1252.9375,1152.1719 Q1251.5313,1152.1719 1250.5,1151.7188 Q1249.4844,1151.2656 1248.8125,1150.4531 Q1248.1406,1149.6406 1247.8125,1148.5 Q1247.4844,1147.3438 1247.4844,1145.9531 Q1247.4844,1144.5781 1247.8594,1143.4219 Q1248.2344,1142.2656 1248.9531,1141.4375 Q1249.6719,1140.6094 1250.7344,1140.1563 Q1251.7969,1139.6875 1253.1875,1139.6875 Q1254.0938,1139.6875 1255,1139.9219 Q1255.9063,1140.1406 1256.7344,1140.5469 L1255.9063,1142.6406 Q1255.2188,1142.3125 1254.5313,1142.0781 Q1253.8438,1141.8281 1253.1875,1141.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="1273.75" y="1150.1543">EventBuffer</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1174.5" x2="1400.5" y1="1162" y2="1162"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1170"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1193.5" y="1176.2104">epochStart_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1182.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1193.5" y="1189.0151">numEventsInEpoch_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1195.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="1193.5" y="1201.8198">queueEnd_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1208.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1193.5" y="1214.6245">queueFront_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1221.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1193.5" y="1227.4292">eventTimeSteps_ : vector&lt;uint64_t&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1174.5" x2="1400.5" y1="1234.0234" y2="1234.0234"/><ellipse cx="1184.5" cy="1245.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1193.5" y="1248.2339">EventBuffer(int maxEvents)</text><ellipse cx="1184.5" cy="1257.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="1193.5" y="1261.0386">getNumEventsInEpoch() : int {query}</text><ellipse cx="1184.5" cy="1270.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1193.5" y="1273.8433">getPastEvent(int offset) : uint64_t {query}</text><ellipse cx="1184.5" cy="1283.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1193.5" y="1286.6479">operator[](int i) : uint64_t {query}</text><ellipse cx="1184.5" cy="1296.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="1193.5" y="1299.4526">clear() : void</text><ellipse cx="1184.5" cy="1309.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="1193.5" y="1312.2573">insertEvent(uint64_t timeStep) : void</text><ellipse cx="1184.5" cy="1321.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1193.5" y="1325.062">resize(int maxEvents) : void</text><ellipse cx="1184.5" cy="1334.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1193.5" y="1337.8667">startNewEpoch() : void</text><!--MD5=[cc1c410fe2850b6da0ea695abfcea755]
class VerticesFactory--><rect codeLine="182" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="150.4375" id="VerticesFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="781.5" y="7"/><ellipse cx="917.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M917.6875,18.8281 Q916.9375,18.8281 916.375,19.125 Q915.8125,19.4063 915.4219,19.9375 Q915.0313,20.4688 914.8281,21.25 Q914.6406,22.0156 914.6406,22.9688 Q914.6406,23.9375 914.8125,24.7031 Q915,25.4531 915.3594,25.9688 Q915.7344,26.4844 916.3125,26.7656 Q916.8906,27.0313 917.6875,27.0313 Q918.4219,27.0313 919.1563,26.8594 Q919.9063,26.6875 920.7813,26.3906 L920.7813,28.5469 Q920.375,28.7031 919.9844,28.8281 Q919.5938,28.9375 919.1875,29.0156 Q918.7813,29.0938 918.3594,29.125 Q917.9375,29.1719 917.4375,29.1719 Q916.0313,29.1719 915,28.7188 Q913.9844,28.2656 913.3125,27.4531 Q912.6406,26.6406 912.3125,25.5 Q911.9844,24.3438 911.9844,22.9531 Q911.9844,21.5781 912.3594,20.4219 Q912.7344,19.2656 913.4531,18.4375 Q914.1719,17.6094 915.2344,17.1563 Q916.2969,16.6875 917.6875,16.6875 Q918.5938,16.6875 919.5,16.9219 Q920.4063,17.1406 921.2344,17.5469 L920.4063,19.6406 Q919.7188,19.3125 919.0313,19.0781 Q918.3438,18.8281 917.6875,18.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="938.25" y="27.1543">VerticesFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="782.5" x2="1144.5" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="789.5" y="47"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="801.5" y="53.2104">createFunctions : VerticesFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="789.5" y="59.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="801.5" y="66.0151">verticesInstance : shared_ptr&lt;AllVertices&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="782.5" x2="1144.5" y1="72.6094" y2="72.6094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="789.5" y="80.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="801.5" y="86.8198">VerticesFactory()</text><ellipse cx="792.5" cy="96.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="801.5" y="99.6245">~VerticesFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="789.5" y="106.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="801.5" y="112.4292">invokeCreateFunction(const string&amp; className) : AllVertices*</text><ellipse cx="792.5" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="153" x="801.5" y="125.2339">getInstance() : VerticesFactory*</text><ellipse cx="792.5" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="801.5" y="138.0386">createVertices(const string&amp; className) : shared_ptr&lt;AllVertices&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="789.5" y="144.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="801.5" y="150.8433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[639115fe7f0fcce40793e2aa5cc37621]
class AllIFNeuronsDeviceProperties--><rect codeLine="194" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="252.875" id="AllIFNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="198" x="1568.5" y="567.5"/><ellipse cx="1585.3" cy="583.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1585.2375,579.3281 Q1584.4875,579.3281 1583.925,579.625 Q1583.3625,579.9063 1582.9719,580.4375 Q1582.5813,580.9688 1582.3781,581.75 Q1582.1906,582.5156 1582.1906,583.4688 Q1582.1906,584.4375 1582.3625,585.2031 Q1582.55,585.9531 1582.9094,586.4688 Q1583.2844,586.9844 1583.8625,587.2656 Q1584.4406,587.5313 1585.2375,587.5313 Q1585.9719,587.5313 1586.7063,587.3594 Q1587.4563,587.1875 1588.3313,586.8906 L1588.3313,589.0469 Q1587.925,589.2031 1587.5344,589.3281 Q1587.1438,589.4375 1586.7375,589.5156 Q1586.3313,589.5938 1585.9094,589.625 Q1585.4875,589.6719 1584.9875,589.6719 Q1583.5813,589.6719 1582.55,589.2188 Q1581.5344,588.7656 1580.8625,587.9531 Q1580.1906,587.1406 1579.8625,586 Q1579.5344,584.8438 1579.5344,583.4531 Q1579.5344,582.0781 1579.9094,580.9219 Q1580.2844,579.7656 1581.0031,578.9375 Q1581.7219,578.1094 1582.7844,577.6563 Q1583.8469,577.1875 1585.2375,577.1875 Q1586.1438,577.1875 1587.05,577.4219 Q1587.9563,577.6406 1588.7844,578.0469 L1587.9563,580.1406 Q1587.2688,579.8125 1586.5813,579.5781 Q1585.8938,579.3281 1585.2375,579.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="162" x="1599.7" y="587.6543">AllIFNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1569.5" x2="1765.5" y1="599.5" y2="599.5"/><ellipse cx="1579.5" cy="610.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1588.5" y="613.7104">C1_ : BGFLOAT*</text><ellipse cx="1579.5" cy="623.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1588.5" y="626.5151">C2_ : BGFLOAT*</text><ellipse cx="1579.5" cy="636.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1588.5" y="639.3198">Cm_ : BGFLOAT*</text><ellipse cx="1579.5" cy="648.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="1588.5" y="652.1245">I0_ : BGFLOAT*</text><ellipse cx="1579.5" cy="661.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1588.5" y="664.9292">Iinject_ : BGFLOAT*</text><ellipse cx="1579.5" cy="674.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1588.5" y="677.7339">Inoise_ : BGFLOAT*</text><ellipse cx="1579.5" cy="687.3281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="1588.5" y="690.5386">Isyn_ : BGFLOAT*</text><ellipse cx="1579.5" cy="700.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1588.5" y="703.3433">Rm_ : BGFLOAT*</text><ellipse cx="1579.5" cy="712.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1588.5" y="716.1479">Tau_ : BGFLOAT*</text><ellipse cx="1579.5" cy="725.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1588.5" y="728.9526">Trefract_ : BGFLOAT*</text><ellipse cx="1579.5" cy="738.5469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="1588.5" y="741.7573">Vinit_ : BGFLOAT*</text><ellipse cx="1579.5" cy="751.3516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1588.5" y="754.562">Vm_ : BGFLOAT*</text><ellipse cx="1579.5" cy="764.1563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1588.5" y="767.3667">Vreset_ : BGFLOAT*</text><ellipse cx="1579.5" cy="776.9609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1588.5" y="780.1714">Vrest_ : BGFLOAT*</text><ellipse cx="1579.5" cy="789.7656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1588.5" y="792.9761">Vthresh_ : BGFLOAT*</text><ellipse cx="1579.5" cy="802.5703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="1588.5" y="805.7808">numStepsInRefractoryPeriod_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1569.5" x2="1765.5" y1="812.375" y2="812.375"/><!--MD5=[bc6843495936d398fdad119946a0d209]
class AllIZHNeuronsDeviceProperties--><rect codeLine="214" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="124.8281" id="AllIZHNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="203" x="1566" y="1174.5"/><ellipse cx="1581" cy="1190.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1580.9375,1186.3281 Q1580.1875,1186.3281 1579.625,1186.625 Q1579.0625,1186.9063 1578.6719,1187.4375 Q1578.2813,1187.9688 1578.0781,1188.75 Q1577.8906,1189.5156 1577.8906,1190.4688 Q1577.8906,1191.4375 1578.0625,1192.2031 Q1578.25,1192.9531 1578.6094,1193.4688 Q1578.9844,1193.9844 1579.5625,1194.2656 Q1580.1406,1194.5313 1580.9375,1194.5313 Q1581.6719,1194.5313 1582.4063,1194.3594 Q1583.1563,1194.1875 1584.0313,1193.8906 L1584.0313,1196.0469 Q1583.625,1196.2031 1583.2344,1196.3281 Q1582.8438,1196.4375 1582.4375,1196.5156 Q1582.0313,1196.5938 1581.6094,1196.625 Q1581.1875,1196.6719 1580.6875,1196.6719 Q1579.2813,1196.6719 1578.25,1196.2188 Q1577.2344,1195.7656 1576.5625,1194.9531 Q1575.8906,1194.1406 1575.5625,1193 Q1575.2344,1191.8438 1575.2344,1190.4531 Q1575.2344,1189.0781 1575.6094,1187.9219 Q1575.9844,1186.7656 1576.7031,1185.9375 Q1577.4219,1185.1094 1578.4844,1184.6563 Q1579.5469,1184.1875 1580.9375,1184.1875 Q1581.8438,1184.1875 1582.75,1184.4219 Q1583.6563,1184.6406 1584.4844,1185.0469 L1583.6563,1187.1406 Q1582.9688,1186.8125 1582.2813,1186.5781 Q1581.5938,1186.3281 1580.9375,1186.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="171" x="1595" y="1194.6543">AllIZHNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1567" x2="1768" y1="1206.5" y2="1206.5"/><ellipse cx="1577" cy="1217.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="1586" y="1220.7104">Aconst_ : BGFLOAT*</text><ellipse cx="1577" cy="1230.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="1586" y="1233.5151">Bconst_ : BGFLOAT*</text><ellipse cx="1577" cy="1243.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1586" y="1246.3198">C3_ : BGFLOAT*</text><ellipse cx="1577" cy="1255.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="1586" y="1259.1245">Cconst_ : BGFLOAT*</text><ellipse cx="1577" cy="1268.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="1586" y="1271.9292">Dconst_ : BGFLOAT*</text><ellipse cx="1577" cy="1281.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="1586" y="1284.7339">u_ : BGFLOAT*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1567" x2="1768" y1="1291.3281" y2="1291.3281"/><!--MD5=[4ac84e1680f309079c4f5159a2743064]
class AllSpikingNeuronsDeviceProperties--><rect codeLine="224" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="99.2188" id="AllSpikingNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="223" x="1556" y="306.5"/><ellipse cx="1571" cy="322.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1570.9375,318.3281 Q1570.1875,318.3281 1569.625,318.625 Q1569.0625,318.9063 1568.6719,319.4375 Q1568.2813,319.9688 1568.0781,320.75 Q1567.8906,321.5156 1567.8906,322.4688 Q1567.8906,323.4375 1568.0625,324.2031 Q1568.25,324.9531 1568.6094,325.4688 Q1568.9844,325.9844 1569.5625,326.2656 Q1570.1406,326.5313 1570.9375,326.5313 Q1571.6719,326.5313 1572.4063,326.3594 Q1573.1563,326.1875 1574.0313,325.8906 L1574.0313,328.0469 Q1573.625,328.2031 1573.2344,328.3281 Q1572.8438,328.4375 1572.4375,328.5156 Q1572.0313,328.5938 1571.6094,328.625 Q1571.1875,328.6719 1570.6875,328.6719 Q1569.2813,328.6719 1568.25,328.2188 Q1567.2344,327.7656 1566.5625,326.9531 Q1565.8906,326.1406 1565.5625,325 Q1565.2344,323.8438 1565.2344,322.4531 Q1565.2344,321.0781 1565.6094,319.9219 Q1565.9844,318.7656 1566.7031,317.9375 Q1567.4219,317.1094 1568.4844,316.6563 Q1569.5469,316.1875 1570.9375,316.1875 Q1571.8438,316.1875 1572.75,316.4219 Q1573.6563,316.6406 1574.4844,317.0469 L1573.6563,319.1406 Q1572.9688,318.8125 1572.2813,318.5781 Q1571.5938,318.3281 1570.9375,318.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="191" x="1585" y="326.6543">AllSpikingNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1557" x2="1778" y1="338.5" y2="338.5"/><ellipse cx="1567" cy="349.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="1576" y="352.7104">hasFired_ : bool*</text><ellipse cx="1567" cy="362.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1576" y="365.5151">spikeCountOffset_ : int*</text><ellipse cx="1567" cy="375.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1576" y="378.3198">spikeCount_ : int*</text><ellipse cx="1567" cy="387.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1576" y="391.1245">spikeHistory_ : uint64_t**</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1557" x2="1778" y1="397.7188" y2="397.7188"/><!--MD5=[537ade6dbdfe6ef3b32240037651f8aa]
class AllVerticesDeviceProperties--><rect codeLine="232" fill="#FEFECE" filter="url(#f1746k35ggpdwo)" height="60.8047" id="AllVerticesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="181" x="1577" y="51.5"/><ellipse cx="1592" cy="67.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1591.9375,63.3281 Q1591.1875,63.3281 1590.625,63.625 Q1590.0625,63.9063 1589.6719,64.4375 Q1589.2813,64.9688 1589.0781,65.75 Q1588.8906,66.5156 1588.8906,67.4688 Q1588.8906,68.4375 1589.0625,69.2031 Q1589.25,69.9531 1589.6094,70.4688 Q1589.9844,70.9844 1590.5625,71.2656 Q1591.1406,71.5313 1591.9375,71.5313 Q1592.6719,71.5313 1593.4063,71.3594 Q1594.1563,71.1875 1595.0313,70.8906 L1595.0313,73.0469 Q1594.625,73.2031 1594.2344,73.3281 Q1593.8438,73.4375 1593.4375,73.5156 Q1593.0313,73.5938 1592.6094,73.625 Q1592.1875,73.6719 1591.6875,73.6719 Q1590.2813,73.6719 1589.25,73.2188 Q1588.2344,72.7656 1587.5625,71.9531 Q1586.8906,71.1406 1586.5625,70 Q1586.2344,68.8438 1586.2344,67.4531 Q1586.2344,66.0781 1586.6094,64.9219 Q1586.9844,63.7656 1587.7031,62.9375 Q1588.4219,62.1094 1589.4844,61.6563 Q1590.5469,61.1875 1591.9375,61.1875 Q1592.8438,61.1875 1593.75,61.4219 Q1594.6563,61.6406 1595.4844,62.0469 L1594.6563,64.1406 Q1593.9688,63.8125 1593.2813,63.5781 Q1592.5938,63.3281 1591.9375,63.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="149" x="1606" y="71.6543">AllVerticesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1578" x2="1757" y1="83.5" y2="83.5"/><ellipse cx="1588" cy="94.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1597" y="97.7104">summationPoints_ : BGFLOAT*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1578" x2="1757" y1="104.3047" y2="104.3047"/><!--MD5=[b299d6e53b6ac4d2a1701b68b9dc7554]
reverse link AllIFNeurons to AllIZHNeurons--><path codeLine="242" d="M573.16,1598.88 C565.6,1612.92 558.04,1626.95 550.53,1640.9 " fill="none" id="AllIFNeurons-backto-AllIZHNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="567.09,1595.4,582.73,1581.11,579.41,1602.03,567.09,1595.4" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7d41fa10eee7108bf615579dc16f66c4]
reverse link AllIFNeurons to AllLIFNeurons--><path codeLine="245" d="M961.9,1598.99 C1021.92,1710.45 1081.89,1821.81 1118.83,1890.4 " fill="none" id="AllIFNeurons-backto-AllLIFNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="955.59,1602.03,952.27,1581.11,967.91,1595.4,955.59,1602.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[17cadfdde82fbd78aaa7ab65342c0454]
reverse link AllIFNeuronsDeviceProperties to AllIZHNeuronsDeviceProperties--><path codeLine="248" d="M1667.5,841.12 C1667.5,950.25 1667.5,1093.92 1667.5,1174.45 " fill="none" id="AllIFNeuronsDeviceProperties-backto-AllIZHNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1660.5,840.82,1667.5,820.82,1674.5,840.82,1660.5,840.82" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8724fdcf162cd93143062af7a28861a5]
reverse link AllSpikingNeurons to AllIFNeurons--><path codeLine="251" d="M906.52,852.26 C901.75,865.46 896.81,879.09 891.77,892.99 " fill="none" id="AllSpikingNeurons-backto-AllIFNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="900.01,849.69,913.41,833.27,913.18,854.46,900.01,849.69" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5fcb689111a9832bf7543527f372e607]
reverse link AllSpikingNeuronsDeviceProperties to AllIFNeuronsDeviceProperties--><path codeLine="254" d="M1667.5,425.94 C1667.5,466.61 1667.5,519.34 1667.5,567.18 " fill="none" id="AllSpikingNeuronsDeviceProperties-backto-AllIFNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1660.5,425.86,1667.5,405.86,1674.5,425.86,1660.5,425.86" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f591e114573ccd2409f159b73ea72911]
reverse link AllVertices to AllSpikingNeurons--><path codeLine="257" d="M963.5,515.15 C963.5,528.42 963.5,541.77 963.5,554.87 " fill="none" id="AllVertices-backto-AllSpikingNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="956.5,515.12,963.5,495.12,970.5,515.12,956.5,515.12" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[fcd28df228b50666b72099cd983e7d22]
reverse link AllVerticesDeviceProperties to AllSpikingNeuronsDeviceProperties--><path codeLine="260" d="M1667.5,132.66 C1667.5,181.98 1667.5,257.14 1667.5,306.17 " fill="none" id="AllVerticesDeviceProperties-backto-AllSpikingNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1660.5,132.63,1667.5,112.63,1674.5,132.63,1660.5,132.63" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f7b242bc45f077880469141c87516fa7]
reverse link AllSpikingNeurons to EventBuffer--><path codeLine="268" d="M1119.34,843.66 C1132.44,859.63 1144.76,876.2 1155.5,893 C1202.49,966.52 1236.94,1059.37 1258.85,1129.92 " fill="none" id="AllSpikingNeurons-backto-EventBuffer" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1110.62,833.25,1111.4074,840.418,1118.3268,842.4481,1117.5394,835.2801,1110.62,833.25" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[420839a3a3a413a1278c95e345e5584e]
reverse link VerticesFactory to AllVertices--><path codeLine="271" d="M963.5,170.67 C963.5,185.5 963.5,201.21 963.5,216.96 " fill="none" id="VerticesFactory-backto-AllVertices" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="963.5,157.33,959.5,163.33,963.5,169.33,967.5,163.33,963.5,157.33" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[dff4a23c2ca0e4bea6d4b96116df0db0]
@startuml VerticesClassDiagram



/' Objects '/

class AllIFNeurons {
	+AllIFNeurons()
	+~AllIFNeurons()
	-IinjectRange_ : BGFLOAT
	-InoiseRange_ : BGFLOAT
	-VinitRange_ : BGFLOAT
	-VresetRange_ : BGFLOAT
	-VrestingRange_ : BGFLOAT
	-VthreshRange_ : BGFLOAT
	-starterVresetRange_ : BGFLOAT
	-starterVthreshRange_ : BGFLOAT
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
	+toString(const int index) : string {query}
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+loadParameters() : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int i) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int i) : void {query}
}


class AllIZHNeurons {
	+AllIZHNeurons()
	+~AllIZHNeurons()
	+{static} Create() : AllVertices*
	-excAconst_ : BGFLOAT
	-excBconst_ : BGFLOAT
	-excCconst_ : BGFLOAT
	-excDconst_ : BGFLOAT
	-inhAconst_ : BGFLOAT
	-inhBconst_ : BGFLOAT
	-inhCconst_ : BGFLOAT
	-inhDconst_ : BGFLOAT
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
	-{static} DEFAULT_a : static constexpr BGFLOAT
	-{static} DEFAULT_b : static constexpr BGFLOAT
	-{static} DEFAULT_c : static constexpr BGFLOAT
	-{static} DEFAULT_d : static constexpr BGFLOAT
	+toString(const int index) : string {query}
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#fire(const int index) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int index) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int index) : void {query}
}


class AllLIFNeurons {
	+AllLIFNeurons()
	+~AllLIFNeurons()
	+{static} Create() : AllVertices*
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#fire(const int index) : void
	+printParameters() : void {query}
}


abstract class AllSpikingNeurons {
	+AllSpikingNeurons()
	+~AllSpikingNeurons()
	#fAllowBackPropagation_ : bool
	+getSpikeHistory(int index, int offIndex) : uint64_t
	+vertexEvents_ : vector<EventBuffer>
	+hasFired_ : vector<bool>
	#{abstract} advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, const EdgeIndexMap* edgeIndexMap) : void
	#clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} clearNeuronSpikeCounts(void* allVerticesDevice) : void
	+clearSpikeCounts() : void
	#copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	#copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	#fire(const int index) : void
	+setAdvanceVerticesDeviceParams(AllEdges& synapses) : void
	+setupVertices() : void
}


abstract class AllVertices {
	+AllVertices()
	+~AllVertices()
	+summationPoints_ : BGFLOAT*
	#size_ : int
	#fileLogger_ : log4cplus::Logger
	#vertexLogger_ : log4cplus::Logger
	+{abstract} toString(const int i) : string {query}
	+{abstract} advanceVertices(AllEdges& edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	+{abstract} advanceVertices(AllEdges& edges, const EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+{abstract} copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronHostToDevice(void* allVerticesDevice) : void
	+{abstract} createAllVertices(Layout* layout) : void
	+{abstract} deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+{abstract} setAdvanceVerticesDeviceParams(AllEdges& edges) : void
	+setupVertices() : void
}


class EventBuffer {
	+EventBuffer(int maxEvents)
	-epochStart_ : int
	+getNumEventsInEpoch() : int {query}
	-numEventsInEpoch_ : int
	-queueEnd_ : int
	-queueFront_ : int
	+getPastEvent(int offset) : uint64_t {query}
	+operator[](int i) : uint64_t {query}
	-eventTimeSteps_ : vector<uint64_t>
	+clear() : void
	+insertEvent(uint64_t timeStep) : void
	+resize(int maxEvents) : void
	+startNewEpoch() : void
}


class VerticesFactory {
	-VerticesFactory()
	+~VerticesFactory()
	-invokeCreateFunction(const string& className) : AllVertices*
	+{static} getInstance() : VerticesFactory*
	-createFunctions : VerticesFunctionMap
	+createVertices(const string& className) : shared_ptr<AllVertices>
	-verticesInstance : shared_ptr<AllVertices>
	-registerClass(const string& className, CreateFunction function) : void
}


class AllIFNeuronsDeviceProperties {
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
}


class AllIZHNeuronsDeviceProperties {
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
}


class AllSpikingNeuronsDeviceProperties {
	+hasFired_ : bool*
	+spikeCountOffset_ : int*
	+spikeCount_ : int*
	+spikeHistory_ : uint64_t**
}


class AllVerticesDeviceProperties {
	+summationPoints_ : BGFLOAT*
}





/' Inheritance relationships '/

.AllIFNeurons <|- - .AllIZHNeurons


.AllIFNeurons <|- - .AllLIFNeurons


.AllIFNeuronsDeviceProperties <|- - .AllIZHNeuronsDeviceProperties


.AllSpikingNeurons <|- - .AllIFNeurons


.AllSpikingNeuronsDeviceProperties <|- - .AllIFNeuronsDeviceProperties


.AllVertices <|- - .AllSpikingNeurons


.AllVerticesDeviceProperties <|- - .AllSpikingNeuronsDeviceProperties





/' Aggregation relationships '/

.AllSpikingNeurons *- - .EventBuffer


.VerticesFactory *- - .AllVertices






/' Nested objects '/



@enduml

@startuml VerticesClassDiagram




class AllIFNeurons {
	+AllIFNeurons()
	+~AllIFNeurons()
	-IinjectRange_ : BGFLOAT
	-InoiseRange_ : BGFLOAT
	-VinitRange_ : BGFLOAT
	-VresetRange_ : BGFLOAT
	-VrestingRange_ : BGFLOAT
	-VthreshRange_ : BGFLOAT
	-starterVresetRange_ : BGFLOAT
	-starterVthreshRange_ : BGFLOAT
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
	+toString(const int index) : string {query}
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+loadParameters() : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int i) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int i) : void {query}
}


class AllIZHNeurons {
	+AllIZHNeurons()
	+~AllIZHNeurons()
	+{static} Create() : AllVertices*
	-excAconst_ : BGFLOAT
	-excBconst_ : BGFLOAT
	-excCconst_ : BGFLOAT
	-excDconst_ : BGFLOAT
	-inhAconst_ : BGFLOAT
	-inhBconst_ : BGFLOAT
	-inhCconst_ : BGFLOAT
	-inhDconst_ : BGFLOAT
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
	-{static} DEFAULT_a : static constexpr BGFLOAT
	-{static} DEFAULT_b : static constexpr BGFLOAT
	-{static} DEFAULT_c : static constexpr BGFLOAT
	-{static} DEFAULT_d : static constexpr BGFLOAT
	+toString(const int index) : string {query}
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#fire(const int index) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int index) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int index) : void {query}
}


class AllLIFNeurons {
	+AllLIFNeurons()
	+~AllLIFNeurons()
	+{static} Create() : AllVertices*
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#fire(const int index) : void
	+printParameters() : void {query}
}


abstract class AllSpikingNeurons {
	+AllSpikingNeurons()
	+~AllSpikingNeurons()
	#fAllowBackPropagation_ : bool
	+getSpikeHistory(int index, int offIndex) : uint64_t
	+vertexEvents_ : vector<EventBuffer>
	+hasFired_ : vector<bool>
	#{abstract} advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, const EdgeIndexMap* edgeIndexMap) : void
	#clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} clearNeuronSpikeCounts(void* allVerticesDevice) : void
	+clearSpikeCounts() : void
	#copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	#copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	#fire(const int index) : void
	+setAdvanceVerticesDeviceParams(AllEdges& synapses) : void
	+setupVertices() : void
}


abstract class AllVertices {
	+AllVertices()
	+~AllVertices()
	+summationPoints_ : BGFLOAT*
	#size_ : int
	#fileLogger_ : log4cplus::Logger
	#vertexLogger_ : log4cplus::Logger
	+{abstract} toString(const int i) : string {query}
	+{abstract} advanceVertices(AllEdges& edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	+{abstract} advanceVertices(AllEdges& edges, const EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+{abstract} copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronHostToDevice(void* allVerticesDevice) : void
	+{abstract} createAllVertices(Layout* layout) : void
	+{abstract} deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+{abstract} setAdvanceVerticesDeviceParams(AllEdges& edges) : void
	+setupVertices() : void
}


class EventBuffer {
	+EventBuffer(int maxEvents)
	-epochStart_ : int
	+getNumEventsInEpoch() : int {query}
	-numEventsInEpoch_ : int
	-queueEnd_ : int
	-queueFront_ : int
	+getPastEvent(int offset) : uint64_t {query}
	+operator[](int i) : uint64_t {query}
	-eventTimeSteps_ : vector<uint64_t>
	+clear() : void
	+insertEvent(uint64_t timeStep) : void
	+resize(int maxEvents) : void
	+startNewEpoch() : void
}


class VerticesFactory {
	-VerticesFactory()
	+~VerticesFactory()
	-invokeCreateFunction(const string& className) : AllVertices*
	+{static} getInstance() : VerticesFactory*
	-createFunctions : VerticesFunctionMap
	+createVertices(const string& className) : shared_ptr<AllVertices>
	-verticesInstance : shared_ptr<AllVertices>
	-registerClass(const string& className, CreateFunction function) : void
}


class AllIFNeuronsDeviceProperties {
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
}


class AllIZHNeuronsDeviceProperties {
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
}


class AllSpikingNeuronsDeviceProperties {
	+hasFired_ : bool*
	+spikeCountOffset_ : int*
	+spikeCount_ : int*
	+spikeHistory_ : uint64_t**
}


class AllVerticesDeviceProperties {
	+summationPoints_ : BGFLOAT*
}






.AllIFNeurons <|- - .AllIZHNeurons


.AllIFNeurons <|- - .AllLIFNeurons


.AllIFNeuronsDeviceProperties <|- - .AllIZHNeuronsDeviceProperties


.AllSpikingNeurons <|- - .AllIFNeurons


.AllSpikingNeuronsDeviceProperties <|- - .AllIFNeuronsDeviceProperties


.AllVertices <|- - .AllSpikingNeurons


.AllVerticesDeviceProperties <|- - .AllSpikingNeuronsDeviceProperties






.AllSpikingNeurons *- - .EventBuffer


.VerticesFactory *- - .AllVertices









@enduml

PlantUML version 1.2020.23(Sun Dec 13 19:14:58 GMT 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>