<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="4831px" preserveAspectRatio="none" style="width:6619px;height:4831px;" version="1.1" viewBox="0 0 6619 4831" width="6619px" zoomAndPan="magnify"><defs><filter height="300%" id="f1c58mvs4fnw0y" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[935a686a552498c9fe3db149d943753f]
class AllDSSynapses--><rect codeLine="8" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="444.9453" id="AllDSSynapses" style="stroke:#A80036;stroke-width:1.5;" width="724" x="9" y="3669.5"/><ellipse cx="326.75" cy="3685.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M326.6875,3681.3281 Q325.9375,3681.3281 325.375,3681.625 Q324.8125,3681.9063 324.4219,3682.4375 Q324.0313,3682.9688 323.8281,3683.75 Q323.6406,3684.5156 323.6406,3685.4688 Q323.6406,3686.4375 323.8125,3687.2031 Q324,3687.9531 324.3594,3688.4688 Q324.7344,3688.9844 325.3125,3689.2656 Q325.8906,3689.5313 326.6875,3689.5313 Q327.4219,3689.5313 328.1563,3689.3594 Q328.9063,3689.1875 329.7813,3688.8906 L329.7813,3691.0469 Q329.375,3691.2031 328.9844,3691.3281 Q328.5938,3691.4375 328.1875,3691.5156 Q327.7813,3691.5938 327.3594,3691.625 Q326.9375,3691.6719 326.4375,3691.6719 Q325.0313,3691.6719 324,3691.2188 Q322.9844,3690.7656 322.3125,3689.9531 Q321.6406,3689.1406 321.3125,3688 Q320.9844,3686.8438 320.9844,3685.4531 Q320.9844,3684.0781 321.3594,3682.9219 Q321.7344,3681.7656 322.4531,3680.9375 Q323.1719,3680.1094 324.2344,3679.6563 Q325.2969,3679.1875 326.6875,3679.1875 Q327.5938,3679.1875 328.5,3679.4219 Q329.4063,3679.6406 330.2344,3680.0469 L329.4063,3682.1406 Q328.7188,3681.8125 328.0313,3681.5781 Q327.3438,3681.3281 326.6875,3681.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="347.25" y="3689.6543">AllDSSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="732" y1="3701.5" y2="3701.5"/><ellipse cx="20" cy="3712.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="29" y="3715.7104">D_ : BGFLOAT*</text><ellipse cx="20" cy="3725.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="29" y="3728.5151">F_ : BGFLOAT*</text><ellipse cx="20" cy="3738.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="29" y="3741.3198">U_ : BGFLOAT*</text><ellipse cx="20" cy="3750.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="29" y="3754.1245">r_ : BGFLOAT*</text><ellipse cx="20" cy="3763.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="29" y="3766.9292">u_ : BGFLOAT*</text><ellipse cx="20" cy="3776.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="29" y="3779.7339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="732" y1="3786.3281" y2="3786.3281"/><ellipse cx="20" cy="3797.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="29" y="3800.5386">AllDSSynapses()</text><ellipse cx="20" cy="3810.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="29" y="3813.3433">AllDSSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="20" cy="3822.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="29" y="3826.1479">~AllDSSynapses()</text><ellipse cx="20" cy="3835.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="29" y="3838.9526">Create() : AllEdges*</text><polygon fill="#FFFF44" points="20,3843.5469,24,3847.5469,20,3851.5469,16,3847.5469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="29" y="3851.7573">allocDeviceStruct(AllDSSynapsesDeviceProperties&amp; allEdges, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="20" cy="3861.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="29" y="3864.562">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="20" cy="3874.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="29" y="3877.3667">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="20,3881.9609,24,3885.9609,20,3889.9609,16,3885.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="29" y="3890.1714">changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><polygon fill="#FFFF44" points="20,3894.7656,24,3898.7656,20,3902.7656,16,3898.7656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="29" y="3902.9761">copyDeviceToHost(AllDSSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="20" cy="3912.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="29" y="3915.7808">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="20" cy="3925.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="29" y="3928.5854">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="20" cy="3938.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="29" y="3941.3901">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="20,3945.9844,24,3949.9844,20,3953.9844,16,3949.9844" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="698" x="29" y="3954.1948">copyHostToDevice(void* allEdgesDevice, AllDSSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="20" cy="3963.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="29" y="3966.9995">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="20,3971.5938,24,3975.5938,20,3979.5938,16,3975.5938" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="29" y="3979.8042">deleteDeviceStruct(AllDSSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="20" cy="3989.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="29" y="3992.6089">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><ellipse cx="20" cy="4002.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="29" y="4005.4136">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="20" cy="4015.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="29" y="4018.2183">printParameters() : void {query}</text><ellipse cx="20" cy="4027.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="29" y="4031.0229">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="20,4035.6172,24,4039.6172,20,4043.6172,16,4039.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="29" y="4043.8276">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="20" cy="4053.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="29" y="4056.6323">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="20" cy="4066.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="4069.437">setEdgeClassID() : void</text><ellipse cx="20" cy="4079.0313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="29" y="4082.2417">setupEdges() : void</text><polygon fill="#FFFF44" points="20,4086.8359,24,4090.8359,20,4094.8359,16,4090.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="29" y="4095.0464">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="20,4099.6406,24,4103.6406,20,4107.6406,16,4103.6406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="29" y="4107.8511">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[09c0093d34d85daed484b6b6f446313a]
class AllDynamicSTDPSynapses--><rect codeLine="43" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="444.9453" id="AllDynamicSTDPSynapses" style="stroke:#A80036;stroke-width:1.5;" width="778" x="747" y="4373"/><ellipse cx="1061.25" cy="4389" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1061.1875,4384.8281 Q1060.4375,4384.8281 1059.875,4385.125 Q1059.3125,4385.4063 1058.9219,4385.9375 Q1058.5313,4386.4688 1058.3281,4387.25 Q1058.1406,4388.0156 1058.1406,4388.9688 Q1058.1406,4389.9375 1058.3125,4390.7031 Q1058.5,4391.4531 1058.8594,4391.9688 Q1059.2344,4392.4844 1059.8125,4392.7656 Q1060.3906,4393.0313 1061.1875,4393.0313 Q1061.9219,4393.0313 1062.6563,4392.8594 Q1063.4063,4392.6875 1064.2813,4392.3906 L1064.2813,4394.5469 Q1063.875,4394.7031 1063.4844,4394.8281 Q1063.0938,4394.9375 1062.6875,4395.0156 Q1062.2813,4395.0938 1061.8594,4395.125 Q1061.4375,4395.1719 1060.9375,4395.1719 Q1059.5313,4395.1719 1058.5,4394.7188 Q1057.4844,4394.2656 1056.8125,4393.4531 Q1056.1406,4392.6406 1055.8125,4391.5 Q1055.4844,4390.3438 1055.4844,4388.9531 Q1055.4844,4387.5781 1055.8594,4386.4219 Q1056.2344,4385.2656 1056.9531,4384.4375 Q1057.6719,4383.6094 1058.7344,4383.1563 Q1059.7969,4382.6875 1061.1875,4382.6875 Q1062.0938,4382.6875 1063,4382.9219 Q1063.9063,4383.1406 1064.7344,4383.5469 L1063.9063,4385.6406 Q1063.2188,4385.3125 1062.5313,4385.0781 Q1061.8438,4384.8281 1061.1875,4384.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="141" x="1081.75" y="4393.1543">AllDynamicSTDPSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="748" x2="1524" y1="4405" y2="4405"/><ellipse cx="758" cy="4416" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="767" y="4419.2104">D_ : BGFLOAT*</text><ellipse cx="758" cy="4428.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="767" y="4432.0151">F_ : BGFLOAT*</text><ellipse cx="758" cy="4441.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="767" y="4444.8198">U_ : BGFLOAT*</text><ellipse cx="758" cy="4454.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="767" y="4457.6245">r_ : BGFLOAT*</text><ellipse cx="758" cy="4467.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="767" y="4470.4292">u_ : BGFLOAT*</text><ellipse cx="758" cy="4480.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="767" y="4483.2339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="748" x2="1524" y1="4489.8281" y2="4489.8281"/><ellipse cx="758" cy="4500.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="767" y="4504.0386">AllDynamicSTDPSynapses()</text><ellipse cx="758" cy="4513.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="767" y="4516.8433">AllDynamicSTDPSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="758" cy="4526.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="767" y="4529.6479">~AllDynamicSTDPSynapses()</text><ellipse cx="758" cy="4539.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="767" y="4542.4526">Create() : AllEdges*</text><polygon fill="#FFFF44" points="758,4547.0469,762,4551.0469,758,4555.0469,754,4551.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="578" x="767" y="4555.2573">allocDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties&amp; allEdges, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="758" cy="4564.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="767" y="4568.062">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="758" cy="4577.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="767" y="4580.8667">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="758,4585.4609,762,4589.4609,758,4593.4609,754,4589.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="767" y="4593.6714">changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><polygon fill="#FFFF44" points="758,4598.2656,762,4602.2656,758,4606.2656,754,4602.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="442" x="767" y="4606.4761">copyDeviceToHost(AllDynamicSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="758" cy="4616.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="767" y="4619.2808">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="758" cy="4628.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="767" y="4632.0854">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="758" cy="4641.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="767" y="4644.8901">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="758,4649.4844,762,4653.4844,758,4657.4844,754,4653.4844" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="752" x="767" y="4657.6948">copyHostToDevice(void* allEdgesDevice, AllDynamicSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="758" cy="4667.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="767" y="4670.4995">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="758,4675.0938,762,4679.0938,758,4683.0938,754,4679.0938" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="767" y="4683.3042">deleteDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="758" cy="4692.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="767" y="4696.1089">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><ellipse cx="758" cy="4705.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="767" y="4708.9136">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="758" cy="4718.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="767" y="4721.7183">printParameters() : void {query}</text><ellipse cx="758" cy="4731.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="767" y="4734.5229">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="758,4739.1172,762,4743.1172,758,4747.1172,754,4743.1172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="767" y="4747.3276">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="758" cy="4756.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="767" y="4760.1323">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="758" cy="4769.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="767" y="4772.937">setEdgeClassID() : void</text><ellipse cx="758" cy="4782.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="767" y="4785.7417">setupEdges() : void</text><polygon fill="#FFFF44" points="758,4790.3359,762,4794.3359,758,4798.3359,754,4794.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="767" y="4798.5464">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="758,4803.1406,762,4807.1406,758,4811.1406,754,4807.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="767" y="4811.3511">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[06f12ec46b87224fd0e1c514fed4a6e4]
class AllEdges--><rect codeLine="78" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="572.9922" id="AllEdges" style="stroke:#A80036;stroke-width:1.5;" width="539" x="483.5" y="1739"/><ellipse cx="726.25" cy="1755" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M729.2031,1760 L728.375,1757.1094 L724.1875,1757.1094 L723.3438,1760 L720.75,1760 L724.6875,1747.8125 L727.8438,1747.8125 L731.7969,1760 L729.2031,1760 Z M727.7656,1754.9531 L727,1752.2969 Q726.9375,1752.1406 726.8438,1751.8125 Q726.75,1751.4688 726.625,1751.0625 Q726.5156,1750.6406 726.4063,1750.2344 Q726.3125,1749.8125 726.2813,1749.5313 Q726.25,1749.7031 726.1875,1749.9531 Q726.1406,1750.2031 726.0625,1750.4844 Q726,1750.7656 725.9219,1751.0469 Q725.8438,1751.3281 725.7813,1751.5781 Q725.7188,1751.8281 725.6563,1752.0156 Q725.6094,1752.2031 725.5781,1752.2969 L724.8125,1754.9531 L727.7656,1754.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="45" x="746.75" y="1759.1543">AllEdges</text><line style="stroke:#A80036;stroke-width:1.5;" x1="484.5" x2="1021.5" y1="1771" y2="1771"/><ellipse cx="494.5" cy="1782" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="503.5" y="1785.2104">W_ : BGFLOAT*</text><ellipse cx="494.5" cy="1794.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="503.5" y="1798.0151">maxEdgesPerVertex_ : BGSIZE</text><ellipse cx="494.5" cy="1807.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="503.5" y="1810.8198">totalEdgeCount_ : BGSIZE</text><ellipse cx="494.5" cy="1820.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="503.5" y="1823.6245">edgeCounts_ : BGSIZE*</text><ellipse cx="494.5" cy="1833.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="503.5" y="1836.4292">inUse_ : bool*</text><ellipse cx="494.5" cy="1846.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="503.5" y="1849.2339">type_ : edgeType*</text><ellipse cx="494.5" cy="1858.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="503.5" y="1862.0386">countVertices_ : int</text><ellipse cx="494.5" cy="1871.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="503.5" y="1874.8433">destVertexIndex_ : int*</text><ellipse cx="494.5" cy="1884.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="503.5" y="1887.6479">sourceVertexIndex_ : int*</text><polygon fill="none" points="494.5,1892.2422,498.5,1896.2422,494.5,1900.2422,490.5,1896.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="503.5" y="1900.4526">edgeLogger_ : log4cplus::Logger</text><polygon fill="none" points="494.5,1905.0469,498.5,1909.0469,494.5,1913.0469,490.5,1909.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="503.5" y="1913.2573">fileLogger_ : log4cplus::Logger</text><line style="stroke:#A80036;stroke-width:1.5;" x1="484.5" x2="1021.5" y1="1919.8516" y2="1919.8516"/><ellipse cx="494.5" cy="1930.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="46" x="503.5" y="1934.062">AllEdges()</text><ellipse cx="494.5" cy="1943.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="503.5" y="1946.8667">AllEdges(const int numVertices, const int maxEdges)</text><ellipse cx="494.5" cy="1956.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="503.5" y="1959.6714">~AllEdges()</text><polygon fill="#FFFF44" points="494.5,1964.2656,498.5,1968.2656,494.5,1972.2656,490.5,1968.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="503.5" y="1972.4761">edgeOrdinalToType(const int typeOrdinal) : edgeType</text><ellipse cx="494.5" cy="1982.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="503.5" y="1985.2808">addEdge(edgeType type, const int srcVertex, const int destVertex, const BGFLOAT deltaT) : BGSIZE</text><ellipse cx="494.5" cy="1994.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="292" x="503.5" y="1998.0854">advanceEdge(const BGSIZE iEdg, AllVertices* vertices) : void</text><ellipse cx="494.5" cy="2007.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="503.5" y="2010.8901">advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void</text><ellipse cx="494.5" cy="2020.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="503.5" y="2023.6948">advanceEdges(AllVertices* vertices, EdgeIndexMap* edgeIndexMap) : void</text><ellipse cx="494.5" cy="2033.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="249" x="503.5" y="2036.4995">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="494.5" cy="2046.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="503.5" y="2049.3042">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="494.5" cy="2058.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="503.5" y="2062.1089">copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="2071.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="503.5" y="2074.9136">copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="2084.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="503.5" y="2087.7183">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="2097.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="503.5" y="2100.5229">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="2110.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="503.5" y="2113.3276">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="494.5" cy="2122.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="513" x="503.5" y="2126.1323">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><ellipse cx="494.5" cy="2135.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="503.5" y="2138.937">createEdgeIndexMap(shared_ptr&lt;EdgeIndexMap&gt; edgeIndexMap) : void</text><ellipse cx="494.5" cy="2148.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="503.5" y="2151.7417">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="2161.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="503.5" y="2164.5464">eraseEdge(const int neuronIndex, const BGSIZE iEdg) : void</text><ellipse cx="494.5" cy="2174.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="503.5" y="2177.3511">load(Archive&amp; archive) : void</text><ellipse cx="494.5" cy="2186.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="503.5" y="2190.1558">loadParameters() : void</text><ellipse cx="494.5" cy="2199.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="503.5" y="2202.9604">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="494.5" cy="2212.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="503.5" y="2215.7651">printParameters() : void {query}</text><polygon fill="#FFFF44" points="494.5,2220.3594,498.5,2224.3594,494.5,2228.3594,490.5,2224.3594" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="503.5" y="2228.5698">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="494.5" cy="2238.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="503.5" y="2241.3745">save(Archive&amp; archive) : void {query}</text><ellipse cx="494.5" cy="2250.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="191" x="503.5" y="2254.1792">setAdvanceEdgesDeviceParams() : void</text><ellipse cx="494.5" cy="2263.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="110" x="503.5" y="2266.9839">setEdgeClassID() : void</text><ellipse cx="494.5" cy="2276.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="503.5" y="2279.7886">setupEdges() : void</text><polygon fill="#FFFF44" points="494.5,2284.3828,498.5,2288.3828,494.5,2292.3828,490.5,2288.3828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="503.5" y="2292.5933">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="494.5,2297.1875,498.5,2301.1875,494.5,2305.1875,490.5,2301.1875" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="503.5" y="2305.3979">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[cf80cca85261d84eda43dbc026d5d8d1]
class AllIFNeurons--><rect codeLine="123" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="688.2344" id="AllIFNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="4809.5" y="2716.5"/><ellipse cx="5140.75" cy="2732.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5140.6875,2728.3281 Q5139.9375,2728.3281 5139.375,2728.625 Q5138.8125,2728.9063 5138.4219,2729.4375 Q5138.0313,2729.9688 5137.8281,2730.75 Q5137.6406,2731.5156 5137.6406,2732.4688 Q5137.6406,2733.4375 5137.8125,2734.2031 Q5138,2734.9531 5138.3594,2735.4688 Q5138.7344,2735.9844 5139.3125,2736.2656 Q5139.8906,2736.5313 5140.6875,2736.5313 Q5141.4219,2736.5313 5142.1563,2736.3594 Q5142.9063,2736.1875 5143.7813,2735.8906 L5143.7813,2738.0469 Q5143.375,2738.2031 5142.9844,2738.3281 Q5142.5938,2738.4375 5142.1875,2738.5156 Q5141.7813,2738.5938 5141.3594,2738.625 Q5140.9375,2738.6719 5140.4375,2738.6719 Q5139.0313,2738.6719 5138,2738.2188 Q5136.9844,2737.7656 5136.3125,2736.9531 Q5135.6406,2736.1406 5135.3125,2735 Q5134.9844,2733.8438 5134.9844,2732.4531 Q5134.9844,2731.0781 5135.3594,2729.9219 Q5135.7344,2728.7656 5136.4531,2727.9375 Q5137.1719,2727.1094 5138.2344,2726.6563 Q5139.2969,2726.1875 5140.6875,2726.1875 Q5141.5938,2726.1875 5142.5,2726.4219 Q5143.4063,2726.6406 5144.2344,2727.0469 L5143.4063,2729.1406 Q5142.7188,2728.8125 5142.0313,2728.5781 Q5141.3438,2728.3281 5140.6875,2728.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="5161.25" y="2736.6543">AllIFNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4810.5" x2="5549.5" y1="2748.5" y2="2748.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2756.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="4829.5" y="2762.7104">IinjectRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2769.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="4829.5" y="2775.5151">InoiseRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2782.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="4829.5" y="2788.3198">VinitRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2794.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="4829.5" y="2801.1245">VresetRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2807.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="4829.5" y="2813.9292">VrestingRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2820.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="4829.5" y="2826.7339">VthreshRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2833.3281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="4829.5" y="2839.5386">starterVresetRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4817.5" y="2846.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="4829.5" y="2852.3433">starterVthreshRange_ : BGFLOAT</text><ellipse cx="4820.5" cy="2861.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="4829.5" y="2865.1479">C1_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2874.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="4829.5" y="2877.9526">C2_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2887.5469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4829.5" y="2890.7573">Cm_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2900.3516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="4829.5" y="2903.562">I0_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2913.1563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="4829.5" y="2916.3667">Iinject_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2925.9609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="4829.5" y="2929.1714">Inoise_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2938.7656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="4829.5" y="2941.9761">Isyn_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2951.5703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4829.5" y="2954.7808">Rm_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2964.375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4829.5" y="2967.5854">Tau_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2977.1797" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="4829.5" y="2980.3901">Trefract_ : BGFLOAT*</text><ellipse cx="4820.5" cy="2989.9844" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="4829.5" y="2993.1948">Vinit_ : BGFLOAT*</text><ellipse cx="4820.5" cy="3002.7891" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4829.5" y="3005.9995">Vm_ : BGFLOAT*</text><ellipse cx="4820.5" cy="3015.5938" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="4829.5" y="3018.8042">Vreset_ : BGFLOAT*</text><ellipse cx="4820.5" cy="3028.3984" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="4829.5" y="3031.6089">Vrest_ : BGFLOAT*</text><ellipse cx="4820.5" cy="3041.2031" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="4829.5" y="3044.4136">Vthresh_ : BGFLOAT*</text><ellipse cx="4820.5" cy="3054.0078" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="4829.5" y="3057.2183">numStepsInRefractoryPeriod_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4810.5" x2="5549.5" y1="3063.8125" y2="3063.8125"/><ellipse cx="4820.5" cy="3074.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="4829.5" y="3078.0229">AllIFNeurons()</text><ellipse cx="4820.5" cy="3087.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="4829.5" y="3090.8276">~AllIFNeurons()</text><ellipse cx="4820.5" cy="3100.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="4829.5" y="3103.6323">toString(const int index) : string {query}</text><ellipse cx="4820.5" cy="3113.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="4829.5" y="3116.437">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="4820.5,3121.0313,4824.5,3125.0313,4820.5,3129.0313,4816.5,3125.0313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="4829.5" y="3129.2417">allocDeviceStruct(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3138.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4829.5" y="3142.0464">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3151.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4829.5" y="3154.8511">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="4820.5,3159.4453,4824.5,3163.4453,4820.5,3167.4453,4816.5,3163.4453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="4829.5" y="3167.6558">copyDeviceToHost(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="4820.5,3172.25,4824.5,3176.25,4820.5,3180.25,4816.5,3176.25" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="4829.5" y="3180.4604">copyHostToDevice(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3190.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="4829.5" y="3193.2651">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3202.8594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="4829.5" y="3206.0698">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3215.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="4829.5" y="3218.8745">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3228.4688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="4829.5" y="3231.6792">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3241.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4829.5" y="3244.4839">createAllVertices(Layout* layout) : void</text><polygon fill="#FFFF44" points="4820.5,3249.0781,4824.5,3253.0781,4820.5,3257.0781,4816.5,3253.0781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="4829.5" y="3257.2886">createNeuron(int neuronIndex, Layout* layout) : void</text><polygon fill="#FFFF44" points="4820.5,3261.8828,4824.5,3265.8828,4820.5,3269.8828,4816.5,3265.8828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="4829.5" y="3270.0933">deleteDeviceStruct(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3279.6875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="4829.5" y="3282.8979">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="4820.5" cy="3292.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="4829.5" y="3295.7026">deserialize(istream&amp; input) : void</text><polygon fill="#FFFF44" points="4820.5,3300.2969,4824.5,3304.2969,4820.5,3308.2969,4816.5,3304.2969" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="4829.5" y="3308.5073">initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void</text><ellipse cx="4820.5" cy="3318.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="4829.5" y="3321.312">loadParameters() : void</text><ellipse cx="4820.5" cy="3330.9063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="4829.5" y="3334.1167">printParameters() : void {query}</text><polygon fill="#FFFF44" points="4820.5,3338.7109,4824.5,3342.7109,4820.5,3346.7109,4816.5,3342.7109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4829.5" y="3346.9214">readNeuron(istream&amp; input, int i) : void</text><ellipse cx="4820.5" cy="3356.5156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="4829.5" y="3359.7261">serialize(ostream&amp; output) : void {query}</text><polygon fill="#FFFF44" points="4820.5,3364.3203,4824.5,3368.3203,4820.5,3372.3203,4816.5,3368.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="4829.5" y="3372.5308">setNeuronDefaults(const int index) : void</text><ellipse cx="4820.5" cy="3382.125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="4829.5" y="3385.3354">setupVertices() : void</text><polygon fill="#FFFF44" points="4820.5,3389.9297,4824.5,3393.9297,4820.5,3397.9297,4816.5,3393.9297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="4829.5" y="3398.1401">writeNeuron(ostream&amp; output, int i) : void {query}</text><!--MD5=[a4e35ff6c4fc9c7a26a0ff69acb0e23b]
class AllIZHNeurons--><rect codeLine="177" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="637.0156" id="AllIZHNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="4421.5" y="3573.5"/><ellipse cx="4748.25" cy="3589.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4748.1875,3585.3281 Q4747.4375,3585.3281 4746.875,3585.625 Q4746.3125,3585.9063 4745.9219,3586.4375 Q4745.5313,3586.9688 4745.3281,3587.75 Q4745.1406,3588.5156 4745.1406,3589.4688 Q4745.1406,3590.4375 4745.3125,3591.2031 Q4745.5,3591.9531 4745.8594,3592.4688 Q4746.2344,3592.9844 4746.8125,3593.2656 Q4747.3906,3593.5313 4748.1875,3593.5313 Q4748.9219,3593.5313 4749.6563,3593.3594 Q4750.4063,3593.1875 4751.2813,3592.8906 L4751.2813,3595.0469 Q4750.875,3595.2031 4750.4844,3595.3281 Q4750.0938,3595.4375 4749.6875,3595.5156 Q4749.2813,3595.5938 4748.8594,3595.625 Q4748.4375,3595.6719 4747.9375,3595.6719 Q4746.5313,3595.6719 4745.5,3595.2188 Q4744.4844,3594.7656 4743.8125,3593.9531 Q4743.1406,3593.1406 4742.8125,3592 Q4742.4844,3590.8438 4742.4844,3589.4531 Q4742.4844,3588.0781 4742.8594,3586.9219 Q4743.2344,3585.7656 4743.9531,3584.9375 Q4744.6719,3584.1094 4745.7344,3583.6563 Q4746.7969,3583.1875 4748.1875,3583.1875 Q4749.0938,3583.1875 4750,3583.4219 Q4750.9063,3583.6406 4751.7344,3584.0469 L4750.9063,3586.1406 Q4750.2188,3585.8125 4749.5313,3585.5781 Q4748.8438,3585.3281 4748.1875,3585.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="4768.75" y="3593.6543">AllIZHNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4422.5" x2="5161.5" y1="3605.5" y2="3605.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3613.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4441.5" y="3619.7104">excAconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3626.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4441.5" y="3632.5151">excBconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3639.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4441.5" y="3645.3198">excCconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3651.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="4441.5" y="3658.1245">excDconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3664.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="4441.5" y="3670.9292">inhAconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3677.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="4441.5" y="3683.7339">inhBconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3690.3281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="4441.5" y="3696.5386">inhCconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3703.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="4441.5" y="3709.3433">inhDconst_ : BGFLOAT</text><ellipse cx="4432.5" cy="3718.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="4441.5" y="3722.1479">Aconst_ : BGFLOAT*</text><ellipse cx="4432.5" cy="3731.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="4441.5" y="3734.9526">Bconst_ : BGFLOAT*</text><ellipse cx="4432.5" cy="3744.5469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="4441.5" y="3747.7573">C3_ : BGFLOAT*</text><ellipse cx="4432.5" cy="3757.3516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="4441.5" y="3760.562">Cconst_ : BGFLOAT*</text><ellipse cx="4432.5" cy="3770.1563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="4441.5" y="3773.3667">Dconst_ : BGFLOAT*</text><ellipse cx="4432.5" cy="3782.9609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="4441.5" y="3786.1714">u_ : BGFLOAT*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3792.7656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="4441.5" y="3798.9761">DEFAULT_a : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3805.5703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="4441.5" y="3811.7808">DEFAULT_b : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3818.375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="189" x="4441.5" y="3824.5854">DEFAULT_c : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4429.5" y="3831.1797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="4441.5" y="3837.3901">DEFAULT_d : static constexpr BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4422.5" x2="5161.5" y1="3843.9844" y2="3843.9844"/><ellipse cx="4432.5" cy="3854.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="4441.5" y="3858.1948">AllIZHNeurons()</text><ellipse cx="4432.5" cy="3867.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="4441.5" y="3870.9995">~AllIZHNeurons()</text><ellipse cx="4432.5" cy="3880.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="104" x="4441.5" y="3883.8042">Create() : AllVertices*</text><ellipse cx="4432.5" cy="3893.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="4441.5" y="3896.6089">toString(const int index) : string {query}</text><polygon fill="#FFFF44" points="4432.5,3901.2031,4436.5,3905.2031,4432.5,3909.2031,4428.5,3905.2031" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="4441.5" y="3909.4136">advanceNeuron(const int index) : void</text><ellipse cx="4432.5" cy="3919.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="4441.5" y="3922.2183">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="4432.5,3926.8125,4436.5,3930.8125,4432.5,3934.8125,4428.5,3930.8125" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="4441.5" y="3935.0229">allocDeviceStruct(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4432.5" cy="3944.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4441.5" y="3947.8276">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="4432.5" cy="3957.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4441.5" y="3960.6323">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="4432.5,3965.2266,4436.5,3969.2266,4432.5,3973.2266,4428.5,3969.2266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="4441.5" y="3973.437">copyDeviceToHost(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="4432.5,3978.0313,4436.5,3982.0313,4432.5,3986.0313,4428.5,3982.0313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="4441.5" y="3986.2417">copyHostToDevice(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4432.5" cy="3995.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="4441.5" y="3999.0464">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="4432.5" cy="4008.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="4441.5" y="4011.8511">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><ellipse cx="4432.5" cy="4021.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="4441.5" y="4024.6558">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="4432.5" cy="4034.25" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="4441.5" y="4037.4604">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="4432.5" cy="4047.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4441.5" y="4050.2651">createAllVertices(Layout* layout) : void</text><polygon fill="#FFFF44" points="4432.5,4054.8594,4436.5,4058.8594,4432.5,4062.8594,4428.5,4058.8594" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="4441.5" y="4063.0698">createNeuron(int neuronIndex, Layout* layout) : void</text><polygon fill="#FFFF44" points="4432.5,4067.6641,4436.5,4071.6641,4432.5,4075.6641,4428.5,4071.6641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="4441.5" y="4075.8745">deleteDeviceStruct(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4432.5" cy="4085.4688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="4441.5" y="4088.6792">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="4432.5" cy="4098.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="4441.5" y="4101.4839">deserialize(istream&amp; input) : void</text><polygon fill="#FFFF44" points="4432.5,4106.0781,4436.5,4110.0781,4432.5,4114.0781,4428.5,4110.0781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="4441.5" y="4114.2886">fire(const int index) : void</text><polygon fill="#FFFF44" points="4432.5,4118.8828,4436.5,4122.8828,4432.5,4126.8828,4428.5,4122.8828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="4441.5" y="4127.0933">initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void</text><ellipse cx="4432.5" cy="4136.6875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="4441.5" y="4139.8979">printParameters() : void {query}</text><polygon fill="#FFFF44" points="4432.5,4144.4922,4436.5,4148.4922,4432.5,4152.4922,4428.5,4148.4922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="4441.5" y="4152.7026">readNeuron(istream&amp; input, int index) : void</text><ellipse cx="4432.5" cy="4162.2969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="4441.5" y="4165.5073">serialize(ostream&amp; output) : void {query}</text><polygon fill="#FFFF44" points="4432.5,4170.1016,4436.5,4174.1016,4432.5,4178.1016,4428.5,4174.1016" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="4441.5" y="4178.312">setNeuronDefaults(const int index) : void</text><ellipse cx="4432.5" cy="4187.9063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="4441.5" y="4191.1167">setupVertices() : void</text><polygon fill="#FFFF44" points="4432.5,4195.7109,4436.5,4199.7109,4432.5,4203.7109,4428.5,4199.7109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="4441.5" y="4203.9214">writeNeuron(ostream&amp; output, int index) : void {query}</text><!--MD5=[17306769ffb707adf94de37859054409]
class AllLIFNeurons--><rect codeLine="227" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="137.6328" id="AllLIFNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="5197.5" y="3823"/><ellipse cx="5525.75" cy="3839" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5525.6875,3834.8281 Q5524.9375,3834.8281 5524.375,3835.125 Q5523.8125,3835.4063 5523.4219,3835.9375 Q5523.0313,3836.4688 5522.8281,3837.25 Q5522.6406,3838.0156 5522.6406,3838.9688 Q5522.6406,3839.9375 5522.8125,3840.7031 Q5523,3841.4531 5523.3594,3841.9688 Q5523.7344,3842.4844 5524.3125,3842.7656 Q5524.8906,3843.0313 5525.6875,3843.0313 Q5526.4219,3843.0313 5527.1563,3842.8594 Q5527.9063,3842.6875 5528.7813,3842.3906 L5528.7813,3844.5469 Q5528.375,3844.7031 5527.9844,3844.8281 Q5527.5938,3844.9375 5527.1875,3845.0156 Q5526.7813,3845.0938 5526.3594,3845.125 Q5525.9375,3845.1719 5525.4375,3845.1719 Q5524.0313,3845.1719 5523,3844.7188 Q5521.9844,3844.2656 5521.3125,3843.4531 Q5520.6406,3842.6406 5520.3125,3841.5 Q5519.9844,3840.3438 5519.9844,3838.9531 Q5519.9844,3837.5781 5520.3594,3836.4219 Q5520.7344,3835.2656 5521.4531,3834.4375 Q5522.1719,3833.6094 5523.2344,3833.1563 Q5524.2969,3832.6875 5525.6875,3832.6875 Q5526.5938,3832.6875 5527.5,3832.9219 Q5528.4063,3833.1406 5529.2344,3833.5469 L5528.4063,3835.6406 Q5527.7188,3835.3125 5527.0313,3835.0781 Q5526.3438,3834.8281 5525.6875,3834.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="5546.25" y="3843.1543">AllLIFNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5198.5" x2="5937.5" y1="3855" y2="3855"/><line style="stroke:#A80036;stroke-width:1.5;" x1="5198.5" x2="5937.5" y1="3863" y2="3863"/><ellipse cx="5208.5" cy="3874" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="5217.5" y="3877.2104">AllLIFNeurons()</text><ellipse cx="5208.5" cy="3886.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="5217.5" y="3890.0151">~AllLIFNeurons()</text><ellipse cx="5208.5" cy="3899.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="104" x="5217.5" y="3902.8198">Create() : AllVertices*</text><polygon fill="#FFFF44" points="5208.5,3907.4141,5212.5,3911.4141,5208.5,3915.4141,5204.5,3911.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="5217.5" y="3915.6245">advanceNeuron(const int index) : void</text><ellipse cx="5208.5" cy="3925.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="5217.5" y="3928.4292">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="5208.5,3933.0234,5212.5,3937.0234,5208.5,3941.0234,5204.5,3937.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="5217.5" y="3941.2339">fire(const int index) : void</text><ellipse cx="5208.5" cy="3950.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="5217.5" y="3954.0386">printParameters() : void {query}</text><!--MD5=[96f31d00847e9628d93d2720c47b9604]
class AllNeuroEdges--><rect codeLine="238" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="188.8516" id="AllNeuroEdges" style="stroke:#A80036;stroke-width:1.5;" width="336" x="585" y="2416.5"/><ellipse cx="709.25" cy="2432.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M709.1875,2428.3281 Q708.4375,2428.3281 707.875,2428.625 Q707.3125,2428.9063 706.9219,2429.4375 Q706.5313,2429.9688 706.3281,2430.75 Q706.1406,2431.5156 706.1406,2432.4688 Q706.1406,2433.4375 706.3125,2434.2031 Q706.5,2434.9531 706.8594,2435.4688 Q707.2344,2435.9844 707.8125,2436.2656 Q708.3906,2436.5313 709.1875,2436.5313 Q709.9219,2436.5313 710.6563,2436.3594 Q711.4063,2436.1875 712.2813,2435.8906 L712.2813,2438.0469 Q711.875,2438.2031 711.4844,2438.3281 Q711.0938,2438.4375 710.6875,2438.5156 Q710.2813,2438.5938 709.8594,2438.625 Q709.4375,2438.6719 708.9375,2438.6719 Q707.5313,2438.6719 706.5,2438.2188 Q705.4844,2437.7656 704.8125,2436.9531 Q704.1406,2436.1406 703.8125,2435 Q703.4844,2433.8438 703.4844,2432.4531 Q703.4844,2431.0781 703.8594,2429.9219 Q704.2344,2428.7656 704.9531,2427.9375 Q705.6719,2427.1094 706.7344,2426.6563 Q707.7969,2426.1875 709.1875,2426.1875 Q710.0938,2426.1875 711,2426.4219 Q711.9063,2426.6406 712.7344,2427.0469 L711.9063,2429.1406 Q711.2188,2428.8125 710.5313,2428.5781 Q709.8438,2428.3281 709.1875,2428.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="729.75" y="2436.6543">AllNeuroEdges</text><line style="stroke:#A80036;stroke-width:1.5;" x1="586" x2="920" y1="2448.5" y2="2448.5"/><ellipse cx="596" cy="2459.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="605" y="2462.7104">psr_ : BGFLOAT*</text><ellipse cx="596" cy="2472.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="310" x="605" y="2475.5151">SYNAPSE_STRENGTH_ADJUSTMENT : static constexpr BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="586" x2="920" y1="2482.1094" y2="2482.1094"/><ellipse cx="596" cy="2493.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="605" y="2496.3198">AllNeuroEdges()</text><ellipse cx="596" cy="2505.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="605" y="2509.1245">~AllNeuroEdges()</text><ellipse cx="596" cy="2518.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="605" y="2521.9292">edgSign(const edgeType type) : int</text><ellipse cx="596" cy="2531.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="605" y="2534.7339">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="596,2539.3281,600,2543.3281,596,2547.3281,592,2543.3281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="605" y="2547.5386">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="596" cy="2557.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="605" y="2560.3433">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="596" cy="2569.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="605" y="2573.1479">setupEdges() : void</text><polygon fill="#FFFF44" points="596,2577.7422,600,2581.7422,596,2585.7422,592,2581.7422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="605" y="2585.9526">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="596,2590.5469,600,2594.5469,596,2598.5469,592,2594.5469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="605" y="2598.7573">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[635988d62f36dba7a8b9baa086d12f03]
class AllSTDPSynapses--><rect codeLine="253" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="841.8906" id="AllSTDPSynapses" style="stroke:#A80036;stroke-width:1.5;" width="735" x="768.5" y="3471"/><ellipse cx="1084.75" cy="3487" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1084.6875,3482.8281 Q1083.9375,3482.8281 1083.375,3483.125 Q1082.8125,3483.4063 1082.4219,3483.9375 Q1082.0313,3484.4688 1081.8281,3485.25 Q1081.6406,3486.0156 1081.6406,3486.9688 Q1081.6406,3487.9375 1081.8125,3488.7031 Q1082,3489.4531 1082.3594,3489.9688 Q1082.7344,3490.4844 1083.3125,3490.7656 Q1083.8906,3491.0313 1084.6875,3491.0313 Q1085.4219,3491.0313 1086.1563,3490.8594 Q1086.9063,3490.6875 1087.7813,3490.3906 L1087.7813,3492.5469 Q1087.375,3492.7031 1086.9844,3492.8281 Q1086.5938,3492.9375 1086.1875,3493.0156 Q1085.7813,3493.0938 1085.3594,3493.125 Q1084.9375,3493.1719 1084.4375,3493.1719 Q1083.0313,3493.1719 1082,3492.7188 Q1080.9844,3492.2656 1080.3125,3491.4531 Q1079.6406,3490.6406 1079.3125,3489.5 Q1078.9844,3488.3438 1078.9844,3486.9531 Q1078.9844,3485.5781 1079.3594,3484.4219 Q1079.7344,3483.2656 1080.4531,3482.4375 Q1081.1719,3481.6094 1082.2344,3481.1563 Q1083.2969,3480.6875 1084.6875,3480.6875 Q1085.5938,3480.6875 1086.5,3480.9219 Q1087.4063,3481.1406 1088.2344,3481.5469 L1087.4063,3483.6406 Q1086.7188,3483.3125 1086.0313,3483.0781 Q1085.3438,3482.8281 1084.6875,3482.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="94" x="1105.25" y="3491.1543">AllSTDPSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="769.5" x2="1502.5" y1="3503" y2="3503"/><ellipse cx="779.5" cy="3514" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="788.5" y="3517.2104">Aneg_E_ : BGFLOAT</text><ellipse cx="779.5" cy="3526.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="788.5" y="3530.0151">Aneg_I_ : BGFLOAT</text><ellipse cx="779.5" cy="3539.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="788.5" y="3542.8198">Apos_E_ : BGFLOAT</text><ellipse cx="779.5" cy="3552.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="788.5" y="3555.6245">Apos_I_ : BGFLOAT</text><ellipse cx="779.5" cy="3565.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="788.5" y="3568.4292">Wex_E_ : BGFLOAT</text><ellipse cx="779.5" cy="3578.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="788.5" y="3581.2339">Wex_I_ : BGFLOAT</text><ellipse cx="779.5" cy="3590.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="788.5" y="3594.0386">defaultSTDPgap_ : BGFLOAT</text><ellipse cx="779.5" cy="3603.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="788.5" y="3606.8433">tauneg_E_ : BGFLOAT</text><ellipse cx="779.5" cy="3616.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="788.5" y="3619.6479">tauneg_I_ : BGFLOAT</text><ellipse cx="779.5" cy="3629.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="788.5" y="3632.4526">taupos_E_ : BGFLOAT</text><ellipse cx="779.5" cy="3642.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="788.5" y="3645.2573">taupos_I_ : BGFLOAT</text><ellipse cx="779.5" cy="3654.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="788.5" y="3658.062">tauspost_E_ : BGFLOAT</text><ellipse cx="779.5" cy="3667.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="788.5" y="3670.8667">tauspost_I_ : BGFLOAT</text><ellipse cx="779.5" cy="3680.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="788.5" y="3683.6714">tauspre_E_ : BGFLOAT</text><ellipse cx="779.5" cy="3693.2656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="788.5" y="3696.4761">tauspre_I_ : BGFLOAT</text><ellipse cx="779.5" cy="3706.0703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="788.5" y="3709.2808">Aneg_ : BGFLOAT*</text><ellipse cx="779.5" cy="3718.875" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="788.5" y="3722.0854">Apos_ : BGFLOAT*</text><ellipse cx="779.5" cy="3731.6797" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="788.5" y="3734.8901">STDPgap_ : BGFLOAT*</text><ellipse cx="779.5" cy="3744.4844" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="788.5" y="3747.6948">Wex_ : BGFLOAT*</text><ellipse cx="779.5" cy="3757.2891" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="788.5" y="3760.4995">muneg_ : BGFLOAT*</text><ellipse cx="779.5" cy="3770.0938" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="788.5" y="3773.3042">mupos_ : BGFLOAT*</text><ellipse cx="779.5" cy="3782.8984" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="788.5" y="3786.1089">tauneg_ : BGFLOAT*</text><ellipse cx="779.5" cy="3795.7031" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="788.5" y="3798.9136">taupos_ : BGFLOAT*</text><ellipse cx="779.5" cy="3808.5078" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="788.5" y="3811.7183">tauspost_ : BGFLOAT*</text><ellipse cx="779.5" cy="3821.3125" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="788.5" y="3824.5229">tauspre_ : BGFLOAT*</text><ellipse cx="779.5" cy="3834.1172" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="788.5" y="3837.3276">delayIndexPost_ : int*</text><ellipse cx="779.5" cy="3846.9219" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="788.5" y="3850.1323">delayQueuePostLength_ : int*</text><ellipse cx="779.5" cy="3859.7266" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="788.5" y="3862.937">totalDelayPost_ : int*</text><ellipse cx="779.5" cy="3872.5313" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="788.5" y="3875.7417">delayQueuePost_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="769.5" x2="1502.5" y1="3882.3359" y2="3882.3359"/><ellipse cx="779.5" cy="3893.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="788.5" y="3896.5464">AllSTDPSynapses()</text><ellipse cx="779.5" cy="3906.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="788.5" y="3909.3511">AllSTDPSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="779.5" cy="3918.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="788.5" y="3922.1558">~AllSTDPSynapses()</text><ellipse cx="779.5" cy="3931.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="788.5" y="3934.9604">Create() : AllEdges*</text><polygon fill="#FFFF44" points="779.5,3939.5547,783.5,3943.5547,779.5,3947.5547,775.5,3943.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="459" x="788.5" y="3947.7651">synapticWeightModification(const BGSIZE iEdg, BGFLOAT edgeWeight, double delta) : BGFLOAT</text><ellipse cx="779.5" cy="3957.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="788.5" y="3960.5698">allowBackPropagation() : bool</text><polygon fill="#FFFF44" points="779.5,3965.1641,783.5,3969.1641,779.5,3973.1641,775.5,3969.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="788.5" y="3973.3745">isSpikeQueuePost(const BGSIZE iEdg) : bool</text><ellipse cx="779.5" cy="3982.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="788.5" y="3986.1792">advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void</text><ellipse cx="779.5" cy="3995.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="464" x="788.5" y="3998.9839">advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="779.5,4003.5781,783.5,4007.5781,779.5,4011.5781,775.5,4007.5781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="568" x="788.5" y="4011.7886">allocDeviceStruct(AllSTDPSynapsesDeviceProperties&amp; allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="779.5" cy="4021.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="788.5" y="4024.5933">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="779.5" cy="4034.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="788.5" y="4037.3979">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="779.5,4041.9922,783.5,4045.9922,779.5,4049.9922,775.5,4045.9922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="788.5" y="4050.2026">copyDeviceToHost(AllSTDPSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="779.5" cy="4059.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="788.5" y="4063.0073">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="779.5" cy="4072.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="788.5" y="4075.812">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="779.5" cy="4085.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="788.5" y="4088.6167">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="779.5,4093.2109,783.5,4097.2109,779.5,4101.2109,775.5,4097.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="709" x="788.5" y="4101.4214">copyHostToDevice(void* allEdgesDevice, AllSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="779.5" cy="4111.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="788.5" y="4114.2261">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="779.5,4118.8203,783.5,4122.8203,779.5,4126.8203,775.5,4122.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="788.5" y="4127.0308">deleteDeviceStruct(AllSTDPSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="779.5" cy="4136.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="788.5" y="4139.8354">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><polygon fill="#FFFF44" points="779.5,4144.4297,783.5,4148.4297,779.5,4152.4297,775.5,4148.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="788.5" y="4152.6401">initSpikeQueue(const BGSIZE iEdg) : void</text><ellipse cx="779.5" cy="4162.2344" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="788.5" y="4165.4448">loadParameters() : void</text><ellipse cx="779.5" cy="4175.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="788.5" y="4178.2495">postSpikeHit(const BGSIZE iEdg) : void</text><ellipse cx="779.5" cy="4187.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="788.5" y="4191.0542">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="779.5" cy="4200.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="788.5" y="4203.8589">printParameters() : void {query}</text><ellipse cx="779.5" cy="4213.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="788.5" y="4216.6636">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="779.5,4221.2578,783.5,4225.2578,779.5,4229.2578,775.5,4225.2578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="788.5" y="4229.4683">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="779.5" cy="4239.0625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="788.5" y="4242.2729">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="779.5" cy="4251.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="788.5" y="4255.0776">setEdgeClassID() : void</text><ellipse cx="779.5" cy="4264.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="788.5" y="4267.8823">setupEdges() : void</text><polygon fill="#FFFF44" points="779.5,4272.4766,783.5,4276.4766,779.5,4280.4766,775.5,4276.4766" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="788.5" y="4280.687">setupEdges(const int numVertices, const int maxEdges) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="776.5" y="4287.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="788.5" y="4293.4917">stdpLearning(const BGSIZE iEdg, double delta, double epost, double epre, int srcVertex, int destVertex) : void</text><polygon fill="#FFFF44" points="779.5,4298.0859,783.5,4302.0859,779.5,4306.0859,775.5,4302.0859" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="788.5" y="4306.2964">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[00675e18512933602d55f5e0e2b1ab32]
class AllSpikingNeurons--><rect codeLine="319" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="278.4844" id="AllSpikingNeurons" style="stroke:#A80036;stroke-width:1.5;" width="471" x="4684.5" y="2372"/><ellipse cx="4866.25" cy="2388" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4869.2031,2393 L4868.375,2390.1094 L4864.1875,2390.1094 L4863.3438,2393 L4860.75,2393 L4864.6875,2380.8125 L4867.8438,2380.8125 L4871.7969,2393 L4869.2031,2393 Z M4867.7656,2387.9531 L4867,2385.2969 Q4866.9375,2385.1406 4866.8438,2384.8125 Q4866.75,2384.4688 4866.625,2384.0625 Q4866.5156,2383.6406 4866.4063,2383.2344 Q4866.3125,2382.8125 4866.2813,2382.5313 Q4866.25,2382.7031 4866.1875,2382.9531 Q4866.1406,2383.2031 4866.0625,2383.4844 Q4866,2383.7656 4865.9219,2384.0469 Q4865.8438,2384.3281 4865.7813,2384.5781 Q4865.7188,2384.8281 4865.6563,2385.0156 Q4865.6094,2385.2031 4865.5781,2385.2969 L4864.8125,2387.9531 L4867.7656,2387.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="99" x="4886.75" y="2392.1543">AllSpikingNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4685.5" x2="5154.5" y1="2404" y2="2404"/><polygon fill="none" points="4695.5,2410,4699.5,2414,4695.5,2418,4691.5,2414" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="4704.5" y="2418.2104">fAllowBackPropagation_ : bool</text><ellipse cx="4695.5" cy="2427.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="4704.5" y="2431.0151">vertexEvents_ : vector&lt;EventBuffer&gt;</text><ellipse cx="4695.5" cy="2440.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4704.5" y="2443.8198">hasFired_ : vector&lt;bool&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4685.5" x2="5154.5" y1="2450.4141" y2="2450.4141"/><ellipse cx="4695.5" cy="2461.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="4704.5" y="2464.6245">AllSpikingNeurons()</text><ellipse cx="4695.5" cy="2474.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="4704.5" y="2477.4292">~AllSpikingNeurons()</text><ellipse cx="4695.5" cy="2487.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="4704.5" y="2490.2339">getSpikeHistory(int index, int offIndex) : uint64_t</text><polygon fill="#FFFF44" points="4695.5,2494.8281,4699.5,2498.8281,4695.5,2502.8281,4691.5,2498.8281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="182" x="4704.5" y="2503.0386">advanceNeuron(const int index) : void</text><ellipse cx="4695.5" cy="2512.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="4704.5" y="2515.8433">advanceVertices(AllEdges&amp; synapses, const EdgeIndexMap* edgeIndexMap) : void</text><polygon fill="#FFFF44" points="4695.5,2520.4375,4699.5,2524.4375,4695.5,2528.4375,4691.5,2524.4375" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="4704.5" y="2528.6479">clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4695.5" cy="2538.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="264" x="4704.5" y="2541.4526">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><ellipse cx="4695.5" cy="2551.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4704.5" y="2554.2573">clearSpikeCounts() : void</text><polygon fill="#FFFF44" points="4695.5,2558.8516,4699.5,2562.8516,4695.5,2566.8516,4691.5,2562.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="4704.5" y="2567.062">copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="4695.5,2571.6563,4699.5,2575.6563,4695.5,2579.6563,4691.5,2575.6563" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="445" x="4704.5" y="2579.8667">copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="4695.5" cy="2589.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="331" x="4704.5" y="2592.6714">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="4695.5" cy="2602.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="332" x="4704.5" y="2605.4761">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="4695.5,2610.0703,4699.5,2614.0703,4695.5,2618.0703,4691.5,2614.0703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="4704.5" y="2618.2808">fire(const int index) : void</text><ellipse cx="4695.5" cy="2627.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="4704.5" y="2631.0854">setAdvanceVerticesDeviceParams(AllEdges&amp; synapses) : void</text><ellipse cx="4695.5" cy="2640.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="4704.5" y="2643.8901">setupVertices() : void</text><!--MD5=[cfe37ad1a50a7dcaaf80645f5fb9fa69]
class AllSpikingSynapses--><rect codeLine="341" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="701.0391" id="AllSpikingSynapses" style="stroke:#A80036;stroke-width:1.5;" width="743" x="381.5" y="2710"/><ellipse cx="696.75" cy="2726" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M696.6875,2721.8281 Q695.9375,2721.8281 695.375,2722.125 Q694.8125,2722.4063 694.4219,2722.9375 Q694.0313,2723.4688 693.8281,2724.25 Q693.6406,2725.0156 693.6406,2725.9688 Q693.6406,2726.9375 693.8125,2727.7031 Q694,2728.4531 694.3594,2728.9688 Q694.7344,2729.4844 695.3125,2729.7656 Q695.8906,2730.0313 696.6875,2730.0313 Q697.4219,2730.0313 698.1563,2729.8594 Q698.9063,2729.6875 699.7813,2729.3906 L699.7813,2731.5469 Q699.375,2731.7031 698.9844,2731.8281 Q698.5938,2731.9375 698.1875,2732.0156 Q697.7813,2732.0938 697.3594,2732.125 Q696.9375,2732.1719 696.4375,2732.1719 Q695.0313,2732.1719 694,2731.7188 Q692.9844,2731.2656 692.3125,2730.4531 Q691.6406,2729.6406 691.3125,2728.5 Q690.9844,2727.3438 690.9844,2725.9531 Q690.9844,2724.5781 691.3594,2723.4219 Q691.7344,2722.2656 692.4531,2721.4375 Q693.1719,2720.6094 694.2344,2720.1563 Q695.2969,2719.6875 696.6875,2719.6875 Q697.5938,2719.6875 698.5,2719.9219 Q699.4063,2720.1406 700.2344,2720.5469 L699.4063,2722.6406 Q698.7188,2722.3125 698.0313,2722.0781 Q697.3438,2721.8281 696.6875,2721.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="717.25" y="2730.1543">AllSpikingSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="382.5" x2="1123.5" y1="2742" y2="2742"/><ellipse cx="392.5" cy="2753" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="401.5" y="2756.2104">delay_EE_ : BGFLOAT</text><ellipse cx="392.5" cy="2765.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="401.5" y="2769.0151">delay_EI_ : BGFLOAT</text><ellipse cx="392.5" cy="2778.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="401.5" y="2781.8198">delay_IE_ : BGFLOAT</text><ellipse cx="392.5" cy="2791.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="401.5" y="2794.6245">delay_II_ : BGFLOAT</text><ellipse cx="392.5" cy="2804.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="401.5" y="2807.4292">tau_EE_ : BGFLOAT</text><ellipse cx="392.5" cy="2817.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="401.5" y="2820.2339">tau_EI_ : BGFLOAT</text><ellipse cx="392.5" cy="2829.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="401.5" y="2833.0386">tau_IE_ : BGFLOAT</text><ellipse cx="392.5" cy="2842.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="401.5" y="2845.8433">tau_II_ : BGFLOAT</text><ellipse cx="392.5" cy="2855.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="401.5" y="2858.6479">decay_ : BGFLOAT*</text><ellipse cx="392.5" cy="2868.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="401.5" y="2871.4526">tau_ : BGFLOAT*</text><ellipse cx="392.5" cy="2881.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="401.5" y="2884.2573">delayIndex_ : int*</text><ellipse cx="392.5" cy="2893.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="401.5" y="2897.062">delayQueueLength_ : int*</text><ellipse cx="392.5" cy="2906.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="401.5" y="2909.8667">totalDelay_ : int*</text><ellipse cx="392.5" cy="2919.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="401.5" y="2922.6714">delayQueue_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="382.5" x2="1123.5" y1="2929.2656" y2="2929.2656"/><ellipse cx="392.5" cy="2940.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="401.5" y="2943.4761">AllSpikingSynapses()</text><ellipse cx="392.5" cy="2953.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="401.5" y="2956.2808">AllSpikingSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="392.5" cy="2965.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="401.5" y="2969.0854">~AllSpikingSynapses()</text><ellipse cx="392.5" cy="2978.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="401.5" y="2981.8901">Create() : AllEdges*</text><ellipse cx="392.5" cy="2991.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="401.5" y="2994.6948">allowBackPropagation() : bool</text><polygon fill="#FFFF44" points="392.5,2999.2891,396.5,3003.2891,392.5,3007.2891,388.5,3003.2891" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="401.5" y="3007.4995">isSpikeQueue(const BGSIZE iEdg) : bool</text><polygon fill="#FFFF44" points="392.5,3012.0938,396.5,3016.0938,392.5,3020.0938,388.5,3016.0938" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="401.5" y="3020.3042">updateDecay(const BGSIZE iEdg, const BGFLOAT deltaT) : bool</text><ellipse cx="392.5" cy="3029.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="401.5" y="3033.1089">advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void</text><ellipse cx="392.5" cy="3042.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="464" x="401.5" y="3045.9136">advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="392.5,3050.5078,396.5,3054.5078,392.5,3058.5078,388.5,3054.5078" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="576" x="401.5" y="3058.7183">allocDeviceStruct(AllSpikingSynapsesDeviceProperties&amp; allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="392.5" cy="3068.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="401.5" y="3071.5229">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="392.5" cy="3081.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="401.5" y="3084.3276">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="392.5,3088.9219,396.5,3092.9219,392.5,3096.9219,388.5,3092.9219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="401.5" y="3097.1323">changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="392.5" cy="3106.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="401.5" y="3109.937">copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void</text><ellipse cx="392.5" cy="3119.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="401.5" y="3122.7417">copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void</text><polygon fill="#FFFF44" points="392.5,3127.3359,396.5,3131.3359,392.5,3135.3359,388.5,3131.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="401.5" y="3135.5464">copyDeviceToHost(AllSpikingSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="392.5" cy="3145.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="401.5" y="3148.3511">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="392.5" cy="3157.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="401.5" y="3161.1558">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="392.5" cy="3170.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="401.5" y="3173.9604">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="392.5,3178.5547,396.5,3182.5547,392.5,3186.5547,388.5,3182.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="717" x="401.5" y="3186.7651">copyHostToDevice(void* allEdgesDevice, AllSpikingSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="392.5" cy="3196.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="401.5" y="3199.5698">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="392.5,3204.1641,396.5,3208.1641,392.5,3212.1641,388.5,3208.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="401.5" y="3212.3745">deleteDeviceStruct(AllSpikingSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="392.5" cy="3221.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="401.5" y="3225.1792">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><polygon fill="#FFFF44" points="392.5,3229.7734,396.5,3233.7734,392.5,3237.7734,388.5,3233.7734" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="401.5" y="3237.9839">initSpikeQueue(const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="3247.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="401.5" y="3250.7886">loadParameters() : void</text><ellipse cx="392.5" cy="3260.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="401.5" y="3263.5933">postSpikeHit(const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="3273.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="401.5" y="3276.3979">preSpikeHit(const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="3285.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="401.5" y="3289.2026">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="392.5" cy="3298.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="401.5" y="3302.0073">printParameters() : void {query}</text><ellipse cx="392.5" cy="3311.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="401.5" y="3314.812">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="392.5,3319.4063,396.5,3323.4063,392.5,3327.4063,388.5,3323.4063" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="401.5" y="3327.6167">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="3337.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="401.5" y="3340.4214">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="392.5" cy="3350.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="401.5" y="3353.2261">setAdvanceEdgesDeviceParams() : void</text><ellipse cx="392.5" cy="3362.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="401.5" y="3366.0308">setEdgeClassID() : void</text><ellipse cx="392.5" cy="3375.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="401.5" y="3378.8354">setupEdges() : void</text><polygon fill="#FFFF44" points="392.5,3383.4297,396.5,3387.4297,392.5,3391.4297,388.5,3387.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="401.5" y="3391.6401">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="392.5,3396.2344,396.5,3400.2344,392.5,3404.2344,388.5,3400.2344" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="401.5" y="3404.4448">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[34dee175ca2f1207a5c8be9520f72c2f]
class AllVertices--><rect codeLine="396" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="278.4844" id="AllVertices" style="stroke:#A80036;stroke-width:1.5;" width="725" x="4557.5" y="1886.5"/><ellipse cx="4887.25" cy="1902.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4890.2031,1907.5 L4889.375,1904.6094 L4885.1875,1904.6094 L4884.3438,1907.5 L4881.75,1907.5 L4885.6875,1895.3125 L4888.8438,1895.3125 L4892.7969,1907.5 L4890.2031,1907.5 Z M4888.7656,1902.4531 L4888,1899.7969 Q4887.9375,1899.6406 4887.8438,1899.3125 Q4887.75,1898.9688 4887.625,1898.5625 Q4887.5156,1898.1406 4887.4063,1897.7344 Q4887.3125,1897.3125 4887.2813,1897.0313 Q4887.25,1897.2031 4887.1875,1897.4531 Q4887.1406,1897.7031 4887.0625,1897.9844 Q4887,1898.2656 4886.9219,1898.5469 Q4886.8438,1898.8281 4886.7813,1899.0781 Q4886.7188,1899.3281 4886.6563,1899.5156 Q4886.6094,1899.7031 4886.5781,1899.7969 L4885.8125,1902.4531 L4888.7656,1902.4531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="4907.75" y="1906.6543">AllVertices</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4558.5" x2="5281.5" y1="1918.5" y2="1918.5"/><ellipse cx="4568.5" cy="1929.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="4577.5" y="1932.7104">summationPoints_ : BGFLOAT*</text><polygon fill="none" points="4568.5,1937.3047,4572.5,1941.3047,4568.5,1945.3047,4564.5,1941.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="4577.5" y="1945.5151">size_ : int</text><polygon fill="none" points="4568.5,1950.1094,4572.5,1954.1094,4568.5,1958.1094,4564.5,1954.1094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="4577.5" y="1958.3198">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="4568.5,1962.9141,4572.5,1966.9141,4568.5,1970.9141,4564.5,1966.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="4577.5" y="1971.1245">vertexLogger_ : log4cplus::Logger</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4558.5" x2="5281.5" y1="1977.7188" y2="1977.7188"/><ellipse cx="4568.5" cy="1988.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="4577.5" y="1991.9292">AllVertices()</text><ellipse cx="4568.5" cy="2001.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="4577.5" y="2004.7339">~AllVertices()</text><ellipse cx="4568.5" cy="2014.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="4577.5" y="2017.5386">toString(const int i) : string {query}</text><ellipse cx="4568.5" cy="2027.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="699" x="4577.5" y="2030.3433">advanceVertices(AllEdges&amp; edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><ellipse cx="4568.5" cy="2039.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="4577.5" y="2043.1479">advanceVertices(AllEdges&amp; edges, const EdgeIndexMap* edgeIndexMap) : void</text><ellipse cx="4568.5" cy="2052.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="271" x="4577.5" y="2055.9526">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="4568.5" cy="2065.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="4577.5" y="2068.7573">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="4568.5" cy="2078.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="4577.5" y="2081.562">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="4568.5" cy="2091.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="4577.5" y="2094.3667">createAllVertices(Layout* layout) : void</text><ellipse cx="4568.5" cy="2103.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="274" x="4577.5" y="2107.1714">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="4568.5" cy="2116.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112" x="4577.5" y="2119.9761">loadParameters() : void</text><ellipse cx="4568.5" cy="2129.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="4577.5" y="2132.7808">printParameters() : void {query}</text><ellipse cx="4568.5" cy="2142.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="4577.5" y="2145.5854">setAdvanceVerticesDeviceParams(AllEdges&amp; edges) : void</text><ellipse cx="4568.5" cy="2155.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="4577.5" y="2158.3901">setupVertices() : void</text><!--MD5=[d85fbbe7efff0e713ca3ebcdefdae521]
class CPUModel--><rect codeLine="418" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="137.6328" id="CPUModel" style="stroke:#A80036;stroke-width:1.5;" width="154" x="3590" y="1413"/><ellipse cx="3634.25" cy="1429" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3634.1875,1424.8281 Q3633.4375,1424.8281 3632.875,1425.125 Q3632.3125,1425.4063 3631.9219,1425.9375 Q3631.5313,1426.4688 3631.3281,1427.25 Q3631.1406,1428.0156 3631.1406,1428.9688 Q3631.1406,1429.9375 3631.3125,1430.7031 Q3631.5,1431.4531 3631.8594,1431.9688 Q3632.2344,1432.4844 3632.8125,1432.7656 Q3633.3906,1433.0313 3634.1875,1433.0313 Q3634.9219,1433.0313 3635.6563,1432.8594 Q3636.4063,1432.6875 3637.2813,1432.3906 L3637.2813,1434.5469 Q3636.875,1434.7031 3636.4844,1434.8281 Q3636.0938,1434.9375 3635.6875,1435.0156 Q3635.2813,1435.0938 3634.8594,1435.125 Q3634.4375,1435.1719 3633.9375,1435.1719 Q3632.5313,1435.1719 3631.5,1434.7188 Q3630.4844,1434.2656 3629.8125,1433.4531 Q3629.1406,1432.6406 3628.8125,1431.5 Q3628.4844,1430.3438 3628.4844,1428.9531 Q3628.4844,1427.5781 3628.8594,1426.4219 Q3629.2344,1425.2656 3629.9531,1424.4375 Q3630.6719,1423.6094 3631.7344,1423.1563 Q3632.7969,1422.6875 3634.1875,1422.6875 Q3635.0938,1422.6875 3636,1422.9219 Q3636.9063,1423.1406 3637.7344,1423.5469 L3636.9063,1425.6406 Q3636.2188,1425.3125 3635.5313,1425.0781 Q3634.8438,1424.8281 3634.1875,1424.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="3654.75" y="1433.1543">CPUModel</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3591" x2="3743" y1="1445" y2="1445"/><line style="stroke:#A80036;stroke-width:1.5;" x1="3591" x2="3743" y1="1453" y2="1453"/><ellipse cx="3601" cy="1464" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="3610" y="1467.2104">CPUModel()</text><ellipse cx="3601" cy="1476.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3610" y="1480.0151">~CPUModel()</text><ellipse cx="3601" cy="1489.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3610" y="1492.8198">advance() : void</text><ellipse cx="3601" cy="1502.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3610" y="1505.6245">copyCPUtoGPU() : void</text><ellipse cx="3601" cy="1515.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3610" y="1518.4292">copyGPUtoCPU() : void</text><ellipse cx="3601" cy="1528.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="3610" y="1531.2339">finish() : void</text><ellipse cx="3601" cy="1540.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3610" y="1544.0386">updateConnections() : void</text><!--MD5=[540eab1ed52846d003b47757435df453]
class ConnGrowth--><rect codeLine="429" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="368.1172" id="ConnGrowth" style="stroke:#A80036;stroke-width:1.5;" width="1093" x="1499.5" y="1841.5"/><ellipse cx="2008.25" cy="1857.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2008.1875,1853.3281 Q2007.4375,1853.3281 2006.875,1853.625 Q2006.3125,1853.9063 2005.9219,1854.4375 Q2005.5313,1854.9688 2005.3281,1855.75 Q2005.1406,1856.5156 2005.1406,1857.4688 Q2005.1406,1858.4375 2005.3125,1859.2031 Q2005.5,1859.9531 2005.8594,1860.4688 Q2006.2344,1860.9844 2006.8125,1861.2656 Q2007.3906,1861.5313 2008.1875,1861.5313 Q2008.9219,1861.5313 2009.6563,1861.3594 Q2010.4063,1861.1875 2011.2813,1860.8906 L2011.2813,1863.0469 Q2010.875,1863.2031 2010.4844,1863.3281 Q2010.0938,1863.4375 2009.6875,1863.5156 Q2009.2813,1863.5938 2008.8594,1863.625 Q2008.4375,1863.6719 2007.9375,1863.6719 Q2006.5313,1863.6719 2005.5,1863.2188 Q2004.4844,1862.7656 2003.8125,1861.9531 Q2003.1406,1861.1406 2002.8125,1860 Q2002.4844,1858.8438 2002.4844,1857.4531 Q2002.4844,1856.0781 2002.8594,1854.9219 Q2003.2344,1853.7656 2003.9531,1852.9375 Q2004.6719,1852.1094 2005.7344,1851.6563 Q2006.7969,1851.1875 2008.1875,1851.1875 Q2009.0938,1851.1875 2010,1851.4219 Q2010.9063,1851.6406 2011.7344,1852.0469 L2010.9063,1854.1406 Q2010.2188,1853.8125 2009.5313,1853.5781 Q2008.8438,1853.3281 2008.1875,1853.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="2028.75" y="1861.6543">ConnGrowth</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1500.5" x2="2591.5" y1="1873.5" y2="1873.5"/><ellipse cx="1510.5" cy="1884.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="1519.5" y="1887.7104">W_ : CompleteMatrix*</text><ellipse cx="1510.5" cy="1897.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="1519.5" y="1900.5151">area_ : CompleteMatrix*</text><ellipse cx="1510.5" cy="1910.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="1519.5" y="1913.3198">delta_ : CompleteMatrix*</text><ellipse cx="1510.5" cy="1922.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1519.5" y="1926.1245">growthParams_ : GrowthParams</text><ellipse cx="1510.5" cy="1935.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1519.5" y="1938.9292">deltaR_ : VectorMatrix*</text><ellipse cx="1510.5" cy="1948.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1519.5" y="1951.7339">outgrowth_ : VectorMatrix*</text><ellipse cx="1510.5" cy="1961.3281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1519.5" y="1964.5386">radii_ : VectorMatrix*</text><ellipse cx="1510.5" cy="1974.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1519.5" y="1977.3433">rates_ : VectorMatrix*</text><ellipse cx="1510.5" cy="1986.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="1519.5" y="1990.1479">radiiSize_ : int</text><ellipse cx="1510.5" cy="1999.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="1519.5" y="2002.9526">spikeCounts_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1500.5" x2="2591.5" y1="2009.5469" y2="2009.5469"/><ellipse cx="1510.5" cy="2020.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1519.5" y="2023.7573">ConnGrowth()</text><ellipse cx="1510.5" cy="2033.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1519.5" y="2036.562">~ConnGrowth()</text><ellipse cx="1510.5" cy="2046.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="113" x="1519.5" y="2049.3667">Create() : Connections*</text><ellipse cx="1510.5" cy="2058.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="1519.5" y="2062.1714">updateConnections(AllVertices&amp; neurons, Layout* layout) : bool</text><ellipse cx="1510.5" cy="2071.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="1519.5" y="2074.9761">load(Archive&amp; archive) : void</text><ellipse cx="1510.5" cy="2084.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1519.5" y="2087.7808">loadParameters() : void</text><ellipse cx="1510.5" cy="2097.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1519.5" y="2100.5854">printParameters() : void {query}</text><ellipse cx="1510.5" cy="2110.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1519.5" y="2113.3901">printRadii() : void {query}</text><ellipse cx="1510.5" cy="2122.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1519.5" y="2126.1948">save(Archive&amp; archive) : void {query}</text><ellipse cx="1510.5" cy="2135.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="397" x="1519.5" y="2138.9995">setupConnections(Layout* layout, AllVertices* neurons, AllEdges* synapses) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1507.5" y="2145.5938"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1519.5" y="2151.8042">updateConns(AllVertices&amp; neurons) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1507.5" y="2158.3984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="1519.5" y="2164.6089">updateFrontiers(const int numVertices, Layout* layout) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1507.5" y="2171.2031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="1519.5" y="2177.4136">updateOverlap(BGFLOAT numVertices, Layout* layout) : void</text><ellipse cx="1510.5" cy="2187.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1067" x="1519.5" y="2190.2183">updateSynapsesWeights(const int numVertices, AllVertices&amp; neurons, AllEdges&amp; synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void</text><ellipse cx="1510.5" cy="2199.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="1519.5" y="2203.0229">updateSynapsesWeights(const int numVertices, AllVertices&amp; vertices, AllEdges&amp; synapses, Layout* layout) : void</text><!--MD5=[b671e9144a70d5380b4364952f259167]
class ConnStatic--><rect codeLine="458" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="316.8984" id="ConnStatic" style="stroke:#A80036;stroke-width:1.5;" width="406" x="1058" y="1867"/><ellipse cx="1227.25" cy="1883" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1227.1875,1878.8281 Q1226.4375,1878.8281 1225.875,1879.125 Q1225.3125,1879.4063 1224.9219,1879.9375 Q1224.5313,1880.4688 1224.3281,1881.25 Q1224.1406,1882.0156 1224.1406,1882.9688 Q1224.1406,1883.9375 1224.3125,1884.7031 Q1224.5,1885.4531 1224.8594,1885.9688 Q1225.2344,1886.4844 1225.8125,1886.7656 Q1226.3906,1887.0313 1227.1875,1887.0313 Q1227.9219,1887.0313 1228.6563,1886.8594 Q1229.4063,1886.6875 1230.2813,1886.3906 L1230.2813,1888.5469 Q1229.875,1888.7031 1229.4844,1888.8281 Q1229.0938,1888.9375 1228.6875,1889.0156 Q1228.2813,1889.0938 1227.8594,1889.125 Q1227.4375,1889.1719 1226.9375,1889.1719 Q1225.5313,1889.1719 1224.5,1888.7188 Q1223.4844,1888.2656 1222.8125,1887.4531 Q1222.1406,1886.6406 1221.8125,1885.5 Q1221.4844,1884.3438 1221.4844,1882.9531 Q1221.4844,1881.5781 1221.8594,1880.4219 Q1222.2344,1879.2656 1222.9531,1878.4375 Q1223.6719,1877.6094 1224.7344,1877.1563 Q1225.7969,1876.6875 1227.1875,1876.6875 Q1228.0938,1876.6875 1229,1876.9219 Q1229.9063,1877.1406 1230.7344,1877.5469 L1229.9063,1879.6406 Q1229.2188,1879.3125 1228.5313,1879.0781 Q1227.8438,1878.8281 1227.1875,1878.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="1247.75" y="1887.1543">ConnStatic</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1059" x2="1463" y1="1899" y2="1899"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1907"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="1078" y="1913.2104">excWeight_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1919.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="1078" y="1926.0151">inhWeight_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1932.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="1078" y="1938.8198">rewiringProbability_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1945.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1078" y="1951.6245">threshConnsRadius_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1958.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1078" y="1964.4292">WCurrentEpoch_ : BGFLOAT*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1971.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1078" y="1977.2339">connsPerVertex_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1983.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="1078" y="1990.0386">radiiSize_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="1996.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1078" y="2002.8433">destVertexIndexCurrentEpoch_ : int*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1066" y="2009.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1078" y="2015.6479">sourceVertexIndexCurrentEpoch_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1059" x2="1463" y1="2022.2422" y2="2022.2422"/><ellipse cx="1069" cy="2033.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="1078" y="2036.4526">ConnStatic()</text><ellipse cx="1069" cy="2046.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="1078" y="2049.2573">~ConnStatic()</text><ellipse cx="1069" cy="2058.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="1078" y="2062.062">getConnsRadiusThresh() : BGFLOAT {query}</text><ellipse cx="1069" cy="2071.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="1078" y="2074.8667">getWCurrentEpoch() : BGFLOAT* {query}</text><ellipse cx="1069" cy="2084.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="113" x="1078" y="2087.6714">Create() : Connections*</text><ellipse cx="1069" cy="2097.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="1078" y="2100.4761">getDestVertexIndexCurrentEpoch() : int* {query}</text><ellipse cx="1069" cy="2110.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="1078" y="2113.2808">getSourceVertexIndexCurrentEpoch() : int* {query}</text><ellipse cx="1069" cy="2122.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="1078" y="2126.0854">load(Archive&amp; archive) : void</text><ellipse cx="1069" cy="2135.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1078" y="2138.8901">loadParameters() : void</text><ellipse cx="1069" cy="2148.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1078" y="2151.6948">printParameters() : void {query}</text><ellipse cx="1069" cy="2161.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1078" y="2164.4995">save(Archive&amp; archive) : void {query}</text><ellipse cx="1069" cy="2174.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="1078" y="2177.3042">setupConnections(Layout* layout, AllVertices* vertices, AllEdges* edges) : void</text><!--MD5=[24bb951fb6b9ac52df1580923e830244]
class Connections--><rect codeLine="483" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="252.875" id="Connections" style="stroke:#A80036;stroke-width:1.5;" width="1092" x="1432" y="1355.5"/><ellipse cx="1939.75" cy="1371.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1942.7031,1376.5 L1941.875,1373.6094 L1937.6875,1373.6094 L1936.8438,1376.5 L1934.25,1376.5 L1938.1875,1364.3125 L1941.3438,1364.3125 L1945.2969,1376.5 L1942.7031,1376.5 Z M1941.2656,1371.4531 L1940.5,1368.7969 Q1940.4375,1368.6406 1940.3438,1368.3125 Q1940.25,1367.9688 1940.125,1367.5625 Q1940.0156,1367.1406 1939.9063,1366.7344 Q1939.8125,1366.3125 1939.7813,1366.0313 Q1939.75,1366.2031 1939.6875,1366.4531 Q1939.6406,1366.7031 1939.5625,1366.9844 Q1939.5,1367.2656 1939.4219,1367.5469 Q1939.3438,1367.8281 1939.2813,1368.0781 Q1939.2188,1368.3281 1939.1563,1368.5156 Q1939.1094,1368.7031 1939.0781,1368.7969 L1938.3125,1371.4531 L1941.2656,1371.4531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="1960.25" y="1375.6543">Connections</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1433" x2="2523" y1="1387.5" y2="1387.5"/><polygon fill="none" points="1443,1393.5,1447,1397.5,1443,1401.5,1439,1397.5" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1452" y="1401.7104">edgeLogger_ : log4cplus::Logger</text><polygon fill="none" points="1443,1406.3047,1447,1410.3047,1443,1414.3047,1439,1410.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1452" y="1414.5151">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="1443,1419.1094,1447,1423.1094,1443,1427.1094,1439,1423.1094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1452" y="1427.3198">edges_ : shared_ptr&lt;AllEdges&gt;</text><polygon fill="none" points="1443,1431.9141,1447,1435.9141,1443,1439.9141,1439,1435.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1452" y="1440.1245">synapseIndexMap_ : shared_ptr&lt;EdgeIndexMap&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1433" x2="2523" y1="1446.7188" y2="1446.7188"/><ellipse cx="1443" cy="1457.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="1452" y="1460.9292">Connections()</text><ellipse cx="1443" cy="1470.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1452" y="1473.7339">~Connections()</text><ellipse cx="1443" cy="1483.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="1452" y="1486.5386">updateConnections(AllVertices&amp; vertices, Layout* layout) : bool</text><ellipse cx="1443" cy="1496.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1452" y="1499.3433">getEdges() : shared_ptr&lt;AllEdges&gt; {query}</text><ellipse cx="1443" cy="1508.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="1452" y="1512.1479">getEdgeIndexMap() : shared_ptr&lt;EdgeIndexMap&gt; {query}</text><ellipse cx="1443" cy="1521.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1452" y="1524.9526">createEdgeIndexMap() : void</text><ellipse cx="1443" cy="1534.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="565" x="1452" y="1537.7573">createSynapsesFromWeights(const int numVertices, Layout* layout, AllVertices&amp; vertices, AllEdges&amp; synapses) : void</text><ellipse cx="1443" cy="1547.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112" x="1452" y="1550.562">loadParameters() : void</text><ellipse cx="1443" cy="1560.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="1452" y="1563.3667">printParameters() : void {query}</text><ellipse cx="1443" cy="1572.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1452" y="1576.1714">setupConnections(Layout* layout, AllVertices* vertices, AllEdges* synapses) : void</text><ellipse cx="1443" cy="1585.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1066" x="1452" y="1588.9761">updateSynapsesWeights(const int numVertices, AllVertices&amp; vertices, AllEdges&amp; synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void</text><ellipse cx="1443" cy="1598.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="1452" y="1601.7808">updateSynapsesWeights(const int numVertices, AllVertices&amp; vertices, AllEdges&amp; synapses, Layout* layout) : void</text><!--MD5=[07560c205a8067cf69726ad645fec973]
class ConnectionsFactory--><rect codeLine="503" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="ConnectionsFactory" style="stroke:#A80036;stroke-width:1.5;" width="374" x="1791" y="1004.5"/><ellipse cx="1920.25" cy="1020.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1920.1875,1016.3281 Q1919.4375,1016.3281 1918.875,1016.625 Q1918.3125,1016.9063 1917.9219,1017.4375 Q1917.5313,1017.9688 1917.3281,1018.75 Q1917.1406,1019.5156 1917.1406,1020.4688 Q1917.1406,1021.4375 1917.3125,1022.2031 Q1917.5,1022.9531 1917.8594,1023.4688 Q1918.2344,1023.9844 1918.8125,1024.2656 Q1919.3906,1024.5313 1920.1875,1024.5313 Q1920.9219,1024.5313 1921.6563,1024.3594 Q1922.4063,1024.1875 1923.2813,1023.8906 L1923.2813,1026.0469 Q1922.875,1026.2031 1922.4844,1026.3281 Q1922.0938,1026.4375 1921.6875,1026.5156 Q1921.2813,1026.5938 1920.8594,1026.625 Q1920.4375,1026.6719 1919.9375,1026.6719 Q1918.5313,1026.6719 1917.5,1026.2188 Q1916.4844,1025.7656 1915.8125,1024.9531 Q1915.1406,1024.1406 1914.8125,1023 Q1914.4844,1021.8438 1914.4844,1020.4531 Q1914.4844,1019.0781 1914.8594,1017.9219 Q1915.2344,1016.7656 1915.9531,1015.9375 Q1916.6719,1015.1094 1917.7344,1014.6563 Q1918.7969,1014.1875 1920.1875,1014.1875 Q1921.0938,1014.1875 1922,1014.4219 Q1922.9063,1014.6406 1923.7344,1015.0469 L1922.9063,1017.1406 Q1922.2188,1016.8125 1921.5313,1016.5781 Q1920.8438,1016.3281 1920.1875,1016.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="1940.75" y="1024.6543">ConnectionsFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1792" x2="2164" y1="1036.5" y2="1036.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799" y="1044.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="1811" y="1050.7104">createFunctions : ConnectionsFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799" y="1057.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="1811" y="1063.5151">connectionsInstance : shared_ptr&lt;Connections&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1792" x2="2164" y1="1070.1094" y2="1070.1094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799" y="1078.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1811" y="1084.3198">ConnectionsFactory()</text><ellipse cx="1802" cy="1093.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="1811" y="1097.1245">~ConnectionsFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799" y="1103.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="1811" y="1109.9292">invokeCreateFunction(const string&amp; className) : Connections*</text><ellipse cx="1802" cy="1119.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="173" x="1811" y="1122.7339">getInstance() : ConnectionsFactory*</text><ellipse cx="1802" cy="1132.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="1811" y="1135.5386">createConnections(const string&amp; className) : shared_ptr&lt;Connections&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799" y="1142.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="1811" y="1148.3433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[12f7f85e6a82a668bac37f73aa8a25f9]
class DynamicLayout--><rect codeLine="515" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="176.0469" id="DynamicLayout" style="stroke:#A80036;stroke-width:1.5;" width="324" x="5677" y="1937.5"/><ellipse cx="5793.25" cy="1953.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5793.1875,1949.3281 Q5792.4375,1949.3281 5791.875,1949.625 Q5791.3125,1949.9063 5790.9219,1950.4375 Q5790.5313,1950.9688 5790.3281,1951.75 Q5790.1406,1952.5156 5790.1406,1953.4688 Q5790.1406,1954.4375 5790.3125,1955.2031 Q5790.5,1955.9531 5790.8594,1956.4688 Q5791.2344,1956.9844 5791.8125,1957.2656 Q5792.3906,1957.5313 5793.1875,1957.5313 Q5793.9219,1957.5313 5794.6563,1957.3594 Q5795.4063,1957.1875 5796.2813,1956.8906 L5796.2813,1959.0469 Q5795.875,1959.2031 5795.4844,1959.3281 Q5795.0938,1959.4375 5794.6875,1959.5156 Q5794.2813,1959.5938 5793.8594,1959.625 Q5793.4375,1959.6719 5792.9375,1959.6719 Q5791.5313,1959.6719 5790.5,1959.2188 Q5789.4844,1958.7656 5788.8125,1957.9531 Q5788.1406,1957.1406 5787.8125,1956 Q5787.4844,1954.8438 5787.4844,1953.4531 Q5787.4844,1952.0781 5787.8594,1950.9219 Q5788.2344,1949.7656 5788.9531,1948.9375 Q5789.6719,1948.1094 5790.7344,1947.6563 Q5791.7969,1947.1875 5793.1875,1947.1875 Q5794.0938,1947.1875 5795,1947.4219 Q5795.9063,1947.6406 5796.7344,1948.0469 L5795.9063,1950.1406 Q5795.2188,1949.8125 5794.5313,1949.5781 Q5793.8438,1949.3281 5793.1875,1949.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="5813.75" y="1957.6543">DynamicLayout</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5678" x2="6000" y1="1969.5" y2="1969.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5685" y="1977.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="5697" y="1983.7104">fractionEndogenouslyActive_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5685" y="1990.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="5697" y="1996.5151">fractionExcitatory_ : BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5678" x2="6000" y1="2003.1094" y2="2003.1094"/><ellipse cx="5688" cy="2014.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="5697" y="2017.3198">DynamicLayout()</text><ellipse cx="5688" cy="2026.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="5697" y="2030.1245">~DynamicLayout()</text><ellipse cx="5688" cy="2039.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="5697" y="2042.9292">Create() : Layout*</text><ellipse cx="5688" cy="2052.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="5697" y="2055.7339">edgType(const int srcVertex, const int destVertex) : edgeType</text><ellipse cx="5688" cy="2065.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="5697" y="2068.5386">generateVertexTypeMap(int numVertices) : void</text><ellipse cx="5688" cy="2078.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="5697" y="2081.3433">initStarterMap(const int numVertices) : void</text><ellipse cx="5688" cy="2090.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="5697" y="2094.1479">loadParameters() : void</text><ellipse cx="5688" cy="2103.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="5697" y="2106.9526">printParameters() : void {query}</text><!--MD5=[2137c854024e09e8076c84fb007b1c3c]
class EdgesFactory--><rect codeLine="529" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="EdgesFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="571" y="1407"/><ellipse cx="713.25" cy="1423" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M713.1875,1418.8281 Q712.4375,1418.8281 711.875,1419.125 Q711.3125,1419.4063 710.9219,1419.9375 Q710.5313,1420.4688 710.3281,1421.25 Q710.1406,1422.0156 710.1406,1422.9688 Q710.1406,1423.9375 710.3125,1424.7031 Q710.5,1425.4531 710.8594,1425.9688 Q711.2344,1426.4844 711.8125,1426.7656 Q712.3906,1427.0313 713.1875,1427.0313 Q713.9219,1427.0313 714.6563,1426.8594 Q715.4063,1426.6875 716.2813,1426.3906 L716.2813,1428.5469 Q715.875,1428.7031 715.4844,1428.8281 Q715.0938,1428.9375 714.6875,1429.0156 Q714.2813,1429.0938 713.8594,1429.125 Q713.4375,1429.1719 712.9375,1429.1719 Q711.5313,1429.1719 710.5,1428.7188 Q709.4844,1428.2656 708.8125,1427.4531 Q708.1406,1426.6406 707.8125,1425.5 Q707.4844,1424.3438 707.4844,1422.9531 Q707.4844,1421.5781 707.8594,1420.4219 Q708.2344,1419.2656 708.9531,1418.4375 Q709.6719,1417.6094 710.7344,1417.1563 Q711.7969,1416.6875 713.1875,1416.6875 Q714.0938,1416.6875 715,1416.9219 Q715.9063,1417.1406 716.7344,1417.5469 L715.9063,1419.6406 Q715.2188,1419.3125 714.5313,1419.0781 Q713.8438,1418.8281 713.1875,1418.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="733.75" y="1427.1543">EdgesFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="572" x2="934" y1="1439" y2="1439"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="1447"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="591" y="1453.2104">createFunctions : EdgesFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="1459.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="591" y="1466.0151">edgesInstance_ : shared_ptr&lt;AllEdges&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="572" x2="934" y1="1472.6094" y2="1472.6094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="1480.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="591" y="1486.8198">EdgesFactory()</text><ellipse cx="582" cy="1496.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="591" y="1499.6245">~EdgesFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="1506.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="591" y="1512.4292">invokeCreateFunction(const string&amp; className) : AllEdges*</text><ellipse cx="582" cy="1522.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="143" x="591" y="1525.2339">getInstance() : EdgesFactory*</text><ellipse cx="582" cy="1534.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="591" y="1538.0386">createEdges(const string&amp; className) : shared_ptr&lt;AllEdges&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="1544.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="591" y="1550.8433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[05f17831147ee39527b2431b4d22ccc3]
class EventBuffer--><rect codeLine="541" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="214.4609" id="EventBuffer" style="stroke:#A80036;stroke-width:1.5;" width="228" x="4546" y="2953.5"/><ellipse cx="4625.75" cy="2969.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4625.6875,2965.3281 Q4624.9375,2965.3281 4624.375,2965.625 Q4623.8125,2965.9063 4623.4219,2966.4375 Q4623.0313,2966.9688 4622.8281,2967.75 Q4622.6406,2968.5156 4622.6406,2969.4688 Q4622.6406,2970.4375 4622.8125,2971.2031 Q4623,2971.9531 4623.3594,2972.4688 Q4623.7344,2972.9844 4624.3125,2973.2656 Q4624.8906,2973.5313 4625.6875,2973.5313 Q4626.4219,2973.5313 4627.1563,2973.3594 Q4627.9063,2973.1875 4628.7813,2972.8906 L4628.7813,2975.0469 Q4628.375,2975.2031 4627.9844,2975.3281 Q4627.5938,2975.4375 4627.1875,2975.5156 Q4626.7813,2975.5938 4626.3594,2975.625 Q4625.9375,2975.6719 4625.4375,2975.6719 Q4624.0313,2975.6719 4623,2975.2188 Q4621.9844,2974.7656 4621.3125,2973.9531 Q4620.6406,2973.1406 4620.3125,2972 Q4619.9844,2970.8438 4619.9844,2969.4531 Q4619.9844,2968.0781 4620.3594,2966.9219 Q4620.7344,2965.7656 4621.4531,2964.9375 Q4622.1719,2964.1094 4623.2344,2963.6563 Q4624.2969,2963.1875 4625.6875,2963.1875 Q4626.5938,2963.1875 4627.5,2963.4219 Q4628.4063,2963.6406 4629.2344,2964.0469 L4628.4063,2966.1406 Q4627.7188,2965.8125 4627.0313,2965.5781 Q4626.3438,2965.3281 4625.6875,2965.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="4646.25" y="2973.6543">EventBuffer</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4547" x2="4773" y1="2985.5" y2="2985.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4554" y="2993.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="4566" y="2999.7104">epochStart_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4554" y="3006.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="4566" y="3012.5151">numEventsInEpoch_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4554" y="3019.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="4566" y="3025.3198">queueEnd_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4554" y="3031.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="4566" y="3038.1245">queueFront_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4554" y="3044.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="4566" y="3050.9292">eventTimeSteps_ : vector&lt;uint64_t&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4547" x2="4773" y1="3057.5234" y2="3057.5234"/><ellipse cx="4557" cy="3068.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="4566" y="3071.7339">EventBuffer(int maxEvents)</text><ellipse cx="4557" cy="3081.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="4566" y="3084.5386">getNumEventsInEpoch() : int {query}</text><ellipse cx="4557" cy="3094.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="4566" y="3097.3433">getPastEvent(int offset) : uint64_t {query}</text><ellipse cx="4557" cy="3106.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="4566" y="3110.1479">operator[](int i) : uint64_t {query}</text><ellipse cx="4557" cy="3119.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="4566" y="3122.9526">clear() : void</text><ellipse cx="4557" cy="3132.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="4566" y="3135.7573">insertEvent(uint64_t timeStep) : void</text><ellipse cx="4557" cy="3145.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="4566" y="3148.562">resize(int maxEvents) : void</text><ellipse cx="4557" cy="3158.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="4566" y="3161.3667">startNewEpoch() : void</text><!--MD5=[c01d281453c5d4cdc24a7f27a30cb7c5]
class FixedLayout--><rect codeLine="558" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="FixedLayout" style="stroke:#A80036;stroke-width:1.5;" width="324" x="5318" y="1950.5"/><ellipse cx="5443.25" cy="1966.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5443.1875,1962.3281 Q5442.4375,1962.3281 5441.875,1962.625 Q5441.3125,1962.9063 5440.9219,1963.4375 Q5440.5313,1963.9688 5440.3281,1964.75 Q5440.1406,1965.5156 5440.1406,1966.4688 Q5440.1406,1967.4375 5440.3125,1968.2031 Q5440.5,1968.9531 5440.8594,1969.4688 Q5441.2344,1969.9844 5441.8125,1970.2656 Q5442.3906,1970.5313 5443.1875,1970.5313 Q5443.9219,1970.5313 5444.6563,1970.3594 Q5445.4063,1970.1875 5446.2813,1969.8906 L5446.2813,1972.0469 Q5445.875,1972.2031 5445.4844,1972.3281 Q5445.0938,1972.4375 5444.6875,1972.5156 Q5444.2813,1972.5938 5443.8594,1972.625 Q5443.4375,1972.6719 5442.9375,1972.6719 Q5441.5313,1972.6719 5440.5,1972.2188 Q5439.4844,1971.7656 5438.8125,1970.9531 Q5438.1406,1970.1406 5437.8125,1969 Q5437.4844,1967.8438 5437.4844,1966.4531 Q5437.4844,1965.0781 5437.8594,1963.9219 Q5438.2344,1962.7656 5438.9531,1961.9375 Q5439.6719,1961.1094 5440.7344,1960.6563 Q5441.7969,1960.1875 5443.1875,1960.1875 Q5444.0938,1960.1875 5445,1960.4219 Q5445.9063,1960.6406 5446.7344,1961.0469 L5445.9063,1963.1406 Q5445.2188,1962.8125 5444.5313,1962.5781 Q5443.8438,1962.3281 5443.1875,1962.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="5463.75" y="1970.6543">FixedLayout</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5319" x2="5641" y1="1982.5" y2="1982.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="5319" x2="5641" y1="1990.5" y2="1990.5"/><ellipse cx="5329" cy="2001.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="5338" y="2004.7104">FixedLayout()</text><ellipse cx="5329" cy="2014.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="5338" y="2017.5151">~FixedLayout()</text><ellipse cx="5329" cy="2027.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="5338" y="2030.3198">Create() : Layout*</text><ellipse cx="5329" cy="2039.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="5338" y="2043.1245">edgType(const int srcVertex, const int destVertex) : edgeType</text><ellipse cx="5329" cy="2052.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="5338" y="2055.9292">generateVertexTypeMap(int numVertices) : void</text><ellipse cx="5329" cy="2065.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="5338" y="2068.7339">initStarterMap(const int numVertices) : void</text><ellipse cx="5329" cy="2078.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="5338" y="2081.5386">loadParameters() : void</text><ellipse cx="5329" cy="2091.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="5338" y="2094.3433">printParameters() : void {query}</text><!--MD5=[124ec3daa98f7d6a805c6f5a48dde9c7]
class GPUModel--><rect codeLine="570" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="342.5078" id="GPUModel" style="stroke:#A80036;stroke-width:1.5;" width="779" x="2559.5" y="1310.5"/><ellipse cx="2915.75" cy="1326.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2915.6875,1322.3281 Q2914.9375,1322.3281 2914.375,1322.625 Q2913.8125,1322.9063 2913.4219,1323.4375 Q2913.0313,1323.9688 2912.8281,1324.75 Q2912.6406,1325.5156 2912.6406,1326.4688 Q2912.6406,1327.4375 2912.8125,1328.2031 Q2913,1328.9531 2913.3594,1329.4688 Q2913.7344,1329.9844 2914.3125,1330.2656 Q2914.8906,1330.5313 2915.6875,1330.5313 Q2916.4219,1330.5313 2917.1563,1330.3594 Q2917.9063,1330.1875 2918.7813,1329.8906 L2918.7813,1332.0469 Q2918.375,1332.2031 2917.9844,1332.3281 Q2917.5938,1332.4375 2917.1875,1332.5156 Q2916.7813,1332.5938 2916.3594,1332.625 Q2915.9375,1332.6719 2915.4375,1332.6719 Q2914.0313,1332.6719 2913,1332.2188 Q2911.9844,1331.7656 2911.3125,1330.9531 Q2910.6406,1330.1406 2910.3125,1329 Q2909.9844,1327.8438 2909.9844,1326.4531 Q2909.9844,1325.0781 2910.3594,1323.9219 Q2910.7344,1322.7656 2911.4531,1321.9375 Q2912.1719,1321.1094 2913.2344,1320.6563 Q2914.2969,1320.1875 2915.6875,1320.1875 Q2916.5938,1320.1875 2917.5,1320.4219 Q2918.4063,1320.6406 2919.2344,1321.0469 L2918.4063,1323.1406 Q2917.7188,1322.8125 2917.0313,1322.5781 Q2916.3438,1322.3281 2915.6875,1322.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="2936.25" y="1330.6543">GPUModel</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2560.5" x2="3337.5" y1="1342.5" y2="1342.5"/><polygon fill="none" points="2570.5,1348.5,2574.5,1352.5,2570.5,1356.5,2566.5,1352.5" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="2579.5" y="1356.7104">allVerticesDevice_ : AllSpikingNeuronsDeviceProperties*</text><polygon fill="none" points="2570.5,1361.3047,2574.5,1365.3047,2570.5,1369.3047,2566.5,1365.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2579.5" y="1369.5151">allEdgesDevice_ : AllSpikingSynapsesDeviceProperties*</text><polygon fill="none" points="2570.5,1374.1094,2574.5,1378.1094,2570.5,1382.1094,2566.5,1378.1094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2579.5" y="1382.3198">synapseIndexMapDevice_ : EdgeIndexMap*</text><polygon fill="none" points="2570.5,1386.9141,2574.5,1390.9141,2570.5,1394.9141,2566.5,1390.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2579.5" y="1395.1245">randNoise_d : float*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2560.5" x2="3337.5" y1="1401.7188" y2="1401.7188"/><ellipse cx="2570.5" cy="1412.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="2579.5" y="1415.9292">GPUModel()</text><ellipse cx="2570.5" cy="1425.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2579.5" y="1428.7339">~GPUModel()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2567.5" y="1435.3281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="729" x="2579.5" y="1441.5386">addEdge(AllEdges&amp; synapses, edgeType type, const int srcVertex, const int destVertex, Coordinate&amp; source, Coordinate&amp; dest, BGFLOAT deltaT) : void</text><ellipse cx="2570.5" cy="1451.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2579.5" y="1454.3433">advance() : void</text><polygon fill="#FFFF44" points="2570.5,1458.9375,2574.5,1462.9375,2570.5,1466.9375,2566.5,1462.9375" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2579.5" y="1467.1479">allocDeviceStruct(void</text><text fill="#000000" font-family="sans-serif" font-size="11" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="120" x="2688.5" y="1467.1479">allVerticesDevice, void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2811.5" y="1467.1479">allEdgesDevice) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2567.5" y="1473.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="2579.5" y="1479.9526">allocSynapseImap(int count) : void</text><polygon fill="#FFFF44" points="2570.5,1484.5469,2574.5,1488.5469,2570.5,1492.5469,2566.5,1488.5469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="2579.5" y="1492.7573">calcSummationPoint() : void</text><ellipse cx="2570.5" cy="1502.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2579.5" y="1505.562">copyCPUtoGPU() : void</text><ellipse cx="2570.5" cy="1515.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2579.5" y="1518.3667">copyGPUtoCPU() : void</text><ellipse cx="2570.5" cy="1527.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="2579.5" y="1531.1714">copySynapseIndexMapHostToDevice(EdgeIndexMap&amp; synapseIndexMapHost, int numVertices) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2567.5" y="1537.7656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="753" x="2579.5" y="1543.9761">createEdge(AllEdges&amp; synapses, const int neuronIndex, const int synapseIndex, Coordinate source, Coordinate dest, BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="2570.5,1548.5703,2574.5,1552.5703,2570.5,1556.5703,2566.5,1552.5703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2579.5" y="1556.7808">deleteDeviceStruct(void</text><text fill="#000000" font-family="sans-serif" font-size="11" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="120" x="2697.5" y="1556.7808">allVerticesDevice, void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2820.5" y="1556.7808">allEdgesDevice) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2567.5" y="1563.375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2579.5" y="1569.5854">deleteSynapseImap() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2567.5" y="1576.1797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="2579.5" y="1582.3901">eraseEdge(AllEdges&amp; synapses, const int neuronIndex, const int synapseIndex) : void</text><ellipse cx="2570.5" cy="1591.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2579.5" y="1595.1948">finish() : void</text><ellipse cx="2570.5" cy="1604.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="2579.5" y="1607.9995">printGPUSynapsesPropsModel() : void {query}</text><ellipse cx="2570.5" cy="1617.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2579.5" y="1620.8042">setupSim() : void</text><ellipse cx="2570.5" cy="1630.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2579.5" y="1633.6089">updateConnections() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2567.5" y="1640.2031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2579.5" y="1646.4136">updateHistory() : void</text><!--MD5=[dd9a31495c85b5dc63c13c8cf57db1f9]
class GenericFunctionNode--><rect codeLine="597" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="99.2188" id="GenericFunctionNode" style="stroke:#A80036;stroke-width:1.5;" width="505" x="5586.5" y="1432.5"/><ellipse cx="5775.25" cy="1448.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5775.1875,1444.3281 Q5774.4375,1444.3281 5773.875,1444.625 Q5773.3125,1444.9063 5772.9219,1445.4375 Q5772.5313,1445.9688 5772.3281,1446.75 Q5772.1406,1447.5156 5772.1406,1448.4688 Q5772.1406,1449.4375 5772.3125,1450.2031 Q5772.5,1450.9531 5772.8594,1451.4688 Q5773.2344,1451.9844 5773.8125,1452.2656 Q5774.3906,1452.5313 5775.1875,1452.5313 Q5775.9219,1452.5313 5776.6563,1452.3594 Q5777.4063,1452.1875 5778.2813,1451.8906 L5778.2813,1454.0469 Q5777.875,1454.2031 5777.4844,1454.3281 Q5777.0938,1454.4375 5776.6875,1454.5156 Q5776.2813,1454.5938 5775.8594,1454.625 Q5775.4375,1454.6719 5774.9375,1454.6719 Q5773.5313,1454.6719 5772.5,1454.2188 Q5771.4844,1453.7656 5770.8125,1452.9531 Q5770.1406,1452.1406 5769.8125,1451 Q5769.4844,1449.8438 5769.4844,1448.4531 Q5769.4844,1447.0781 5769.8594,1445.9219 Q5770.2344,1444.7656 5770.9531,1443.9375 Q5771.6719,1443.1094 5772.7344,1442.6563 Q5773.7969,1442.1875 5775.1875,1442.1875 Q5776.0938,1442.1875 5777,1442.4219 Q5777.9063,1442.6406 5778.7344,1443.0469 L5777.9063,1445.1406 Q5777.2188,1444.8125 5776.5313,1444.5781 Q5775.8438,1444.3281 5775.1875,1444.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="119" x="5795.75" y="1452.6543">GenericFunctionNode</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5587.5" x2="6090.5" y1="1464.5" y2="1464.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="5587.5" x2="6090.5" y1="1472.5" y2="1472.5"/><ellipse cx="5597.5" cy="1483.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="479" x="5606.5" y="1486.7104">GenericFunctionNode(const Operations::op&amp; operationType, const std::function&lt;void ( )&gt;&amp; function)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5594.5" y="1493.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="5606.5" y="1499.5151">function&lt;void()</text><ellipse cx="5597.5" cy="1509.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="5606.5" y="1512.3198">~GenericFunctionNode()</text><ellipse cx="5597.5" cy="1521.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="5606.5" y="1525.1245">invokeFunction(const Operations::op&amp; operation) : bool {query}</text><!--MD5=[af68557a962a5f1f7548a7e590f8fd62]
class Hdf5GrowthRecorder--><rect codeLine="605" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="240.0703" id="Hdf5GrowthRecorder" style="stroke:#A80036;stroke-width:1.5;" width="240" x="4392" y="2391"/><ellipse cx="4451.25" cy="2407" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4451.1875,2402.8281 Q4450.4375,2402.8281 4449.875,2403.125 Q4449.3125,2403.4063 4448.9219,2403.9375 Q4448.5313,2404.4688 4448.3281,2405.25 Q4448.1406,2406.0156 4448.1406,2406.9688 Q4448.1406,2407.9375 4448.3125,2408.7031 Q4448.5,2409.4531 4448.8594,2409.9688 Q4449.2344,2410.4844 4449.8125,2410.7656 Q4450.3906,2411.0313 4451.1875,2411.0313 Q4451.9219,2411.0313 4452.6563,2410.8594 Q4453.4063,2410.6875 4454.2813,2410.3906 L4454.2813,2412.5469 Q4453.875,2412.7031 4453.4844,2412.8281 Q4453.0938,2412.9375 4452.6875,2413.0156 Q4452.2813,2413.0938 4451.8594,2413.125 Q4451.4375,2413.1719 4450.9375,2413.1719 Q4449.5313,2413.1719 4448.5,2412.7188 Q4447.4844,2412.2656 4446.8125,2411.4531 Q4446.1406,2410.6406 4445.8125,2409.5 Q4445.4844,2408.3438 4445.4844,2406.9531 Q4445.4844,2405.5781 4445.8594,2404.4219 Q4446.2344,2403.2656 4446.9531,2402.4375 Q4447.6719,2401.6094 4448.7344,2401.1563 Q4449.7969,2400.6875 4451.1875,2400.6875 Q4452.0938,2400.6875 4453,2400.9219 Q4453.9063,2401.1406 4454.7344,2401.5469 L4453.9063,2403.6406 Q4453.2188,2403.3125 4452.5313,2403.0781 Q4451.8438,2402.8281 4451.1875,2402.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="113" x="4471.75" y="2411.1543">Hdf5GrowthRecorder</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4393" x2="4631" y1="2423" y2="2423"/><polygon fill="none" points="4403,2429,4407,2433,4403,2437,4399,2433" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="4412" y="2437.2104">radiiHistory_ : BGFLOAT*</text><polygon fill="none" points="4403,2441.8047,4407,2445.8047,4403,2449.8047,4399,2445.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="4412" y="2450.0151">ratesHistory_ : BGFLOAT*</text><polygon fill="none" points="4403,2454.6094,4407,2458.6094,4403,2462.6094,4399,2458.6094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="4412" y="2462.8198">dataSetRadiiHist_ : DataSet</text><polygon fill="none" points="4403,2467.4141,4407,2471.4141,4403,2475.4141,4399,2471.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="4412" y="2475.6245">dataSetRatesHist_ : DataSet</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4393" x2="4631" y1="2482.2188" y2="2482.2188"/><ellipse cx="4403" cy="2493.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4412" y="2496.4292">Hdf5GrowthRecorder()</text><ellipse cx="4403" cy="2506.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="4412" y="2509.2339">~Hdf5GrowthRecorder()</text><ellipse cx="4403" cy="2518.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="101" x="4412" y="2522.0386">Create() : IRecorder*</text><ellipse cx="4403" cy="2531.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="4412" y="2534.8433">compileHistories(AllVertices&amp; neurons) : void</text><ellipse cx="4403" cy="2544.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4412" y="2547.6479">getValues() : void</text><polygon fill="#FFFF44" points="4403,2552.2422,4407,2556.2422,4403,2560.2422,4399,2556.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="4412" y="2560.4526">initDataSet() : void</text><ellipse cx="4403" cy="2570.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4412" y="2573.2573">initDefaultValues() : void</text><ellipse cx="4403" cy="2582.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="4412" y="2586.062">initValues() : void</text><ellipse cx="4403" cy="2595.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="4412" y="2598.8667">printParameters() : void</text><ellipse cx="4403" cy="2608.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="4412" y="2611.6714">term() : void</text><polygon fill="#FFFF44" points="4403,2616.2656,4407,2620.2656,4403,2624.2656,4399,2620.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4412" y="2624.4761">writeRadiiRates() : void</text><!--MD5=[2f81b0e77ba864956fe3cef8330f890e]
class Hdf5Recorder--><rect codeLine="624" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="380.9219" id="Hdf5Recorder" style="stroke:#A80036;stroke-width:1.5;" width="405" x="4117.5" y="1835"/><ellipse cx="4278.75" cy="1851" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4278.6875,1846.8281 Q4277.9375,1846.8281 4277.375,1847.125 Q4276.8125,1847.4063 4276.4219,1847.9375 Q4276.0313,1848.4688 4275.8281,1849.25 Q4275.6406,1850.0156 4275.6406,1850.9688 Q4275.6406,1851.9375 4275.8125,1852.7031 Q4276,1853.4531 4276.3594,1853.9688 Q4276.7344,1854.4844 4277.3125,1854.7656 Q4277.8906,1855.0313 4278.6875,1855.0313 Q4279.4219,1855.0313 4280.1563,1854.8594 Q4280.9063,1854.6875 4281.7813,1854.3906 L4281.7813,1856.5469 Q4281.375,1856.7031 4280.9844,1856.8281 Q4280.5938,1856.9375 4280.1875,1857.0156 Q4279.7813,1857.0938 4279.3594,1857.125 Q4278.9375,1857.1719 4278.4375,1857.1719 Q4277.0313,1857.1719 4276,1856.7188 Q4274.9844,1856.2656 4274.3125,1855.4531 Q4273.6406,1854.6406 4273.3125,1853.5 Q4272.9844,1852.3438 4272.9844,1850.9531 Q4272.9844,1849.5781 4273.3594,1848.4219 Q4273.7344,1847.2656 4274.4531,1846.4375 Q4275.1719,1845.6094 4276.2344,1845.1563 Q4277.2969,1844.6875 4278.6875,1844.6875 Q4279.5938,1844.6875 4280.5,1844.9219 Q4281.4063,1845.1406 4282.2344,1845.5469 L4281.4063,1847.6406 Q4280.7188,1847.3125 4280.0313,1847.0781 Q4279.3438,1846.8281 4278.6875,1846.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="74" x="4299.25" y="1855.1543">Hdf5Recorder</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4118.5" x2="4521.5" y1="1867" y2="1867"/><polygon fill="none" points="4128.5,1873,4132.5,1877,4128.5,1881,4124.5,1877" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="4137.5" y="1881.2104">dataSetNeuronThresh_ : DataSet*</text><polygon fill="none" points="4128.5,1885.8047,4132.5,1889.8047,4128.5,1893.8047,4124.5,1889.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="4137.5" y="1894.0151">dataSetNeuronTypes_ : DataSet*</text><polygon fill="none" points="4128.5,1898.6094,4132.5,1902.6094,4128.5,1906.6094,4124.5,1902.6094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="4137.5" y="1906.8198">dataSetProbedNeurons_ : DataSet*</text><polygon fill="none" points="4128.5,1911.4141,4132.5,1915.4141,4128.5,1919.4141,4124.5,1915.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="4137.5" y="1919.6245">dataSetSimulationEndTime_ : DataSet*</text><polygon fill="none" points="4128.5,1924.2188,4132.5,1928.2188,4128.5,1932.2188,4124.5,1928.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="4137.5" y="1932.4292">dataSetSpikesHist_ : DataSet*</text><polygon fill="none" points="4128.5,1937.0234,4132.5,1941.0234,4128.5,1945.0234,4124.5,1941.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="4137.5" y="1945.2339">dataSetSpikesProbedNeurons_ : DataSet*</text><polygon fill="none" points="4128.5,1949.8281,4132.5,1953.8281,4128.5,1957.8281,4124.5,1953.8281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="4137.5" y="1958.0386">dataSetStarterNeurons_ : DataSet*</text><polygon fill="none" points="4128.5,1962.6328,4132.5,1966.6328,4128.5,1970.6328,4124.5,1966.6328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="4137.5" y="1970.8433">dataSetTsim_ : DataSet*</text><polygon fill="none" points="4128.5,1975.4375,4132.5,1979.4375,4128.5,1983.4375,4124.5,1979.4375" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4137.5" y="1983.6479">dataSetXloc_ : DataSet*</text><polygon fill="none" points="4128.5,1988.2422,4132.5,1992.2422,4128.5,1996.2422,4124.5,1992.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4137.5" y="1996.4526">dataSetYloc_ : DataSet*</text><polygon fill="none" points="4128.5,2001.0469,4132.5,2005.0469,4128.5,2009.0469,4124.5,2005.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="4137.5" y="2009.2573">resultOut_ : H5File*</text><polygon fill="none" points="4128.5,2013.8516,4132.5,2017.8516,4128.5,2021.8516,4124.5,2017.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="4137.5" y="2022.062">offsetSpikesProbedNeurons_ : hsize_t*</text><polygon fill="none" points="4128.5,2026.6563,4132.5,2030.6563,4128.5,2034.6563,4124.5,2030.6563" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="4137.5" y="2034.8667">spikesHistory_ : int*</text><polygon fill="none" points="4128.5,2039.4609,4132.5,2043.4609,4128.5,2047.4609,4124.5,2043.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="4137.5" y="2047.6714">spikesProbedNeurons_ : vector&lt;uint64_t&gt;*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4118.5" x2="4521.5" y1="2054.2656" y2="2054.2656"/><ellipse cx="4128.5" cy="2065.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="4137.5" y="2068.4761">Hdf5Recorder()</text><ellipse cx="4128.5" cy="2078.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="101" x="4137.5" y="2081.2808">Create() : IRecorder*</text><ellipse cx="4128.5" cy="2090.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="4137.5" y="2094.0854">compileHistories(AllVertices&amp; neurons) : void</text><polygon fill="#FFFF44" points="4128.5,2098.6797,4132.5,2102.6797,4128.5,2106.6797,4124.5,2102.6797" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="4137.5" y="2106.8901">getStarterNeuronMatrix(VectorMatrix&amp; matrix, const bool* starterMap) : void</text><ellipse cx="4128.5" cy="2116.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4137.5" y="2119.6948">getValues() : void</text><ellipse cx="4128.5" cy="2129.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="4137.5" y="2132.4995">init() : void</text><polygon fill="#FFFF44" points="4128.5,2137.0938,4132.5,2141.0938,4128.5,2145.0938,4124.5,2141.0938" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="4137.5" y="2145.3042">initDataSet() : void</text><ellipse cx="4128.5" cy="2154.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4137.5" y="2158.1089">initDefaultValues() : void</text><ellipse cx="4128.5" cy="2167.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="4137.5" y="2170.9136">initValues() : void</text><ellipse cx="4128.5" cy="2180.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="4137.5" y="2183.7183">printParameters() : void</text><ellipse cx="4128.5" cy="2193.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="4137.5" y="2196.5229">saveSimData(const AllVertices&amp; neurons) : void</text><ellipse cx="4128.5" cy="2206.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="4137.5" y="2209.3276">term() : void</text><!--MD5=[99788c5c01261f19cd519066f428e9b5]
class IFunctionNode--><rect codeLine="654" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="86.4141" id="IFunctionNode" style="stroke:#A80036;stroke-width:1.5;" width="329" x="6008.5" y="1036.5"/><ellipse cx="6128.25" cy="1052.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M6131.2031,1057.5 L6130.375,1054.6094 L6126.1875,1054.6094 L6125.3438,1057.5 L6122.75,1057.5 L6126.6875,1045.3125 L6129.8438,1045.3125 L6133.7969,1057.5 L6131.2031,1057.5 Z M6129.7656,1052.4531 L6129,1049.7969 Q6128.9375,1049.6406 6128.8438,1049.3125 Q6128.75,1048.9688 6128.625,1048.5625 Q6128.5156,1048.1406 6128.4063,1047.7344 Q6128.3125,1047.3125 6128.2813,1047.0313 Q6128.25,1047.2031 6128.1875,1047.4531 Q6128.1406,1047.7031 6128.0625,1047.9844 Q6128,1048.2656 6127.9219,1048.5469 Q6127.8438,1048.8281 6127.7813,1049.0781 Q6127.7188,1049.3281 6127.6563,1049.5156 Q6127.6094,1049.7031 6127.5781,1049.7969 L6126.8125,1052.4531 L6129.7656,1052.4531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="81" x="6148.75" y="1056.6543">IFunctionNode</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6009.5" x2="6336.5" y1="1068.5" y2="1068.5"/><polygon fill="none" points="6019.5,1074.5,6023.5,1078.5,6019.5,1082.5,6015.5,1078.5" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="6028.5" y="1082.7104">operationType_ : Operations::op</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6009.5" x2="6336.5" y1="1089.3047" y2="1089.3047"/><ellipse cx="6019.5" cy="1100.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="6028.5" y="1103.5151">~IFunctionNode()</text><ellipse cx="6019.5" cy="1113.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="6028.5" y="1116.3198">invokeFunction(const Operations::op&amp; operation) : bool {query}</text><!--MD5=[a2efe13f97b9395dfb70e2255bd52698]
class IRecorder--><rect codeLine="661" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="201.6563" id="IRecorder" style="stroke:#A80036;stroke-width:1.5;" width="405" x="3991.5" y="1381"/><ellipse cx="4163.25" cy="1397" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4166.2031,1402 L4165.375,1399.1094 L4161.1875,1399.1094 L4160.3438,1402 L4157.75,1402 L4161.6875,1389.8125 L4164.8438,1389.8125 L4168.7969,1402 L4166.2031,1402 Z M4164.7656,1396.9531 L4164,1394.2969 Q4163.9375,1394.1406 4163.8438,1393.8125 Q4163.75,1393.4688 4163.625,1393.0625 Q4163.5156,1392.6406 4163.4063,1392.2344 Q4163.3125,1391.8125 4163.2813,1391.5313 Q4163.25,1391.7031 4163.1875,1391.9531 Q4163.1406,1392.2031 4163.0625,1392.4844 Q4163,1392.7656 4162.9219,1393.0469 Q4162.8438,1393.3281 4162.7813,1393.5781 Q4162.7188,1393.8281 4162.6563,1394.0156 Q4162.6094,1394.2031 4162.5781,1394.2969 L4161.8125,1396.9531 L4164.7656,1396.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="53" x="4183.75" y="1401.1543">IRecorder</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3992.5" x2="4395.5" y1="1413" y2="1413"/><polygon fill="none" points="4002.5,1419,4006.5,1423,4002.5,1427,3998.5,1423" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="4011.5" y="1427.2104">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="4002.5,1431.8047,4006.5,1435.8047,4002.5,1439.8047,3998.5,1435.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="4011.5" y="1440.0151">resultFileName_ : string</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3992.5" x2="4395.5" y1="1446.6094" y2="1446.6094"/><ellipse cx="4002.5" cy="1457.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="4011.5" y="1460.8198">~IRecorder()</text><ellipse cx="4002.5" cy="1470.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="213" x="4011.5" y="1473.6245">compileHistories(AllVertices&amp; vertices) : void</text><polygon fill="#FFFF44" points="4002.5,1478.2188,4006.5,1482.2188,4002.5,1486.2188,3998.5,1482.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="4011.5" y="1486.4292">getStarterNeuronMatrix(VectorMatrix&amp; matrix, const bool* starterMap) : void</text><ellipse cx="4002.5" cy="1496.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="83" x="4011.5" y="1499.2339">getValues() : void</text><ellipse cx="4002.5" cy="1508.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="49" x="4011.5" y="1512.0386">init() : void</text><ellipse cx="4002.5" cy="1521.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="117" x="4011.5" y="1524.8433">initDefaultValues() : void</text><ellipse cx="4002.5" cy="1534.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="81" x="4011.5" y="1537.6479">initValues() : void</text><ellipse cx="4002.5" cy="1547.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="114" x="4011.5" y="1550.4526">printParameters() : void</text><ellipse cx="4002.5" cy="1560.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="4011.5" y="1563.2573">saveSimData(const AllVertices&amp; vertices) : void</text><ellipse cx="4002.5" cy="1572.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="59" x="4011.5" y="1576.062">term() : void</text><!--MD5=[caebf2ddd0fe15aa1cd7c0f919e7d6a1]
class Layout--><rect codeLine="677" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="393.7266" id="Layout" style="stroke:#A80036;stroke-width:1.5;" width="324" x="5227" y="1285"/><ellipse cx="5366.75" cy="1301" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5369.7031,1306 L5368.875,1303.1094 L5364.6875,1303.1094 L5363.8438,1306 L5361.25,1306 L5365.1875,1293.8125 L5368.3438,1293.8125 L5372.2969,1306 L5369.7031,1306 Z M5368.2656,1300.9531 L5367.5,1298.2969 Q5367.4375,1298.1406 5367.3438,1297.8125 Q5367.25,1297.4688 5367.125,1297.0625 Q5367.0156,1296.6406 5366.9063,1296.2344 Q5366.8125,1295.8125 5366.7813,1295.5313 Q5366.75,1295.7031 5366.6875,1295.9531 Q5366.6406,1296.2031 5366.5625,1296.4844 Q5366.5,1296.7656 5366.4219,1297.0469 Q5366.3438,1297.3281 5366.2813,1297.5781 Q5366.2188,1297.8281 5366.1563,1298.0156 Q5366.1094,1298.2031 5366.0781,1298.2969 L5365.3125,1300.9531 L5368.2656,1300.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="36" x="5387.25" y="1305.1543">Layout</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5228" x2="5550" y1="1317" y2="1317"/><ellipse cx="5238" cy="1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="5247" y="1331.2104">numCallerVertices_ : BGSIZE</text><ellipse cx="5238" cy="1340.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="5247" y="1344.0151">numEndogenouslyActiveNeurons_ : BGSIZE</text><ellipse cx="5238" cy="1353.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="5247" y="1356.8198">dist2_ : CompleteMatrix*</text><ellipse cx="5238" cy="1366.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="5247" y="1369.6245">dist_ : CompleteMatrix*</text><ellipse cx="5238" cy="1379.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="5247" y="1382.4292">xloc_ : VectorMatrix*</text><ellipse cx="5238" cy="1392.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="5247" y="1395.2339">yloc_ : VectorMatrix*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5235" y="1401.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="5247" y="1408.0386">gridLayout_ : bool</text><ellipse cx="5238" cy="1417.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="5247" y="1420.8433">starterMap_ : bool*</text><polygon fill="none" points="5238,1425.4375,5242,1429.4375,5238,1433.4375,5234,1429.4375" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="5247" y="1433.6479">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="5238,1438.2422,5242,1442.2422,5238,1446.2422,5234,1442.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="5247" y="1446.4526">vertices_ : shared_ptr&lt;AllVertices&gt;</text><polygon fill="none" points="5238,1451.0469,5242,1455.0469,5238,1459.0469,5234,1455.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="5247" y="1459.2573">callerVertexList_ : vector&lt;int&gt;</text><polygon fill="none" points="5238,1463.8516,5242,1467.8516,5238,1471.8516,5234,1467.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="5247" y="1472.062">endogenouslyActiveNeuronList_ : vector&lt;int&gt;</text><polygon fill="none" points="5238,1476.6563,5242,1480.6563,5238,1484.6563,5234,1480.6563" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="5247" y="1484.8667">inhibitoryNeuronLayout_ : vector&lt;int&gt;</text><ellipse cx="5238" cy="1494.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="5247" y="1497.6714">probedNeuronList_ : vector&lt;int&gt;</text><polygon fill="none" points="5238,1502.2656,5242,1506.2656,5238,1510.2656,5234,1506.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="5247" y="1510.4761">psapVertexList_ : vector&lt;int&gt;</text><polygon fill="none" points="5238,1515.0703,5242,1519.0703,5238,1523.0703,5234,1519.0703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="5247" y="1523.2808">responderVertexList_ : vector&lt;int&gt;</text><ellipse cx="5238" cy="1532.875" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="5247" y="1536.0854">vertexTypeMap_ : vertexType*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5228" x2="5550" y1="1542.6797" y2="1542.6797"/><ellipse cx="5238" cy="1553.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="39" x="5247" y="1556.8901">Layout()</text><ellipse cx="5238" cy="1566.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="5247" y="1569.6948">~Layout()</text><ellipse cx="5238" cy="1579.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="5247" y="1582.4995">edgType(const int srcVertex, const int destVertex) : edgeType</text><ellipse cx="5238" cy="1592.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="5247" y="1595.3042">getVertices() : shared_ptr&lt;AllVertices&gt; {query}</text><ellipse cx="5238" cy="1604.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="5247" y="1608.1089">generateVertexTypeMap(int numVertices) : void</text><ellipse cx="5238" cy="1617.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="5247" y="1620.9136">initStarterMap(const int numVertices) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5235" y="1627.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="5247" y="1633.7183">initVerticesLocs() : void</text><ellipse cx="5238" cy="1643.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112" x="5247" y="1646.5229">loadParameters() : void</text><ellipse cx="5238" cy="1656.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="5247" y="1659.3276">printParameters() : void {query}</text><ellipse cx="5238" cy="1668.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="5247" y="1672.1323">setupLayout() : void</text><!--MD5=[e2bec1e8f5041d1015728825611f3c9f]
class LayoutFactory--><rect codeLine="708" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="LayoutFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="5207" y="1004.5"/><ellipse cx="5347.25" cy="1020.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5347.1875,1016.3281 Q5346.4375,1016.3281 5345.875,1016.625 Q5345.3125,1016.9063 5344.9219,1017.4375 Q5344.5313,1017.9688 5344.3281,1018.75 Q5344.1406,1019.5156 5344.1406,1020.4688 Q5344.1406,1021.4375 5344.3125,1022.2031 Q5344.5,1022.9531 5344.8594,1023.4688 Q5345.2344,1023.9844 5345.8125,1024.2656 Q5346.3906,1024.5313 5347.1875,1024.5313 Q5347.9219,1024.5313 5348.6563,1024.3594 Q5349.4063,1024.1875 5350.2813,1023.8906 L5350.2813,1026.0469 Q5349.875,1026.2031 5349.4844,1026.3281 Q5349.0938,1026.4375 5348.6875,1026.5156 Q5348.2813,1026.5938 5347.8594,1026.625 Q5347.4375,1026.6719 5346.9375,1026.6719 Q5345.5313,1026.6719 5344.5,1026.2188 Q5343.4844,1025.7656 5342.8125,1024.9531 Q5342.1406,1024.1406 5341.8125,1023 Q5341.4844,1021.8438 5341.4844,1020.4531 Q5341.4844,1019.0781 5341.8594,1017.9219 Q5342.2344,1016.7656 5342.9531,1015.9375 Q5343.6719,1015.1094 5344.7344,1014.6563 Q5345.7969,1014.1875 5347.1875,1014.1875 Q5348.0938,1014.1875 5349,1014.4219 Q5349.9063,1014.6406 5350.7344,1015.0469 L5349.9063,1017.1406 Q5349.2188,1016.8125 5348.5313,1016.5781 Q5347.8438,1016.3281 5347.1875,1016.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="5367.75" y="1024.6543">LayoutFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5208" x2="5570" y1="1036.5" y2="1036.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5215" y="1044.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="5227" y="1050.7104">createFunctions : LayoutFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5215" y="1057.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="5227" y="1063.5151">layoutInstance : shared_ptr&lt;Layout&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5208" x2="5570" y1="1070.1094" y2="1070.1094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5215" y="1078.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="5227" y="1084.3198">LayoutFactory()</text><ellipse cx="5218" cy="1093.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="5227" y="1097.1245">~LayoutFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5215" y="1103.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="5227" y="1109.9292">invokeCreateFunction(const string&amp; className) : Layout*</text><ellipse cx="5218" cy="1119.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="147" x="5227" y="1122.7339">getInstance() : LayoutFactory*</text><ellipse cx="5218" cy="1132.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="5227" y="1135.5386">createLayout(const string&amp; className) : shared_ptr&lt;Layout&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5215" y="1142.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="5227" y="1148.3433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[7e20e022571e30ec1001cf6eabd7f3e2]
class Model--><rect codeLine="720" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="291.2891" id="Model" style="stroke:#A80036;stroke-width:1.5;" width="278" x="3528" y="934"/><ellipse cx="3645.25" cy="950" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3648.2031,955 L3647.375,952.1094 L3643.1875,952.1094 L3642.3438,955 L3639.75,955 L3643.6875,942.8125 L3646.8438,942.8125 L3650.7969,955 L3648.2031,955 Z M3646.7656,949.9531 L3646,947.2969 Q3645.9375,947.1406 3645.8438,946.8125 Q3645.75,946.4688 3645.625,946.0625 Q3645.5156,945.6406 3645.4063,945.2344 Q3645.3125,944.8125 3645.2813,944.5313 Q3645.25,944.7031 3645.1875,944.9531 Q3645.1406,945.2031 3645.0625,945.4844 Q3645,945.7656 3644.9219,946.0469 Q3644.8438,946.3281 3644.7813,946.5781 Q3644.7188,946.8281 3644.6563,947.0156 Q3644.6094,947.2031 3644.5781,947.2969 L3643.8125,949.9531 L3646.7656,949.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="35" x="3665.75" y="954.1543">Model</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3529" x2="3805" y1="966" y2="966"/><polygon fill="none" points="3539,972,3543,976,3539,980,3535,976" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3548" y="980.2104">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="3539,984.8047,3543,988.8047,3539,992.8047,3535,988.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="3548" y="993.0151">connections_ : shared_ptr&lt;Connections&gt;</text><polygon fill="none" points="3539,997.6094,3543,1001.6094,3539,1005.6094,3535,1001.6094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3548" y="1005.8198">recorder_ : shared_ptr&lt;IRecorder&gt;</text><polygon fill="none" points="3539,1010.4141,3543,1014.4141,3539,1018.4141,3535,1014.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3548" y="1018.6245">layout_ : shared_ptr&lt;Layout&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3529" x2="3805" y1="1025.2188" y2="1025.2188"/><ellipse cx="3539" cy="1036.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="3548" y="1039.4292">Model()</text><ellipse cx="3539" cy="1049.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="3548" y="1052.2339">~Model()</text><ellipse cx="3539" cy="1061.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="3548" y="1065.0386">getConnections() : shared_ptr&lt;Connections&gt; {query}</text><ellipse cx="3539" cy="1074.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3548" y="1077.8433">getRecorder() : shared_ptr&lt;IRecorder&gt; {query}</text><ellipse cx="3539" cy="1087.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="3548" y="1090.6479">getLayout() : shared_ptr&lt;Layout&gt; {query}</text><ellipse cx="3539" cy="1100.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="76" x="3548" y="1103.4526">advance() : void</text><polygon fill="#FFFF44" points="3539,1108.0469,3543,1112.0469,3539,1116.0469,3535,1112.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="111" x="3548" y="1116.2573">copyCPUtoGPU() : void</text><polygon fill="#FFFF44" points="3539,1120.8516,3543,1124.8516,3539,1128.8516,3535,1124.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="111" x="3548" y="1129.062">copyGPUtoCPU() : void</text><polygon fill="#FFFF44" points="3539,1133.6563,3543,1137.6563,3539,1141.6563,3535,1137.6563" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3548" y="1141.8667">createAllVertices() : void</text><ellipse cx="3539" cy="1151.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="60" x="3548" y="1154.6714">finish() : void</text><polygon fill="#FFFF44" points="3539,1159.2656,3543,1163.2656,3539,1167.2656,3535,1163.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3548" y="1167.4761">logSimStep() : void {query}</text><ellipse cx="3539" cy="1177.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3548" y="1180.2808">saveResults() : void</text><ellipse cx="3539" cy="1189.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3548" y="1193.0854">setupSim() : void</text><ellipse cx="3539" cy="1202.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="128" x="3548" y="1205.8901">updateConnections() : void</text><ellipse cx="3539" cy="1215.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3548" y="1218.6948">updateHistory() : void</text><!--MD5=[314e3b7c2db0a5a356d5ece57f37d58b]
class OperationManager--><rect codeLine="743" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="OperationManager" style="stroke:#A80036;stroke-width:1.5;" width="473" x="5936.5" y="365.5"/><ellipse cx="6116.75" cy="381.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M6116.6875,377.3281 Q6115.9375,377.3281 6115.375,377.625 Q6114.8125,377.9063 6114.4219,378.4375 Q6114.0313,378.9688 6113.8281,379.75 Q6113.6406,380.5156 6113.6406,381.4688 Q6113.6406,382.4375 6113.8125,383.2031 Q6114,383.9531 6114.3594,384.4688 Q6114.7344,384.9844 6115.3125,385.2656 Q6115.8906,385.5313 6116.6875,385.5313 Q6117.4219,385.5313 6118.1563,385.3594 Q6118.9063,385.1875 6119.7813,384.8906 L6119.7813,387.0469 Q6119.375,387.2031 6118.9844,387.3281 Q6118.5938,387.4375 6118.1875,387.5156 Q6117.7813,387.5938 6117.3594,387.625 Q6116.9375,387.6719 6116.4375,387.6719 Q6115.0313,387.6719 6114,387.2188 Q6112.9844,386.7656 6112.3125,385.9531 Q6111.6406,385.1406 6111.3125,384 Q6110.9844,382.8438 6110.9844,381.4531 Q6110.9844,380.0781 6111.3594,378.9219 Q6111.7344,377.7656 6112.4531,376.9375 Q6113.1719,376.1094 6114.2344,375.6563 Q6115.2969,375.1875 6116.6875,375.1875 Q6117.5938,375.1875 6118.5,375.4219 Q6119.4063,375.6406 6120.2344,376.0469 L6119.4063,378.1406 Q6118.7188,377.8125 6118.0313,377.5781 Q6117.3438,377.3281 6116.6875,377.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="6137.25" y="385.6543">OperationManager</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5937.5" x2="6408.5" y1="397.5" y2="397.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5944.5" y="405.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="5956.5" y="411.7104">functionList_ : list&lt;unique_ptr&lt;IFunctionNode&gt;&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5944.5" y="418.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="5956.5" y="424.5151">logger_ : log4cplus::Logger</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5937.5" x2="6408.5" y1="431.1094" y2="431.1094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5944.5" y="439.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="5956.5" y="445.3198">OperationManager()</text><ellipse cx="5947.5" cy="454.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="5956.5" y="458.1245">~OperationManager()</text><ellipse cx="5947.5" cy="467.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="173" x="5956.5" y="470.9292">getInstance() : OperationManager&amp;</text><ellipse cx="5947.5" cy="480.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="5956.5" y="483.7339">operationToString(const Operations::op&amp; operation) : string {query}</text><ellipse cx="5947.5" cy="493.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="5956.5" y="496.5386">executeOperation(const Operations::op&amp; operation) : void {query}</text><ellipse cx="5947.5" cy="506.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="447" x="5956.5" y="509.3433">registerOperation(const Operations::op&amp; operation, const function&lt;void ( )&gt;&amp; function) : void</text><!--MD5=[fdf81c1c7218c7a86b85d500a2db5e87]
class Operations--><rect codeLine="755" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="48" id="Operations" style="stroke:#A80036;stroke-width:1.5;" width="93" x="6126.5" y="1458"/><ellipse cx="6141.5" cy="1474" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M6141.4375,1469.8281 Q6140.6875,1469.8281 6140.125,1470.125 Q6139.5625,1470.4063 6139.1719,1470.9375 Q6138.7813,1471.4688 6138.5781,1472.25 Q6138.3906,1473.0156 6138.3906,1473.9688 Q6138.3906,1474.9375 6138.5625,1475.7031 Q6138.75,1476.4531 6139.1094,1476.9688 Q6139.4844,1477.4844 6140.0625,1477.7656 Q6140.6406,1478.0313 6141.4375,1478.0313 Q6142.1719,1478.0313 6142.9063,1477.8594 Q6143.6563,1477.6875 6144.5313,1477.3906 L6144.5313,1479.5469 Q6144.125,1479.7031 6143.7344,1479.8281 Q6143.3438,1479.9375 6142.9375,1480.0156 Q6142.5313,1480.0938 6142.1094,1480.125 Q6141.6875,1480.1719 6141.1875,1480.1719 Q6139.7813,1480.1719 6138.75,1479.7188 Q6137.7344,1479.2656 6137.0625,1478.4531 Q6136.3906,1477.6406 6136.0625,1476.5 Q6135.7344,1475.3438 6135.7344,1473.9531 Q6135.7344,1472.5781 6136.1094,1471.4219 Q6136.4844,1470.2656 6137.2031,1469.4375 Q6137.9219,1468.6094 6138.9844,1468.1563 Q6140.0469,1467.6875 6141.4375,1467.6875 Q6142.3438,1467.6875 6143.25,1467.9219 Q6144.1563,1468.1406 6144.9844,1468.5469 L6144.1563,1470.6406 Q6143.4688,1470.3125 6142.7813,1470.0781 Q6142.0938,1469.8281 6141.4375,1469.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="6155.5" y="1478.1543">Operations</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6127.5" x2="6218.5" y1="1490" y2="1490"/><line style="stroke:#A80036;stroke-width:1.5;" x1="6127.5" x2="6218.5" y1="1498" y2="1498"/><!--MD5=[2d167d26ebdee84d71997832bfe86c3e]
class RecorderFactory--><rect codeLine="759" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="RecorderFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="4012" y="1004.5"/><ellipse cx="4145.75" cy="1020.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4145.6875,1016.3281 Q4144.9375,1016.3281 4144.375,1016.625 Q4143.8125,1016.9063 4143.4219,1017.4375 Q4143.0313,1017.9688 4142.8281,1018.75 Q4142.6406,1019.5156 4142.6406,1020.4688 Q4142.6406,1021.4375 4142.8125,1022.2031 Q4143,1022.9531 4143.3594,1023.4688 Q4143.7344,1023.9844 4144.3125,1024.2656 Q4144.8906,1024.5313 4145.6875,1024.5313 Q4146.4219,1024.5313 4147.1563,1024.3594 Q4147.9063,1024.1875 4148.7813,1023.8906 L4148.7813,1026.0469 Q4148.375,1026.2031 4147.9844,1026.3281 Q4147.5938,1026.4375 4147.1875,1026.5156 Q4146.7813,1026.5938 4146.3594,1026.625 Q4145.9375,1026.6719 4145.4375,1026.6719 Q4144.0313,1026.6719 4143,1026.2188 Q4141.9844,1025.7656 4141.3125,1024.9531 Q4140.6406,1024.1406 4140.3125,1023 Q4139.9844,1021.8438 4139.9844,1020.4531 Q4139.9844,1019.0781 4140.3594,1017.9219 Q4140.7344,1016.7656 4141.4531,1015.9375 Q4142.1719,1015.1094 4143.2344,1014.6563 Q4144.2969,1014.1875 4145.6875,1014.1875 Q4146.5938,1014.1875 4147.5,1014.4219 Q4148.4063,1014.6406 4149.2344,1015.0469 L4148.4063,1017.1406 Q4147.7188,1016.8125 4147.0313,1016.5781 Q4146.3438,1016.3281 4145.6875,1016.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="4166.25" y="1024.6543">RecorderFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4013" x2="4375" y1="1036.5" y2="1036.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4020" y="1044.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="4032" y="1050.7104">createFunctions : RecorderFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4020" y="1057.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="4032" y="1063.5151">recorderInstance : shared_ptr&lt;IRecorder&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4013" x2="4375" y1="1070.1094" y2="1070.1094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4020" y="1078.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="4032" y="1084.3198">RecorderFactory()</text><ellipse cx="4023" cy="1093.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="4032" y="1097.1245">~RecorderFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4020" y="1103.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="4032" y="1109.9292">invokeCreateFunction(const string&amp; className) : IRecorder*</text><ellipse cx="4023" cy="1119.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="158" x="4032" y="1122.7339">getInstance() : RecorderFactory*</text><ellipse cx="4023" cy="1132.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="4032" y="1135.5386">createRecorder(const string&amp; className) : shared_ptr&lt;IRecorder&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4020" y="1142.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="4032" y="1148.3433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[e78d3bd29d68b8fbdb4aae8710e3db25]
class Simulator--><rect codeLine="771" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="867.5" id="Simulator" style="stroke:#A80036;stroke-width:1.5;" width="302" x="3516" y="7"/><ellipse cx="3636.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3636.1875,18.8281 Q3635.4375,18.8281 3634.875,19.125 Q3634.3125,19.4063 3633.9219,19.9375 Q3633.5313,20.4688 3633.3281,21.25 Q3633.1406,22.0156 3633.1406,22.9688 Q3633.1406,23.9375 3633.3125,24.7031 Q3633.5,25.4531 3633.8594,25.9688 Q3634.2344,26.4844 3634.8125,26.7656 Q3635.3906,27.0313 3636.1875,27.0313 Q3636.9219,27.0313 3637.6563,26.8594 Q3638.4063,26.6875 3639.2813,26.3906 L3639.2813,28.5469 Q3638.875,28.7031 3638.4844,28.8281 Q3638.0938,28.9375 3637.6875,29.0156 Q3637.2813,29.0938 3636.8594,29.125 Q3636.4375,29.1719 3635.9375,29.1719 Q3634.5313,29.1719 3633.5,28.7188 Q3632.4844,28.2656 3631.8125,27.4531 Q3631.1406,26.6406 3630.8125,25.5 Q3630.4844,24.3438 3630.4844,22.9531 Q3630.4844,21.5781 3630.8594,20.4219 Q3631.2344,19.2656 3631.9531,18.4375 Q3632.6719,17.6094 3633.7344,17.1563 Q3634.7969,16.6875 3636.1875,16.6875 Q3637.0938,16.6875 3638,16.9219 Q3638.9063,17.1406 3639.7344,17.5469 L3638.9063,19.6406 Q3638.2188,19.3125 3637.5313,19.0781 Q3636.8438,18.8281 3636.1875,18.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="53" x="3656.75" y="27.1543">Simulator</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3517" x2="3817" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="47"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="3536" y="53.2104">deltaT_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="59.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="3536" y="66.0151">epochDuration_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="72.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3536" y="78.8198">maxRate_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="85.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3536" y="91.6245">short_timer : Timer</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="98.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="3536" y="104.4292">timer : Timer</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="111.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="3536" y="117.2339">rgEndogenouslyActiveNeuronMap_ : bool*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="123.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="3536" y="130.0386">currentEpoch_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="136.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="3536" y="142.8433">height_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="149.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3536" y="155.6479">maxEdgesPerVertex_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="162.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3536" y="168.4526">maxFiringRate_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="175.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="3536" y="181.2573">numEpochs_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="187.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="3536" y="194.062">totalNeurons_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="200.6563"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="3536" y="206.8667">width_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="213.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3536" y="219.6714">consoleLogger_ : log4cplus::Logger</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="226.2656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3536" y="232.4761">edgeLogger_ : log4cplus::Logger</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="239.0703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3536" y="245.2808">fileLogger_ : log4cplus::Logger</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="251.875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="3536" y="258.0854">initRngSeed_ : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="264.6797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3536" y="270.8901">noiseRngSeed_ : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="277.4844"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="3536" y="283.6948">model_ : shared_ptr&lt;Model&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="290.2891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3536" y="296.4995">configFileName_ : string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="303.0938"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3536" y="309.3042">deserializationFileName_ : string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="315.8984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3536" y="322.1089">serializationFileName_ : string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="328.7031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3536" y="334.9136">stimulusFileName_ : string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="341.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3536" y="347.7183">rgNeuronTypeMap_ : vertexType*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3517" x2="3817" y1="354.3125" y2="354.3125"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="362.3125"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="3536" y="368.5229">Simulator()</text><ellipse cx="3527" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="3536" y="381.3276">~Simulator()</text><ellipse cx="3527" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3536" y="394.1323">getDeltaT() : BGFLOAT {query}</text><ellipse cx="3527" cy="403.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="3536" y="406.937">getEpochDuration() : BGFLOAT {query}</text><ellipse cx="3527" cy="416.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3536" y="419.7417">getMaxRate() : BGFLOAT {query}</text><ellipse cx="3527" cy="429.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="126" x="3536" y="432.5464">getInstance() : Simulator&amp;</text><ellipse cx="3527" cy="442.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3536" y="445.3511">getShort_timer() : Timer</text><ellipse cx="3527" cy="454.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3536" y="458.1558">getTimer() : Timer</text><ellipse cx="3527" cy="467.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3536" y="470.9604">instantiateSimulatorObjects() : bool</text><ellipse cx="3527" cy="480.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="3536" y="483.7651">getRgEndogenouslyActiveNeuronMap() : bool* {query}</text><ellipse cx="3527" cy="493.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3536" y="496.5698">getCurrentStep() : int {query}</text><ellipse cx="3527" cy="506.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3536" y="509.3745">getHeight() : int {query}</text><ellipse cx="3527" cy="518.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="3536" y="522.1792">getMaxEdgesPerVertex() : int {query}</text><ellipse cx="3527" cy="531.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="3536" y="534.9839">getMaxFiringRate() : int {query}</text><ellipse cx="3527" cy="544.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="3536" y="547.7886">getNumEpochs() : int {query}</text><ellipse cx="3527" cy="557.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3536" y="560.5933">getTotalVertices() : int {query}</text><ellipse cx="3527" cy="570.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3536" y="573.3979">getWidth() : int {query}</text><ellipse cx="3527" cy="582.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3536" y="586.2026">getInitRngSeed() : long {query}</text><ellipse cx="3527" cy="595.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3536" y="599.0073">getNoiseRngSeed() : long {query}</text><ellipse cx="3527" cy="608.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="3536" y="611.812">getModel() : shared_ptr&lt;Model&gt; {query}</text><ellipse cx="3527" cy="621.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="3536" y="624.6167">getConfigFileName() : string {query}</text><ellipse cx="3527" cy="634.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="3536" y="637.4214">getDeserializationFileName() : string {query}</text><ellipse cx="3527" cy="647.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3536" y="650.2261">getSerializationFileName() : string {query}</text><ellipse cx="3527" cy="659.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="3536" y="663.0308">getStimulusFileName() : string {query}</text><ellipse cx="3527" cy="672.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3536" y="675.8354">getRgNeuronTypeMap() : vertexType* {query}</text><ellipse cx="3527" cy="685.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="3536" y="688.6401">advanceEpoch(const int&amp; currentEpoch) : void {query}</text><ellipse cx="3527" cy="698.2344" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3536" y="701.4448">copyCPUSynapseToGPU() : void</text><ellipse cx="3527" cy="711.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3536" y="714.2495">copyGPUSynapseToCPU() : void</text><ellipse cx="3527" cy="723.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="3536" y="727.0542">finish() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3524" y="733.6484"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3536" y="739.8589">freeResources() : void</text><ellipse cx="3527" cy="749.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="3536" y="752.6636">loadParameters() : void</text><ellipse cx="3527" cy="762.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3536" y="765.4683">printParameters() : void {query}</text><ellipse cx="3527" cy="775.0625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="3536" y="778.2729">reset() : void</text><ellipse cx="3527" cy="787.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3536" y="791.0776">saveResults() : void {query}</text><ellipse cx="3527" cy="800.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="3536" y="803.8823">setConfigFileName(const string&amp; fileName) : void</text><ellipse cx="3527" cy="813.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="3536" y="816.687">setDeserializationFileName(const string&amp; fileName) : void</text><ellipse cx="3527" cy="826.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="3536" y="829.4917">setSerializationFileName(const string&amp; fileName) : void</text><ellipse cx="3527" cy="839.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="3536" y="842.2964">setStimulusFileName(const string&amp; fileName) : void</text><ellipse cx="3527" cy="851.8906" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="3536" y="855.1011">setup() : void</text><ellipse cx="3527" cy="864.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3536" y="867.9058">simulate() : void</text><!--MD5=[cc1c410fe2850b6da0ea695abfcea755]
class VerticesFactory--><rect codeLine="839" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="VerticesFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="4738" y="1407"/><ellipse cx="4874.25" cy="1423" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4874.1875,1418.8281 Q4873.4375,1418.8281 4872.875,1419.125 Q4872.3125,1419.4063 4871.9219,1419.9375 Q4871.5313,1420.4688 4871.3281,1421.25 Q4871.1406,1422.0156 4871.1406,1422.9688 Q4871.1406,1423.9375 4871.3125,1424.7031 Q4871.5,1425.4531 4871.8594,1425.9688 Q4872.2344,1426.4844 4872.8125,1426.7656 Q4873.3906,1427.0313 4874.1875,1427.0313 Q4874.9219,1427.0313 4875.6563,1426.8594 Q4876.4063,1426.6875 4877.2813,1426.3906 L4877.2813,1428.5469 Q4876.875,1428.7031 4876.4844,1428.8281 Q4876.0938,1428.9375 4875.6875,1429.0156 Q4875.2813,1429.0938 4874.8594,1429.125 Q4874.4375,1429.1719 4873.9375,1429.1719 Q4872.5313,1429.1719 4871.5,1428.7188 Q4870.4844,1428.2656 4869.8125,1427.4531 Q4869.1406,1426.6406 4868.8125,1425.5 Q4868.4844,1424.3438 4868.4844,1422.9531 Q4868.4844,1421.5781 4868.8594,1420.4219 Q4869.2344,1419.2656 4869.9531,1418.4375 Q4870.6719,1417.6094 4871.7344,1417.1563 Q4872.7969,1416.6875 4874.1875,1416.6875 Q4875.0938,1416.6875 4876,1416.9219 Q4876.9063,1417.1406 4877.7344,1417.5469 L4876.9063,1419.6406 Q4876.2188,1419.3125 4875.5313,1419.0781 Q4874.8438,1418.8281 4874.1875,1418.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="4894.75" y="1427.1543">VerticesFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4739" x2="5101" y1="1439" y2="1439"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4746" y="1447"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="4758" y="1453.2104">createFunctions : VerticesFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4746" y="1459.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="4758" y="1466.0151">verticesInstance : shared_ptr&lt;AllVertices&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4739" x2="5101" y1="1472.6094" y2="1472.6094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4746" y="1480.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="4758" y="1486.8198">VerticesFactory()</text><ellipse cx="4749" cy="1496.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="4758" y="1499.6245">~VerticesFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4746" y="1506.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="4758" y="1512.4292">invokeCreateFunction(const string&amp; className) : AllVertices*</text><ellipse cx="4749" cy="1522.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="153" x="4758" y="1525.2339">getInstance() : VerticesFactory*</text><ellipse cx="4749" cy="1534.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="4758" y="1538.0386">createVertices(const string&amp; className) : shared_ptr&lt;AllVertices&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4746" y="1544.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="4758" y="1550.8433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[70954963b39295522525212df8952a0c]
class XmlGrowthRecorder--><rect codeLine="851" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="201.6563" id="XmlGrowthRecorder" style="stroke:#A80036;stroke-width:1.5;" width="405" x="3511.5" y="2410"/><ellipse cx="3655.25" cy="2426" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3655.1875,2421.8281 Q3654.4375,2421.8281 3653.875,2422.125 Q3653.3125,2422.4063 3652.9219,2422.9375 Q3652.5313,2423.4688 3652.3281,2424.25 Q3652.1406,2425.0156 3652.1406,2425.9688 Q3652.1406,2426.9375 3652.3125,2427.7031 Q3652.5,2428.4531 3652.8594,2428.9688 Q3653.2344,2429.4844 3653.8125,2429.7656 Q3654.3906,2430.0313 3655.1875,2430.0313 Q3655.9219,2430.0313 3656.6563,2429.8594 Q3657.4063,2429.6875 3658.2813,2429.3906 L3658.2813,2431.5469 Q3657.875,2431.7031 3657.4844,2431.8281 Q3657.0938,2431.9375 3656.6875,2432.0156 Q3656.2813,2432.0938 3655.8594,2432.125 Q3655.4375,2432.1719 3654.9375,2432.1719 Q3653.5313,2432.1719 3652.5,2431.7188 Q3651.4844,2431.2656 3650.8125,2430.4531 Q3650.1406,2429.6406 3649.8125,2428.5 Q3649.4844,2427.3438 3649.4844,2425.9531 Q3649.4844,2424.5781 3649.8594,2423.4219 Q3650.2344,2422.2656 3650.9531,2421.4375 Q3651.6719,2420.6094 3652.7344,2420.1563 Q3653.7969,2419.6875 3655.1875,2419.6875 Q3656.0938,2419.6875 3657,2419.9219 Q3657.9063,2420.1406 3658.7344,2420.5469 L3657.9063,2422.6406 Q3657.2188,2422.3125 3656.5313,2422.0781 Q3655.8438,2421.8281 3655.1875,2421.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="109" x="3675.75" y="2430.1543">XmlGrowthRecorder</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3512.5" x2="3915.5" y1="2442" y2="2442"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3519.5" y="2450"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3531.5" y="2456.2104">radiiHistory_ : CompleteMatrix</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3519.5" y="2462.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3531.5" y="2469.0151">ratesHistory_ : CompleteMatrix</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3512.5" x2="3915.5" y1="2475.6094" y2="2475.6094"/><ellipse cx="3522.5" cy="2486.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3531.5" y="2489.8198">XmlGrowthRecorder()</text><ellipse cx="3522.5" cy="2499.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="3531.5" y="2502.6245">~XmlGrowthRecorder()</text><ellipse cx="3522.5" cy="2512.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="101" x="3531.5" y="2515.4292">Create() : IRecorder*</text><ellipse cx="3522.5" cy="2525.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3531.5" y="2528.2339">compileHistories(AllVertices&amp; neurons) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3519.5" y="2534.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="3531.5" y="2541.0386">getStarterNeuronMatrix(VectorMatrix&amp; matrix, const bool* starterMap) : void</text><ellipse cx="3522.5" cy="2550.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3531.5" y="2553.8433">getValues() : void</text><ellipse cx="3522.5" cy="2563.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="3531.5" y="2566.6479">initDefaultValues() : void</text><ellipse cx="3522.5" cy="2576.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3531.5" y="2579.4526">initValues() : void</text><ellipse cx="3522.5" cy="2589.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3531.5" y="2592.2573">printParameters() : void</text><ellipse cx="3522.5" cy="2601.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="3531.5" y="2605.062">saveSimData(const AllVertices&amp; neurons) : void</text><!--MD5=[e2fde7c48d35c1cbf959be266268237c]
class XmlRecorder--><rect codeLine="867" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="214.4609" id="XmlRecorder" style="stroke:#A80036;stroke-width:1.5;" width="405" x="3677.5" y="1918.5"/><ellipse cx="3840.75" cy="1934.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3840.6875,1930.3281 Q3839.9375,1930.3281 3839.375,1930.625 Q3838.8125,1930.9063 3838.4219,1931.4375 Q3838.0313,1931.9688 3837.8281,1932.75 Q3837.6406,1933.5156 3837.6406,1934.4688 Q3837.6406,1935.4375 3837.8125,1936.2031 Q3838,1936.9531 3838.3594,1937.4688 Q3838.7344,1937.9844 3839.3125,1938.2656 Q3839.8906,1938.5313 3840.6875,1938.5313 Q3841.4219,1938.5313 3842.1563,1938.3594 Q3842.9063,1938.1875 3843.7813,1937.8906 L3843.7813,1940.0469 Q3843.375,1940.2031 3842.9844,1940.3281 Q3842.5938,1940.4375 3842.1875,1940.5156 Q3841.7813,1940.5938 3841.3594,1940.625 Q3840.9375,1940.6719 3840.4375,1940.6719 Q3839.0313,1940.6719 3838,1940.2188 Q3836.9844,1939.7656 3836.3125,1938.9531 Q3835.6406,1938.1406 3835.3125,1937 Q3834.9844,1935.8438 3834.9844,1934.4531 Q3834.9844,1933.0781 3835.3594,1931.9219 Q3835.7344,1930.7656 3836.4531,1929.9375 Q3837.1719,1929.1094 3838.2344,1928.6563 Q3839.2969,1928.1875 3840.6875,1928.1875 Q3841.5938,1928.1875 3842.5,1928.4219 Q3843.4063,1928.6406 3844.2344,1929.0469 L3843.4063,1931.1406 Q3842.7188,1930.8125 3842.0313,1930.5781 Q3841.3438,1930.3281 3840.6875,1930.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="3861.25" y="1938.6543">XmlRecorder</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3678.5" x2="4081.5" y1="1950.5" y2="1950.5"/><polygon fill="none" points="3688.5,1956.5,3692.5,1960.5,3688.5,1964.5,3684.5,1960.5" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3697.5" y="1964.7104">spikesHistory_ : VectorMatrix</text><polygon fill="none" points="3688.5,1969.3047,3692.5,1973.3047,3688.5,1977.3047,3684.5,1973.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3697.5" y="1977.5151">resultOut_ : ofstream</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3678.5" x2="4081.5" y1="1984.1094" y2="1984.1094"/><ellipse cx="3688.5" cy="1995.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3697.5" y="1998.3198">XmlRecorder()</text><ellipse cx="3688.5" cy="2007.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="101" x="3697.5" y="2011.1245">Create() : IRecorder*</text><ellipse cx="3688.5" cy="2020.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3697.5" y="2023.9292">compileHistories(AllVertices&amp; vertices) : void</text><polygon fill="#FFFF44" points="3688.5,2028.5234,3692.5,2032.5234,3688.5,2036.5234,3684.5,2032.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="3697.5" y="2036.7339">getStarterNeuronMatrix(VectorMatrix&amp; matrix, const bool* starterMap) : void</text><ellipse cx="3688.5" cy="2046.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3697.5" y="2049.5386">getValues() : void</text><ellipse cx="3688.5" cy="2059.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="3697.5" y="2062.3433">init() : void</text><ellipse cx="3688.5" cy="2071.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="3697.5" y="2075.1479">initDefaultValues() : void</text><ellipse cx="3688.5" cy="2084.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3697.5" y="2087.9526">initValues() : void</text><ellipse cx="3688.5" cy="2097.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3697.5" y="2100.7573">printParameters() : void</text><ellipse cx="3688.5" cy="2110.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="3697.5" y="2113.562">saveSimData(const AllVertices&amp; vertices) : void</text><ellipse cx="3688.5" cy="2123.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="3697.5" y="2126.3667">term() : void</text><!--MD5=[e01fc12d2ca5b032aa39c4fc4bc72679]
class XmlSTDPRecorder--><rect codeLine="884" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="227.2656" id="XmlSTDPRecorder" style="stroke:#A80036;stroke-width:1.5;" width="405" x="3951.5" y="2397.5"/><ellipse cx="4100.25" cy="2413.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4100.1875,2409.3281 Q4099.4375,2409.3281 4098.875,2409.625 Q4098.3125,2409.9063 4097.9219,2410.4375 Q4097.5313,2410.9688 4097.3281,2411.75 Q4097.1406,2412.5156 4097.1406,2413.4688 Q4097.1406,2414.4375 4097.3125,2415.2031 Q4097.5,2415.9531 4097.8594,2416.4688 Q4098.2344,2416.9844 4098.8125,2417.2656 Q4099.3906,2417.5313 4100.1875,2417.5313 Q4100.9219,2417.5313 4101.6563,2417.3594 Q4102.4063,2417.1875 4103.2813,2416.8906 L4103.2813,2419.0469 Q4102.875,2419.2031 4102.4844,2419.3281 Q4102.0938,2419.4375 4101.6875,2419.5156 Q4101.2813,2419.5938 4100.8594,2419.625 Q4100.4375,2419.6719 4099.9375,2419.6719 Q4098.5313,2419.6719 4097.5,2419.2188 Q4096.4844,2418.7656 4095.8125,2417.9531 Q4095.1406,2417.1406 4094.8125,2416 Q4094.4844,2414.8438 4094.4844,2413.4531 Q4094.4844,2412.0781 4094.8594,2410.9219 Q4095.2344,2409.7656 4095.9531,2408.9375 Q4096.6719,2408.1094 4097.7344,2407.6563 Q4098.7969,2407.1875 4100.1875,2407.1875 Q4101.0938,2407.1875 4102,2407.4219 Q4102.9063,2407.6406 4103.7344,2408.0469 L4102.9063,2410.1406 Q4102.2188,2409.8125 4101.5313,2409.5781 Q4100.8438,2409.3281 4100.1875,2409.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="99" x="4120.75" y="2417.6543">XmlSTDPRecorder</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3952.5" x2="4355.5" y1="2429.5" y2="2429.5"/><polygon fill="none" points="3962.5,2435.5,3966.5,2439.5,3962.5,2443.5,3958.5,2439.5" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="3971.5" y="2443.7104">weightsHistory_ : vector&lt;vector&lt;BGFLOAT&gt;&gt;</text><polygon fill="none" points="3962.5,2448.3047,3966.5,2452.3047,3962.5,2456.3047,3958.5,2452.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3971.5" y="2456.5151">destNeuronIndexHistory_ : vector&lt;vector&lt;int&gt;&gt;</text><polygon fill="none" points="3962.5,2461.1094,3966.5,2465.1094,3962.5,2469.1094,3958.5,2465.1094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3971.5" y="2469.3198">sourceNeuronIndexHistory_ : vector&lt;vector&lt;int&gt;&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3952.5" x2="4355.5" y1="2475.9141" y2="2475.9141"/><ellipse cx="3962.5" cy="2486.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3971.5" y="2490.1245">XmlSTDPRecorder()</text><ellipse cx="3962.5" cy="2499.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3971.5" y="2502.9292">~XmlSTDPRecorder()</text><ellipse cx="3962.5" cy="2512.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="101" x="3971.5" y="2515.7339">Create() : IRecorder*</text><ellipse cx="3962.5" cy="2525.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="3971.5" y="2528.5386">toXML(string name, vector&lt;vector&lt;BGFLOAT&gt;&gt; MatrixToWrite) : string {query}</text><ellipse cx="3962.5" cy="2538.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="3971.5" y="2541.3433">toXML(string name, vector&lt;vector&lt;int&gt;&gt; MatrixToWrite) : string {query}</text><ellipse cx="3962.5" cy="2550.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3971.5" y="2554.1479">compileHistories(AllVertices&amp; neurons) : void</text><ellipse cx="3962.5" cy="2563.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3971.5" y="2566.9526">getValues() : void</text><ellipse cx="3962.5" cy="2576.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="3971.5" y="2579.7573">initDefaultValues() : void</text><ellipse cx="3962.5" cy="2589.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3971.5" y="2592.562">initValues() : void</text><ellipse cx="3962.5" cy="2602.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3971.5" y="2605.3667">printParameters() : void</text><ellipse cx="3962.5" cy="2614.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="3971.5" y="2618.1714">saveSimData(const AllVertices&amp; neurons) : void</text><!--MD5=[ee90c8bb66c047e800df5fa57f6b4f59]
class Operations::op--><rect codeLine="902" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="150.4375" id="Operations::op" style="stroke:#A80036;stroke-width:1.5;" width="125" x="6160.5" y="1950.5"/><ellipse cx="6180.9" cy="1966.5" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M6183.9156,1972.5 L6176.9313,1972.5 L6176.9313,1960.3594 L6183.9156,1960.3594 L6183.9156,1962.4688 L6179.4938,1962.4688 L6179.4938,1965.1406 L6183.6031,1965.1406 L6183.6031,1967.25 L6179.4938,1967.25 L6179.4938,1970.375 L6183.9156,1970.375 L6183.9156,1972.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="81" x="6196.1" y="1970.6543">Operations::op</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6161.5" x2="6284.5" y1="1982.5" y2="1982.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="6166.5" y="1996.7104">copyFromGPU</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="6166.5" y="2009.5151">copyToGPU</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="6166.5" y="2022.3198">deallocateGPUMemory</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="6166.5" y="2035.1245">deserialize</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="6166.5" y="2047.9292">loadParameters</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="6166.5" y="2060.7339">printParameters</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="6166.5" y="2073.5386">restoreToDefault</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="6166.5" y="2086.3433">serialize</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6161.5" x2="6284.5" y1="2092.9375" y2="2092.9375"/><!--MD5=[2c8a843ca32eecec980159abf8666d97]
class enumClassSynapses--><rect codeLine="914" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="112.0234" id="enumClassSynapses" style="stroke:#A80036;stroke-width:1.5;" width="160" x="6445" y="384.5"/><ellipse cx="6466.75" cy="400.5" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M6469.7656,406.5 L6462.7813,406.5 L6462.7813,394.3594 L6469.7656,394.3594 L6469.7656,396.4688 L6465.3438,396.4688 L6465.3438,399.1406 L6469.4531,399.1406 L6469.4531,401.25 L6465.3438,401.25 L6465.3438,404.375 L6469.7656,404.375 L6469.7656,406.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="113" x="6482.25" y="404.6543">enumClassSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6446" x2="6604" y1="416.5" y2="416.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="6451" y="430.7104">classAllDSSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="6451" y="443.5151">classAllDynamicSTDPSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="6451" y="456.3198">classAllSTDPSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="6451" y="469.1245">classAllSpikingSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="6451" y="481.9292">undefClassSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6446" x2="6604" y1="488.5234" y2="488.5234"/><!--MD5=[12eed8bfdcfc08849f14b9c8d25e6e94]
class AllDSSynapsesDeviceProperties--><rect codeLine="923" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="124.8281" id="AllDSSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="204" x="3019" y="2448.5"/><ellipse cx="3034" cy="2464.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3033.9375,2460.3281 Q3033.1875,2460.3281 3032.625,2460.625 Q3032.0625,2460.9063 3031.6719,2461.4375 Q3031.2813,2461.9688 3031.0781,2462.75 Q3030.8906,2463.5156 3030.8906,2464.4688 Q3030.8906,2465.4375 3031.0625,2466.2031 Q3031.25,2466.9531 3031.6094,2467.4688 Q3031.9844,2467.9844 3032.5625,2468.2656 Q3033.1406,2468.5313 3033.9375,2468.5313 Q3034.6719,2468.5313 3035.4063,2468.3594 Q3036.1563,2468.1875 3037.0313,2467.8906 L3037.0313,2470.0469 Q3036.625,2470.2031 3036.2344,2470.3281 Q3035.8438,2470.4375 3035.4375,2470.5156 Q3035.0313,2470.5938 3034.6094,2470.625 Q3034.1875,2470.6719 3033.6875,2470.6719 Q3032.2813,2470.6719 3031.25,2470.2188 Q3030.2344,2469.7656 3029.5625,2468.9531 Q3028.8906,2468.1406 3028.5625,2467 Q3028.2344,2465.8438 3028.2344,2464.4531 Q3028.2344,2463.0781 3028.6094,2461.9219 Q3028.9844,2460.7656 3029.7031,2459.9375 Q3030.4219,2459.1094 3031.4844,2458.6563 Q3032.5469,2458.1875 3033.9375,2458.1875 Q3034.8438,2458.1875 3035.75,2458.4219 Q3036.6563,2458.6406 3037.4844,2459.0469 L3036.6563,2461.1406 Q3035.9688,2460.8125 3035.2813,2460.5781 Q3034.5938,2460.3281 3033.9375,2460.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="172" x="3048" y="2468.6543">AllDSSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3020" x2="3222" y1="2480.5" y2="2480.5"/><ellipse cx="3030" cy="2491.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="3039" y="2494.7104">D_ : BGFLOAT*</text><ellipse cx="3030" cy="2504.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3039" y="2507.5151">F_ : BGFLOAT*</text><ellipse cx="3030" cy="2517.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="3039" y="2520.3198">U_ : BGFLOAT*</text><ellipse cx="3030" cy="2529.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="3039" y="2533.1245">r_ : BGFLOAT*</text><ellipse cx="3030" cy="2542.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3039" y="2545.9292">u_ : BGFLOAT*</text><ellipse cx="3030" cy="2555.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="3039" y="2558.7339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3020" x2="3222" y1="2565.3281" y2="2565.3281"/><!--MD5=[4b1be41c79a1ff75e3d6100484a928eb]
class AllDynamicSTDPSynapsesDeviceProperties--><rect codeLine="933" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="124.8281" id="AllDynamicSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="265" x="3234.5" y="2998"/><ellipse cx="3249.5" cy="3014" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3249.4375,3009.8281 Q3248.6875,3009.8281 3248.125,3010.125 Q3247.5625,3010.4063 3247.1719,3010.9375 Q3246.7813,3011.4688 3246.5781,3012.25 Q3246.3906,3013.0156 3246.3906,3013.9688 Q3246.3906,3014.9375 3246.5625,3015.7031 Q3246.75,3016.4531 3247.1094,3016.9688 Q3247.4844,3017.4844 3248.0625,3017.7656 Q3248.6406,3018.0313 3249.4375,3018.0313 Q3250.1719,3018.0313 3250.9063,3017.8594 Q3251.6563,3017.6875 3252.5313,3017.3906 L3252.5313,3019.5469 Q3252.125,3019.7031 3251.7344,3019.8281 Q3251.3438,3019.9375 3250.9375,3020.0156 Q3250.5313,3020.0938 3250.1094,3020.125 Q3249.6875,3020.1719 3249.1875,3020.1719 Q3247.7813,3020.1719 3246.75,3019.7188 Q3245.7344,3019.2656 3245.0625,3018.4531 Q3244.3906,3017.6406 3244.0625,3016.5 Q3243.7344,3015.3438 3243.7344,3013.9531 Q3243.7344,3012.5781 3244.1094,3011.4219 Q3244.4844,3010.2656 3245.2031,3009.4375 Q3245.9219,3008.6094 3246.9844,3008.1563 Q3248.0469,3007.6875 3249.4375,3007.6875 Q3250.3438,3007.6875 3251.25,3007.9219 Q3252.1563,3008.1406 3252.9844,3008.5469 L3252.1563,3010.6406 Q3251.4688,3010.3125 3250.7813,3010.0781 Q3250.0938,3009.8281 3249.4375,3009.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="233" x="3263.5" y="3018.1543">AllDynamicSTDPSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3235.5" x2="3498.5" y1="3030" y2="3030"/><ellipse cx="3245.5" cy="3041" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="3254.5" y="3044.2104">D_ : BGFLOAT*</text><ellipse cx="3245.5" cy="3053.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3254.5" y="3057.0151">F_ : BGFLOAT*</text><ellipse cx="3245.5" cy="3066.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="3254.5" y="3069.8198">U_ : BGFLOAT*</text><ellipse cx="3245.5" cy="3079.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="3254.5" y="3082.6245">r_ : BGFLOAT*</text><ellipse cx="3245.5" cy="3092.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3254.5" y="3095.4292">u_ : BGFLOAT*</text><ellipse cx="3245.5" cy="3105.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="3254.5" y="3108.2339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3235.5" x2="3498.5" y1="3114.8281" y2="3114.8281"/><!--MD5=[017d3a10fe7408131050c5acc75b1a9b]
class AllEdgesDeviceProperties--><rect codeLine="943" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="176.0469" id="AllEdgesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="177" x="3779.5" y="1394"/><ellipse cx="3798.1" cy="1410" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3798.0375,1405.8281 Q3797.2875,1405.8281 3796.725,1406.125 Q3796.1625,1406.4063 3795.7719,1406.9375 Q3795.3813,1407.4688 3795.1781,1408.25 Q3794.9906,1409.0156 3794.9906,1409.9688 Q3794.9906,1410.9375 3795.1625,1411.7031 Q3795.35,1412.4531 3795.7094,1412.9688 Q3796.0844,1413.4844 3796.6625,1413.7656 Q3797.2406,1414.0313 3798.0375,1414.0313 Q3798.7719,1414.0313 3799.5063,1413.8594 Q3800.2563,1413.6875 3801.1313,1413.3906 L3801.1313,1415.5469 Q3800.725,1415.7031 3800.3344,1415.8281 Q3799.9438,1415.9375 3799.5375,1416.0156 Q3799.1313,1416.0938 3798.7094,1416.125 Q3798.2875,1416.1719 3797.7875,1416.1719 Q3796.3813,1416.1719 3795.35,1415.7188 Q3794.3344,1415.2656 3793.6625,1414.4531 Q3792.9906,1413.6406 3792.6625,1412.5 Q3792.3344,1411.3438 3792.3344,1409.9531 Q3792.3344,1408.5781 3792.7094,1407.4219 Q3793.0844,1406.2656 3793.8031,1405.4375 Q3794.5219,1404.6094 3795.5844,1404.1563 Q3796.6469,1403.6875 3798.0375,1403.6875 Q3798.9438,1403.6875 3799.85,1403.9219 Q3800.7563,1404.1406 3801.5844,1404.5469 L3800.7563,1406.6406 Q3800.0688,1406.3125 3799.3813,1406.0781 Q3798.6938,1405.8281 3798.0375,1405.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="137" x="3812.9" y="1414.1543">AllEdgesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3780.5" x2="3955.5" y1="1426" y2="1426"/><ellipse cx="3790.5" cy="1437" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="3799.5" y="1440.2104">W_ : BGFLOAT*</text><ellipse cx="3790.5" cy="1449.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3799.5" y="1453.0151">psr_ : BGFLOAT*</text><ellipse cx="3790.5" cy="1462.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="3799.5" y="1465.8198">maxEdgesPerVertex_ : BGSIZE</text><ellipse cx="3790.5" cy="1475.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3799.5" y="1478.6245">totalEdgeCount_ : BGSIZE</text><ellipse cx="3790.5" cy="1488.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3799.5" y="1491.4292">edgeCounts_ : BGSIZE*</text><ellipse cx="3790.5" cy="1501.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3799.5" y="1504.2339">inUse_ : bool*</text><ellipse cx="3790.5" cy="1513.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="3799.5" y="1517.0386">type_ : edgeType*</text><ellipse cx="3790.5" cy="1526.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3799.5" y="1529.8433">countVertices_ : int</text><ellipse cx="3790.5" cy="1539.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="3799.5" y="1542.6479">destVertexIndex_ : int*</text><ellipse cx="3790.5" cy="1552.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="3799.5" y="1555.4526">sourceVertexIndex_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3780.5" x2="3955.5" y1="1562.0469" y2="1562.0469"/><!--MD5=[639115fe7f0fcce40793e2aa5cc37621]
class AllIFNeuronsDeviceProperties--><rect codeLine="957" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="252.875" id="AllIFNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="198" x="2786" y="2384.5"/><ellipse cx="2802.8" cy="2400.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2802.7375,2396.3281 Q2801.9875,2396.3281 2801.425,2396.625 Q2800.8625,2396.9063 2800.4719,2397.4375 Q2800.0813,2397.9688 2799.8781,2398.75 Q2799.6906,2399.5156 2799.6906,2400.4688 Q2799.6906,2401.4375 2799.8625,2402.2031 Q2800.05,2402.9531 2800.4094,2403.4688 Q2800.7844,2403.9844 2801.3625,2404.2656 Q2801.9406,2404.5313 2802.7375,2404.5313 Q2803.4719,2404.5313 2804.2063,2404.3594 Q2804.9563,2404.1875 2805.8313,2403.8906 L2805.8313,2406.0469 Q2805.425,2406.2031 2805.0344,2406.3281 Q2804.6438,2406.4375 2804.2375,2406.5156 Q2803.8313,2406.5938 2803.4094,2406.625 Q2802.9875,2406.6719 2802.4875,2406.6719 Q2801.0813,2406.6719 2800.05,2406.2188 Q2799.0344,2405.7656 2798.3625,2404.9531 Q2797.6906,2404.1406 2797.3625,2403 Q2797.0344,2401.8438 2797.0344,2400.4531 Q2797.0344,2399.0781 2797.4094,2397.9219 Q2797.7844,2396.7656 2798.5031,2395.9375 Q2799.2219,2395.1094 2800.2844,2394.6563 Q2801.3469,2394.1875 2802.7375,2394.1875 Q2803.6438,2394.1875 2804.55,2394.4219 Q2805.4563,2394.6406 2806.2844,2395.0469 L2805.4563,2397.1406 Q2804.7688,2396.8125 2804.0813,2396.5781 Q2803.3938,2396.3281 2802.7375,2396.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="162" x="2817.2" y="2404.6543">AllIFNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2787" x2="2983" y1="2416.5" y2="2416.5"/><ellipse cx="2797" cy="2427.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2806" y="2430.7104">C1_ : BGFLOAT*</text><ellipse cx="2797" cy="2440.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2806" y="2443.5151">C2_ : BGFLOAT*</text><ellipse cx="2797" cy="2453.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2806" y="2456.3198">Cm_ : BGFLOAT*</text><ellipse cx="2797" cy="2465.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="2806" y="2469.1245">I0_ : BGFLOAT*</text><ellipse cx="2797" cy="2478.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2806" y="2481.9292">Iinject_ : BGFLOAT*</text><ellipse cx="2797" cy="2491.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2806" y="2494.7339">Inoise_ : BGFLOAT*</text><ellipse cx="2797" cy="2504.3281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2806" y="2507.5386">Isyn_ : BGFLOAT*</text><ellipse cx="2797" cy="2517.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2806" y="2520.3433">Rm_ : BGFLOAT*</text><ellipse cx="2797" cy="2529.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2806" y="2533.1479">Tau_ : BGFLOAT*</text><ellipse cx="2797" cy="2542.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2806" y="2545.9526">Trefract_ : BGFLOAT*</text><ellipse cx="2797" cy="2555.5469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2806" y="2558.7573">Vinit_ : BGFLOAT*</text><ellipse cx="2797" cy="2568.3516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2806" y="2571.562">Vm_ : BGFLOAT*</text><ellipse cx="2797" cy="2581.1563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2806" y="2584.3667">Vreset_ : BGFLOAT*</text><ellipse cx="2797" cy="2593.9609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="2806" y="2597.1714">Vrest_ : BGFLOAT*</text><ellipse cx="2797" cy="2606.7656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2806" y="2609.9761">Vthresh_ : BGFLOAT*</text><ellipse cx="2797" cy="2619.5703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="2806" y="2622.7808">numStepsInRefractoryPeriod_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2787" x2="2983" y1="2629.375" y2="2629.375"/><!--MD5=[bc6843495936d398fdad119946a0d209]
class AllIZHNeuronsDeviceProperties--><rect codeLine="977" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="124.8281" id="AllIZHNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="203" x="2783.5" y="2998"/><ellipse cx="2798.5" cy="3014" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2798.4375,3009.8281 Q2797.6875,3009.8281 2797.125,3010.125 Q2796.5625,3010.4063 2796.1719,3010.9375 Q2795.7813,3011.4688 2795.5781,3012.25 Q2795.3906,3013.0156 2795.3906,3013.9688 Q2795.3906,3014.9375 2795.5625,3015.7031 Q2795.75,3016.4531 2796.1094,3016.9688 Q2796.4844,3017.4844 2797.0625,3017.7656 Q2797.6406,3018.0313 2798.4375,3018.0313 Q2799.1719,3018.0313 2799.9063,3017.8594 Q2800.6563,3017.6875 2801.5313,3017.3906 L2801.5313,3019.5469 Q2801.125,3019.7031 2800.7344,3019.8281 Q2800.3438,3019.9375 2799.9375,3020.0156 Q2799.5313,3020.0938 2799.1094,3020.125 Q2798.6875,3020.1719 2798.1875,3020.1719 Q2796.7813,3020.1719 2795.75,3019.7188 Q2794.7344,3019.2656 2794.0625,3018.4531 Q2793.3906,3017.6406 2793.0625,3016.5 Q2792.7344,3015.3438 2792.7344,3013.9531 Q2792.7344,3012.5781 2793.1094,3011.4219 Q2793.4844,3010.2656 2794.2031,3009.4375 Q2794.9219,3008.6094 2795.9844,3008.1563 Q2797.0469,3007.6875 2798.4375,3007.6875 Q2799.3438,3007.6875 2800.25,3007.9219 Q2801.1563,3008.1406 2801.9844,3008.5469 L2801.1563,3010.6406 Q2800.4688,3010.3125 2799.7813,3010.0781 Q2799.0938,3009.8281 2798.4375,3009.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="171" x="2812.5" y="3018.1543">AllIZHNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2784.5" x2="2985.5" y1="3030" y2="3030"/><ellipse cx="2794.5" cy="3041" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2803.5" y="3044.2104">Aconst_ : BGFLOAT*</text><ellipse cx="2794.5" cy="3053.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2803.5" y="3057.0151">Bconst_ : BGFLOAT*</text><ellipse cx="2794.5" cy="3066.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2803.5" y="3069.8198">C3_ : BGFLOAT*</text><ellipse cx="2794.5" cy="3079.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2803.5" y="3082.6245">Cconst_ : BGFLOAT*</text><ellipse cx="2794.5" cy="3092.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2803.5" y="3095.4292">Dconst_ : BGFLOAT*</text><ellipse cx="2794.5" cy="3105.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2803.5" y="3108.2339">u_ : BGFLOAT*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2784.5" x2="2985.5" y1="3114.8281" y2="3114.8281"/><!--MD5=[a7843438017f4a8113b6a979c3ec4039]
class AllSTDPSynapsesDeviceProperties--><rect codeLine="987" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="240.0703" id="AllSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="218" x="3258" y="2391"/><ellipse cx="3273" cy="2407" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3272.9375,2402.8281 Q3272.1875,2402.8281 3271.625,2403.125 Q3271.0625,2403.4063 3270.6719,2403.9375 Q3270.2813,2404.4688 3270.0781,2405.25 Q3269.8906,2406.0156 3269.8906,2406.9688 Q3269.8906,2407.9375 3270.0625,2408.7031 Q3270.25,2409.4531 3270.6094,2409.9688 Q3270.9844,2410.4844 3271.5625,2410.7656 Q3272.1406,2411.0313 3272.9375,2411.0313 Q3273.6719,2411.0313 3274.4063,2410.8594 Q3275.1563,2410.6875 3276.0313,2410.3906 L3276.0313,2412.5469 Q3275.625,2412.7031 3275.2344,2412.8281 Q3274.8438,2412.9375 3274.4375,2413.0156 Q3274.0313,2413.0938 3273.6094,2413.125 Q3273.1875,2413.1719 3272.6875,2413.1719 Q3271.2813,2413.1719 3270.25,2412.7188 Q3269.2344,2412.2656 3268.5625,2411.4531 Q3267.8906,2410.6406 3267.5625,2409.5 Q3267.2344,2408.3438 3267.2344,2406.9531 Q3267.2344,2405.5781 3267.6094,2404.4219 Q3267.9844,2403.2656 3268.7031,2402.4375 Q3269.4219,2401.6094 3270.4844,2401.1563 Q3271.5469,2400.6875 3272.9375,2400.6875 Q3273.8438,2400.6875 3274.75,2400.9219 Q3275.6563,2401.1406 3276.4844,2401.5469 L3275.6563,2403.6406 Q3274.9688,2403.3125 3274.2813,2403.0781 Q3273.5938,2402.8281 3272.9375,2402.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="186" x="3287" y="2411.1543">AllSTDPSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3259" x2="3475" y1="2423" y2="2423"/><ellipse cx="3269" cy="2434" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="3278" y="2437.2104">Aneg_ : BGFLOAT*</text><ellipse cx="3269" cy="2446.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="3278" y="2450.0151">Apos_ : BGFLOAT*</text><ellipse cx="3269" cy="2459.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3278" y="2462.8198">STDPgap_ : BGFLOAT*</text><ellipse cx="3269" cy="2472.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="3278" y="2475.6245">Wex_ : BGFLOAT*</text><ellipse cx="3269" cy="2485.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="3278" y="2488.4292">muneg_ : BGFLOAT*</text><ellipse cx="3269" cy="2498.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3278" y="2501.2339">mupos_ : BGFLOAT*</text><ellipse cx="3269" cy="2510.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="3278" y="2514.0386">tauneg_ : BGFLOAT*</text><ellipse cx="3269" cy="2523.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3278" y="2526.8433">taupos_ : BGFLOAT*</text><ellipse cx="3269" cy="2536.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3278" y="2539.6479">tauspost_ : BGFLOAT*</text><ellipse cx="3269" cy="2549.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3278" y="2552.4526">tauspre_ : BGFLOAT*</text><ellipse cx="3269" cy="2562.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3278" y="2565.2573">useFroemkeDanSTDP_ : bool*</text><ellipse cx="3269" cy="2574.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3278" y="2578.062">delayIndexPost_ : int*</text><ellipse cx="3269" cy="2587.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3278" y="2590.8667">delayQueuePostLength_ : int*</text><ellipse cx="3269" cy="2600.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3278" y="2603.6714">totalDelayPost_ : int*</text><ellipse cx="3269" cy="2613.2656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3278" y="2616.4761">delayQueuePost_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3259" x2="3475" y1="2623.0703" y2="2623.0703"/><!--MD5=[4ac84e1680f309079c4f5159a2743064]
class AllSpikingNeuronsDeviceProperties--><rect codeLine="1006" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="99.2188" id="AllSpikingNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="223" x="2917.5" y="1976"/><ellipse cx="2932.5" cy="1992" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2932.4375,1987.8281 Q2931.6875,1987.8281 2931.125,1988.125 Q2930.5625,1988.4063 2930.1719,1988.9375 Q2929.7813,1989.4688 2929.5781,1990.25 Q2929.3906,1991.0156 2929.3906,1991.9688 Q2929.3906,1992.9375 2929.5625,1993.7031 Q2929.75,1994.4531 2930.1094,1994.9688 Q2930.4844,1995.4844 2931.0625,1995.7656 Q2931.6406,1996.0313 2932.4375,1996.0313 Q2933.1719,1996.0313 2933.9063,1995.8594 Q2934.6563,1995.6875 2935.5313,1995.3906 L2935.5313,1997.5469 Q2935.125,1997.7031 2934.7344,1997.8281 Q2934.3438,1997.9375 2933.9375,1998.0156 Q2933.5313,1998.0938 2933.1094,1998.125 Q2932.6875,1998.1719 2932.1875,1998.1719 Q2930.7813,1998.1719 2929.75,1997.7188 Q2928.7344,1997.2656 2928.0625,1996.4531 Q2927.3906,1995.6406 2927.0625,1994.5 Q2926.7344,1993.3438 2926.7344,1991.9531 Q2926.7344,1990.5781 2927.1094,1989.4219 Q2927.4844,1988.2656 2928.2031,1987.4375 Q2928.9219,1986.6094 2929.9844,1986.1563 Q2931.0469,1985.6875 2932.4375,1985.6875 Q2933.3438,1985.6875 2934.25,1985.9219 Q2935.1563,1986.1406 2935.9844,1986.5469 L2935.1563,1988.6406 Q2934.4688,1988.3125 2933.7813,1988.0781 Q2933.0938,1987.8281 2932.4375,1987.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="191" x="2946.5" y="1996.1543">AllSpikingNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2918.5" x2="3139.5" y1="2008" y2="2008"/><ellipse cx="2928.5" cy="2019" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2937.5" y="2022.2104">hasFired_ : bool*</text><ellipse cx="2928.5" cy="2031.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2937.5" y="2035.0151">spikeCountOffset_ : int*</text><ellipse cx="2928.5" cy="2044.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2937.5" y="2047.8198">spikeCount_ : int*</text><ellipse cx="2928.5" cy="2057.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2937.5" y="2060.6245">spikeHistory_ : uint64_t**</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2918.5" x2="3139.5" y1="2067.2188" y2="2067.2188"/><!--MD5=[9207c363d1f0343d1c8507e42ff7f935]
class AllSpikingSynapsesDeviceProperties--><rect codeLine="1014" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="124.8281" id="AllSpikingSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="228" x="3185" y="1963"/><ellipse cx="3200" cy="1979" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3199.9375,1974.8281 Q3199.1875,1974.8281 3198.625,1975.125 Q3198.0625,1975.4063 3197.6719,1975.9375 Q3197.2813,1976.4688 3197.0781,1977.25 Q3196.8906,1978.0156 3196.8906,1978.9688 Q3196.8906,1979.9375 3197.0625,1980.7031 Q3197.25,1981.4531 3197.6094,1981.9688 Q3197.9844,1982.4844 3198.5625,1982.7656 Q3199.1406,1983.0313 3199.9375,1983.0313 Q3200.6719,1983.0313 3201.4063,1982.8594 Q3202.1563,1982.6875 3203.0313,1982.3906 L3203.0313,1984.5469 Q3202.625,1984.7031 3202.2344,1984.8281 Q3201.8438,1984.9375 3201.4375,1985.0156 Q3201.0313,1985.0938 3200.6094,1985.125 Q3200.1875,1985.1719 3199.6875,1985.1719 Q3198.2813,1985.1719 3197.25,1984.7188 Q3196.2344,1984.2656 3195.5625,1983.4531 Q3194.8906,1982.6406 3194.5625,1981.5 Q3194.2344,1980.3438 3194.2344,1978.9531 Q3194.2344,1977.5781 3194.6094,1976.4219 Q3194.9844,1975.2656 3195.7031,1974.4375 Q3196.4219,1973.6094 3197.4844,1973.1563 Q3198.5469,1972.6875 3199.9375,1972.6875 Q3200.8438,1972.6875 3201.75,1972.9219 Q3202.6563,1973.1406 3203.4844,1973.5469 L3202.6563,1975.6406 Q3201.9688,1975.3125 3201.2813,1975.0781 Q3200.5938,1974.8281 3199.9375,1974.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="196" x="3214" y="1983.1543">AllSpikingSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3186" x2="3412" y1="1995" y2="1995"/><ellipse cx="3196" cy="2006" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="3205" y="2009.2104">decay_ : BGFLOAT*</text><ellipse cx="3196" cy="2018.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="3205" y="2022.0151">tau_ : BGFLOAT*</text><ellipse cx="3196" cy="2031.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3205" y="2034.8198">delayIndex_ : int*</text><ellipse cx="3196" cy="2044.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="3205" y="2047.6245">delayQueueLength_ : int*</text><ellipse cx="3196" cy="2057.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="3205" y="2060.4292">totalDelay_ : int*</text><ellipse cx="3196" cy="2070.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="3205" y="2073.2339">delayQueue_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3186" x2="3412" y1="2079.8281" y2="2079.8281"/><!--MD5=[537ade6dbdfe6ef3b32240037651f8aa]
class AllVerticesDeviceProperties--><rect codeLine="1024" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="60.8047" id="AllVerticesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="181" x="3373.5" y="1451.5"/><ellipse cx="3388.5" cy="1467.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3388.4375,1463.3281 Q3387.6875,1463.3281 3387.125,1463.625 Q3386.5625,1463.9063 3386.1719,1464.4375 Q3385.7813,1464.9688 3385.5781,1465.75 Q3385.3906,1466.5156 3385.3906,1467.4688 Q3385.3906,1468.4375 3385.5625,1469.2031 Q3385.75,1469.9531 3386.1094,1470.4688 Q3386.4844,1470.9844 3387.0625,1471.2656 Q3387.6406,1471.5313 3388.4375,1471.5313 Q3389.1719,1471.5313 3389.9063,1471.3594 Q3390.6563,1471.1875 3391.5313,1470.8906 L3391.5313,1473.0469 Q3391.125,1473.2031 3390.7344,1473.3281 Q3390.3438,1473.4375 3389.9375,1473.5156 Q3389.5313,1473.5938 3389.1094,1473.625 Q3388.6875,1473.6719 3388.1875,1473.6719 Q3386.7813,1473.6719 3385.75,1473.2188 Q3384.7344,1472.7656 3384.0625,1471.9531 Q3383.3906,1471.1406 3383.0625,1470 Q3382.7344,1468.8438 3382.7344,1467.4531 Q3382.7344,1466.0781 3383.1094,1464.9219 Q3383.4844,1463.7656 3384.2031,1462.9375 Q3384.9219,1462.1094 3385.9844,1461.6563 Q3387.0469,1461.1875 3388.4375,1461.1875 Q3389.3438,1461.1875 3390.25,1461.4219 Q3391.1563,1461.6406 3391.9844,1462.0469 L3391.1563,1464.1406 Q3390.4688,1463.8125 3389.7813,1463.5781 Q3389.0938,1463.3281 3388.4375,1463.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="149" x="3402.5" y="1471.6543">AllVerticesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3374.5" x2="3553.5" y1="1483.5" y2="1483.5"/><ellipse cx="3384.5" cy="1494.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="3393.5" y="1497.7104">summationPoints_ : BGFLOAT*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3374.5" x2="3553.5" y1="1504.3047" y2="1504.3047"/><!--MD5=[1ca6d9ba181062a9a4052698cf88a455]
class ConnGrowth::GrowthParams--><rect codeLine="1029" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="137.6328" id="ConnGrowth::GrowthParams" style="stroke:#A80036;stroke-width:1.5;" width="186" x="1953" y="2442"/><ellipse cx="1968" cy="2458" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1967.9375,2453.8281 Q1967.1875,2453.8281 1966.625,2454.125 Q1966.0625,2454.4063 1965.6719,2454.9375 Q1965.2813,2455.4688 1965.0781,2456.25 Q1964.8906,2457.0156 1964.8906,2457.9688 Q1964.8906,2458.9375 1965.0625,2459.7031 Q1965.25,2460.4531 1965.6094,2460.9688 Q1965.9844,2461.4844 1966.5625,2461.7656 Q1967.1406,2462.0313 1967.9375,2462.0313 Q1968.6719,2462.0313 1969.4063,2461.8594 Q1970.1563,2461.6875 1971.0313,2461.3906 L1971.0313,2463.5469 Q1970.625,2463.7031 1970.2344,2463.8281 Q1969.8438,2463.9375 1969.4375,2464.0156 Q1969.0313,2464.0938 1968.6094,2464.125 Q1968.1875,2464.1719 1967.6875,2464.1719 Q1966.2813,2464.1719 1965.25,2463.7188 Q1964.2344,2463.2656 1963.5625,2462.4531 Q1962.8906,2461.6406 1962.5625,2460.5 Q1962.2344,2459.3438 1962.2344,2457.9531 Q1962.2344,2456.5781 1962.6094,2455.4219 Q1962.9844,2454.2656 1963.7031,2453.4375 Q1964.4219,2452.6094 1965.4844,2452.1563 Q1966.5469,2451.6875 1967.9375,2451.6875 Q1968.8438,2451.6875 1969.75,2451.9219 Q1970.6563,2452.1406 1971.4844,2452.5469 L1970.6563,2454.6406 Q1969.9688,2454.3125 1969.2813,2454.0781 Q1968.5938,2453.8281 1967.9375,2453.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="154" x="1982" y="2462.1543">ConnGrowth::GrowthParams</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1954" x2="2138" y1="2474" y2="2474"/><ellipse cx="1964" cy="2485" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1973" y="2488.2104">beta : BGFLOAT</text><ellipse cx="1964" cy="2497.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1973" y="2501.0151">epsilon : BGFLOAT</text><ellipse cx="1964" cy="2510.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="1973" y="2513.8198">maxRate : BGFLOAT</text><ellipse cx="1964" cy="2523.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1973" y="2526.6245">minRadius : BGFLOAT</text><ellipse cx="1964" cy="2536.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1973" y="2539.4292">rho : BGFLOAT</text><ellipse cx="1964" cy="2549.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="1973" y="2552.2339">startRadius : BGFLOAT</text><ellipse cx="1964" cy="2561.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="1973" y="2565.0386">targetRate : BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1954" x2="2138" y1="2571.6328" y2="2571.6328"/><!--MD5=[0db2b2f8d15a42d02f46e8af06351a10]
class ConnStatic::DistDestVertex--><rect codeLine="1040" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="86.4141" id="ConnStatic::DistDestVertex" style="stroke:#A80036;stroke-width:1.5;" width="252" x="1135" y="2468"/><ellipse cx="1183.75" cy="2484" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1183.6875,2479.8281 Q1182.9375,2479.8281 1182.375,2480.125 Q1181.8125,2480.4063 1181.4219,2480.9375 Q1181.0313,2481.4688 1180.8281,2482.25 Q1180.6406,2483.0156 1180.6406,2483.9688 Q1180.6406,2484.9375 1180.8125,2485.7031 Q1181,2486.4531 1181.3594,2486.9688 Q1181.7344,2487.4844 1182.3125,2487.7656 Q1182.8906,2488.0313 1183.6875,2488.0313 Q1184.4219,2488.0313 1185.1563,2487.8594 Q1185.9063,2487.6875 1186.7813,2487.3906 L1186.7813,2489.5469 Q1186.375,2489.7031 1185.9844,2489.8281 Q1185.5938,2489.9375 1185.1875,2490.0156 Q1184.7813,2490.0938 1184.3594,2490.125 Q1183.9375,2490.1719 1183.4375,2490.1719 Q1182.0313,2490.1719 1181,2489.7188 Q1179.9844,2489.2656 1179.3125,2488.4531 Q1178.6406,2487.6406 1178.3125,2486.5 Q1177.9844,2485.3438 1177.9844,2483.9531 Q1177.9844,2482.5781 1178.3594,2481.4219 Q1178.7344,2480.2656 1179.4531,2479.4375 Q1180.1719,2478.6094 1181.2344,2478.1563 Q1182.2969,2477.6875 1183.6875,2477.6875 Q1184.5938,2477.6875 1185.5,2477.9219 Q1186.4063,2478.1406 1187.2344,2478.5469 L1186.4063,2480.6406 Q1185.7188,2480.3125 1185.0313,2480.0781 Q1184.3438,2479.8281 1183.6875,2479.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="146" x="1204.25" y="2488.1543">ConnStatic::DistDestVertex</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1136" x2="1386" y1="2500" y2="2500"/><ellipse cx="1146" cy="2511" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="1155" y="2514.2104">dist : BGFLOAT</text><ellipse cx="1146" cy="2523.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="1155" y="2527.0151">destVertex : int</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1136" x2="1386" y1="2533.6094" y2="2533.6094"/><ellipse cx="1146" cy="2544.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="1155" y="2547.8198">operator&lt;(DistDestVertex other) : bool {query}</text><!--MD5=[0b11278c58281ab7c80e79be642856f2]
class EdgeIndexMap--><rect codeLine="1047" fill="#FEFECE" filter="url(#f1c58mvs4fnw0y)" height="188.8516" id="EdgeIndexMap" style="stroke:#A80036;stroke-width:1.5;" width="255" x="2627.5" y="1931"/><ellipse cx="2709.75" cy="1947" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2709.6875,1942.8281 Q2708.9375,1942.8281 2708.375,1943.125 Q2707.8125,1943.4063 2707.4219,1943.9375 Q2707.0313,1944.4688 2706.8281,1945.25 Q2706.6406,1946.0156 2706.6406,1946.9688 Q2706.6406,1947.9375 2706.8125,1948.7031 Q2707,1949.4531 2707.3594,1949.9688 Q2707.7344,1950.4844 2708.3125,1950.7656 Q2708.8906,1951.0313 2709.6875,1951.0313 Q2710.4219,1951.0313 2711.1563,1950.8594 Q2711.9063,1950.6875 2712.7813,1950.3906 L2712.7813,1952.5469 Q2712.375,1952.7031 2711.9844,1952.8281 Q2711.5938,1952.9375 2711.1875,1953.0156 Q2710.7813,1953.0938 2710.3594,1953.125 Q2709.9375,1953.1719 2709.4375,1953.1719 Q2708.0313,1953.1719 2707,1952.7188 Q2705.9844,1952.2656 2705.3125,1951.4531 Q2704.6406,1950.6406 2704.3125,1949.5 Q2703.9844,1948.3438 2703.9844,1946.9531 Q2703.9844,1945.5781 2704.3594,1944.4219 Q2704.7344,1943.2656 2705.4531,1942.4375 Q2706.1719,1941.6094 2707.2344,1941.1563 Q2708.2969,1940.6875 2709.6875,1940.6875 Q2710.5938,1940.6875 2711.5,1940.9219 Q2712.4063,1941.1406 2713.2344,1941.5469 L2712.4063,1943.6406 Q2711.7188,1943.3125 2711.0313,1943.0781 Q2710.3438,1942.8281 2709.6875,1942.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="2730.25" y="1951.1543">EdgeIndexMap</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2628.5" x2="2881.5" y1="1963" y2="1963"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2635.5" y="1971"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2647.5" y="1977.2104">numOfEdges_ : BGSIZE</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2635.5" y="1983.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2647.5" y="1990.0151">numOfVertices_ : BGSIZE</text><ellipse cx="2638.5" cy="1999.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2647.5" y="2002.8198">incomingEdgeBegin_ : BGSIZE*</text><ellipse cx="2638.5" cy="2012.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2647.5" y="2015.6245">incomingEdgeCount_ : BGSIZE*</text><ellipse cx="2638.5" cy="2025.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2647.5" y="2028.4292">incomingEdgeIndexMap_ : BGSIZE*</text><ellipse cx="2638.5" cy="2038.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2647.5" y="2041.2339">outgoingEdgeBegin_ : BGSIZE*</text><ellipse cx="2638.5" cy="2050.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2647.5" y="2054.0386">outgoingEdgeCount_ : BGSIZE*</text><ellipse cx="2638.5" cy="2063.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="2647.5" y="2066.8433">outgoingEdgeIndexMap_ : BGSIZE*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2628.5" x2="2881.5" y1="2073.4375" y2="2073.4375"/><ellipse cx="2638.5" cy="2084.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2647.5" y="2087.6479">EdgeIndexMap()</text><ellipse cx="2638.5" cy="2097.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="2647.5" y="2100.4526">EdgeIndexMap(int vertexCount, int edgeCount)</text><ellipse cx="2638.5" cy="2110.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2647.5" y="2113.2573">~EdgeIndexMap()</text><!--MD5=[36cebae4583ca589f8881f15eca879f1]
reverse link AllEdges to AllNeuroEdges--><path codeLine="1067" d="M753,2332.71 C753,2362.67 753,2391.21 753,2416.3 " fill="none" id="AllEdges-backto-AllNeuroEdges" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="746,2332.3,753,2312.3,760,2332.3,746,2332.3" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d895029eba7154c6905399e7eb5aaaea]
reverse link AllEdgesDeviceProperties to AllSpikingSynapsesDeviceProperties--><path codeLine="1070" d="M3823.88,1587.98 C3807.28,1619.63 3786.2,1652.87 3761,1679 C3724.76,1716.58 3703.02,1709.41 3660,1739 C3555.82,1810.67 3442.49,1902.83 3371.14,1962.76 " fill="none" id="AllEdgesDeviceProperties-backto-AllSpikingSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3817.64,1584.81,3832.89,1570.1,3830.14,1591.11,3817.64,1584.81" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b299d6e53b6ac4d2a1701b68b9dc7554]
reverse link AllIFNeurons to AllIZHNeurons--><path codeLine="1073" d="M5010.93,3422.96 C4987.52,3473 4963.62,3524.09 4940.63,3573.25 " fill="none" id="AllIFNeurons-backto-AllIZHNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="5004.71,3419.73,5019.52,3404.58,5017.39,3425.66,5004.71,3419.73" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7d41fa10eee7108bf615579dc16f66c4]
reverse link AllIFNeurons to AllLIFNeurons--><path codeLine="1076" d="M5349.07,3422.95 C5419.74,3574.03 5494.89,3734.71 5536.19,3822.99 " fill="none" id="AllIFNeurons-backto-AllLIFNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="5342.61,3425.66,5340.48,3404.58,5355.29,3419.73,5342.61,3425.66" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[17cadfdde82fbd78aaa7ab65342c0454]
reverse link AllIFNeuronsDeviceProperties to AllIZHNeuronsDeviceProperties--><path codeLine="1079" d="M2885,2657.89 C2885,2768.89 2885,2916.06 2885,2997.9 " fill="none" id="AllIFNeuronsDeviceProperties-backto-AllIZHNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2878,2657.61,2885,2637.61,2892,2657.61,2878,2657.61" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[3d383143b8365dcb1c00482aec0d8f87]
reverse link AllNeuroEdges to AllSpikingSynapses--><path codeLine="1082" d="M753,2626.11 C753,2651.66 753,2680.06 753,2709.76 " fill="none" id="AllNeuroEdges-backto-AllSpikingSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="746,2625.81,753,2605.81,760,2625.81,746,2625.81" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5445f169f2d896f0fc54fbb0dd17c8d5]
reverse link AllSTDPSynapses to AllDynamicSTDPSynapses--><path codeLine="1085" d="M1136,4333.53 C1136,4346.84 1136,4359.95 1136,4372.8 " fill="none" id="AllSTDPSynapses-backto-AllDynamicSTDPSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1129,4333.22,1136,4313.22,1143,4333.22,1129,4333.22" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[539a086fdc8dbc8028ce1b9c0d3cb21a]
reverse link AllSTDPSynapsesDeviceProperties to AllDynamicSTDPSynapsesDeviceProperties--><path codeLine="1088" d="M3367,2651.15 C3367,2762.85 3367,2914.34 3367,2997.86 " fill="none" id="AllSTDPSynapsesDeviceProperties-backto-AllDynamicSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3360,2651.14,3367,2631.14,3374,2651.14,3360,2651.14" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8724fdcf162cd93143062af7a28861a5]
reverse link AllSpikingNeurons to AllIFNeurons--><path codeLine="1091" d="M4994.26,2668.37 C5001.61,2683.85 5009.25,2699.95 5017.07,2716.4 " fill="none" id="AllSpikingNeurons-backto-AllIFNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4987.87,2671.23,4985.61,2650.16,5000.51,2665.22,4987.87,2671.23" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5fcb689111a9832bf7543527f372e607]
reverse link AllSpikingNeuronsDeviceProperties to AllIFNeuronsDeviceProperties--><path codeLine="1094" d="M3008.76,2094.46 C2986.41,2169.49 2949.95,2291.92 2922.38,2384.49 " fill="none" id="AllSpikingNeuronsDeviceProperties-backto-AllIFNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3002.12,2092.24,3014.53,2075.07,3015.53,2096.24,3002.12,2092.24" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f221506eaa2e129ebcab2e085332c1be]
reverse link AllSpikingSynapses to AllDSSynapses--><path codeLine="1097" d="M583.57,3429.41 C545.9,3511.21 507.1,3595.46 473.13,3669.24 " fill="none" id="AllSpikingSynapses-backto-AllDSSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="577.24,3426.42,591.97,3411.18,589.96,3432.27,577.24,3426.42" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[587b9d07fbc4fdda6579551662042140]
reverse link AllSpikingSynapses to AllSTDPSynapses--><path codeLine="1100" d="M923.01,3429.7 C929.29,3443.31 935.61,3457 941.93,3470.69 " fill="none" id="AllSpikingSynapses-backto-AllSTDPSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="916.48,3432.27,914.46,3411.18,929.19,3426.4,916.48,3432.27" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[23aac5e482fb680cc0cec1f0f0dd59a6]
reverse link AllSpikingSynapsesDeviceProperties to AllDSSynapsesDeviceProperties--><path codeLine="1103" d="M3269.31,2107.14 C3233.96,2203.17 3175.69,2361.44 3143.73,2448.26 " fill="none" id="AllSpikingSynapsesDeviceProperties-backto-AllDSSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3262.8,2104.58,3276.28,2088.23,3275.93,2109.41,3262.8,2104.58" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e9a3e383543838c874b32001a8709207]
reverse link AllSpikingSynapsesDeviceProperties to AllSTDPSynapsesDeviceProperties--><path codeLine="1106" d="M3310.53,2108.48 C3321.42,2185.93 3337.89,2303.01 3350.23,2390.79 " fill="none" id="AllSpikingSynapsesDeviceProperties-backto-AllSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3303.54,2109.01,3307.68,2088.23,3317.4,2107.06,3303.54,2109.01" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f591e114573ccd2409f159b73ea72911]
reverse link AllVertices to AllSpikingNeurons--><path codeLine="1109" d="M4920,2184.85 C4920,2245.16 4920,2313.36 4920,2371.67 " fill="none" id="AllVertices-backto-AllSpikingNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4913,2184.73,4920,2164.73,4927,2184.73,4913,2184.73" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[fcd28df228b50666b72099cd983e7d22]
reverse link AllVerticesDeviceProperties to AllSpikingNeuronsDeviceProperties--><path codeLine="1112" d="M3448.8,1531.97 C3432.61,1576.39 3402.77,1640.61 3356,1679 C3287.88,1734.91 3233.61,1681.29 3167,1739 C3094.19,1802.09 3056.44,1912.34 3039.84,1975.79 " fill="none" id="AllVerticesDeviceProperties-backto-AllSpikingNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3442.26,1529.47,3455.39,1512.84,3455.5,1534.02,3442.26,1529.47" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[10477add2578806cc5f98b33b8db5e65]
reverse link Connections to ConnGrowth--><path codeLine="1115" d="M1996.27,1628.48 C2004.49,1693.95 2014.28,1771.94 2023,1841.34 " fill="none" id="Connections-backto-ConnGrowth" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1989.32,1629.31,1993.77,1608.59,2003.21,1627.56,1989.32,1629.31" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[513ec0388948448dab3ce17eb36460f7]
reverse link Connections to ConnStatic--><path codeLine="1118" d="M1664.85,1618.21 C1601.07,1652.83 1536.8,1693.38 1482,1739 C1438.28,1775.39 1397.79,1821.86 1363.73,1866.69 " fill="none" id="Connections-backto-ConnStatic" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1661.88,1611.87,1682.82,1608.61,1668.48,1624.21,1661.88,1611.87" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[19d836ace92e712b0d8c405f49d503c3]
reverse link Hdf5Recorder to Hdf5GrowthRecorder--><path codeLine="1121" d="M4402.78,2234.96 C4423.95,2288.28 4446,2343.81 4464.7,2390.89 " fill="none" id="Hdf5Recorder-backto-Hdf5GrowthRecorder" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4396.21,2237.38,4395.33,2216.2,4409.22,2232.21,4396.21,2237.38" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8dd8f9de4d0029903f75705d233ca28a]
reverse link IFunctionNode to GenericFunctionNode--><path codeLine="1124" d="M6125.02,1138.03 C6059.03,1217.16 5941.42,1358.18 5879.58,1432.34 " fill="none" id="IFunctionNode-backto-GenericFunctionNode" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="6119.7,1133.48,6137.89,1122.6,6130.45,1142.45,6119.7,1133.48" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[9f6fa59aebac9bc7112aaf284395847c]
reverse link IRecorder to Hdf5Recorder--><path codeLine="1127" d="M4221.89,1602.86 C4237.74,1670.97 4257.94,1757.8 4275.89,1834.93 " fill="none" id="IRecorder-backto-Hdf5Recorder" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4215.05,1604.33,4217.33,1583.27,4228.68,1601.16,4215.05,1604.33" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7186e99c451d736dd7b9f0c726ab5277]
reverse link IRecorder to XmlRecorder--><path codeLine="1130" d="M4125.71,1600.77 C4070.87,1695.34 3994.55,1826.96 3941.57,1918.32 " fill="none" id="IRecorder-backto-XmlRecorder" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4119.77,1597.06,4135.86,1583.27,4131.88,1604.08,4119.77,1597.06" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7269b632a17f4028eba21f1bd63939ed]
reverse link Layout to DynamicLayout--><path codeLine="1133" d="M5566.2,1676.59 C5567.14,1677.4 5568.07,1678.2 5569,1679 C5605.52,1710.26 5625.44,1704.58 5659,1739 C5716.06,1797.53 5764.38,1877.05 5796.55,1937.3 " fill="none" id="Layout-backto-DynamicLayout" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="5561.41,1681.69,5551.12,1663.17,5570.72,1671.24,5561.41,1681.69" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[891067ebdc7a855417ab5d2553f427ef]
reverse link Layout to FixedLayout--><path codeLine="1136" d="M5425.3,1699.01 C5440.27,1788.07 5456.62,1885.38 5467.51,1950.18 " fill="none" id="Layout-backto-FixedLayout" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="5418.39,1700.14,5421.98,1679.26,5432.2,1697.82,5418.39,1700.14" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a2a96d1a257e41c08a9c3a3f8aadcb29]
reverse link Model to CPUModel--><path codeLine="1139" d="M3667,1245.22 C3667,1303.92 3667,1366.83 3667,1412.89 " fill="none" id="Model-backto-CPUModel" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3660,1245.09,3667,1225.09,3674,1245.09,3660,1245.09" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8342ff62b1882cdc2aad46dd54e535e9]
reverse link Model to GPUModel--><path codeLine="1142" d="M3510.03,1168.06 C3435.08,1209.86 3342.71,1261.39 3254.71,1310.47 " fill="none" id="Model-backto-GPUModel" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3506.83,1161.82,3527.71,1158.2,3513.65,1174.05,3506.83,1161.82" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8e79f27ee7b582c0f30a64eceb9600c6]
reverse link XmlRecorder to XmlGrowthRecorder--><path codeLine="1145" d="M3837,2151.73 C3809.41,2232.09 3774.07,2335.02 3748.36,2409.92 " fill="none" id="XmlRecorder-backto-XmlGrowthRecorder" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3830.46,2149.25,3843.57,2132.61,3843.7,2153.8,3830.46,2149.25" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7b176ba4d3de823aebcc641ddd35342b]
reverse link XmlRecorder to XmlSTDPRecorder--><path codeLine="1148" d="M3950,2150.02 C3993.2,2226.25 4048.19,2323.29 4090.19,2397.41 " fill="none" id="XmlRecorder-backto-XmlSTDPRecorder" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="3943.9,2153.46,3940.13,2132.61,3956.08,2146.56,3943.9,2153.46" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f7b242bc45f077880469141c87516fa7]
reverse link AllSpikingNeurons to EventBuffer--><path codeLine="1156" d="M4818.52,2661.77 C4809.08,2677.78 4800.05,2694.05 4792,2710 C4752.17,2788.89 4717.35,2882.81 4693.48,2953.41 " fill="none" id="AllSpikingNeurons-backto-EventBuffer" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="4825.45,2650.16,4818.9377,2653.2568,4819.2916,2660.4592,4825.8039,2657.3624,4825.45,2650.16" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[25007e0d6d2bc2691ed586569b6b25e2]
reverse link Connections to AllEdges--><path codeLine="1159" d="M1419.34,1584.84 C1289.59,1622.01 1155.71,1672.04 1040,1739 C1034.22,1742.34 1028.48,1745.83 1022.77,1749.45 " fill="none" id="Connections-backto-AllEdges" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1431.88,1581.29,1425.0166,1579.0777,1420.3348,1584.5622,1427.1981,1586.7745,1431.88,1581.29" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[82859cdc4fc284e53b85be6b34e88627]
reverse link Connections to EdgeIndexMap--><path codeLine="1162" d="M2420.79,1614.32 C2489.19,1647.61 2555.19,1688.66 2610,1739 C2666.3,1790.7 2703.95,1869.23 2726.75,1930.85 " fill="none" id="Connections-backto-EdgeIndexMap" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="2408.9,1608.62,2412.5819,1614.8203,2419.7214,1613.8063,2416.0395,1607.606,2408.9,1608.62" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[dbf6625826c2ccd9ab80e1a9e4bec40a]
reverse link ConnectionsFactory to Connections--><path codeLine="1165" d="M1978,1168.11 C1978,1222.99 1978,1294.59 1978,1355.45 " fill="none" id="ConnectionsFactory-backto-Connections" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1978,1154.89,1974,1160.89,1978,1166.89,1982,1160.89,1978,1154.89" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[324f5d3a776c0915160172bb3bb1f68c]
reverse link EdgesFactory to AllEdges--><path codeLine="1168" d="M753,1570.26 C753,1616.95 753,1677.39 753,1738.86 " fill="none" id="EdgesFactory-backto-AllEdges" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="753,1557.16,749,1563.16,753,1569.16,757,1563.16,753,1557.16" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2b5495829f9173c044fb8801621d6187]
reverse link GPUModel to AllSpikingNeuronsDeviceProperties--><path codeLine="1171" d="M2976.11,1666.49 C2992.28,1775.96 3011.6,1906.73 3021.83,1975.95 " fill="none" id="GPUModel-backto-AllSpikingNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="2974.2,1653.59,2971.1201,1660.1103,2975.9543,1665.4611,2979.0342,1658.9408,2974.2,1653.59" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f6129bcb9c73284e17b33b28d9016c76]
reverse link GPUModel to AllSpikingSynapsesDeviceProperties--><path codeLine="1174" d="M3105.05,1664.03 C3123.76,1688.6 3141.91,1713.98 3158,1739 C3205.11,1812.22 3247.62,1903.41 3273.36,1962.75 " fill="none" id="GPUModel-backto-AllSpikingSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="3097,1653.55,3097.4791,1660.7452,3104.3051,1663.0703,3103.826,1655.8751,3097,1653.55" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5aeaf2a6bd64d076c9a29b9ba5666847]
reverse link GPUModel to EdgeIndexMap--><path codeLine="1177" d="M2883.42,1666.04 C2851.57,1754.96 2814.64,1858.03 2788.58,1930.77 " fill="none" id="GPUModel-backto-EdgeIndexMap" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="2887.88,1653.59,2882.0893,1657.8874,2883.8289,1664.8855,2889.6196,1660.5881,2887.88,1653.59" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[147440af9da7b06bb1c25492ebb2b6fc]
reverse link IFunctionNode to Operations--><path codeLine="1180" d="M6173,1135.88 C6173,1224.76 6173,1395.56 6173,1457.68 " fill="none" id="IFunctionNode-backto-Operations" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="6173,1122.6,6169,1128.6,6173,1134.6,6177,1128.6,6173,1122.6" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[9ced99db6c97f860d3e6f1f558ceb823]
reverse link IFunctionNode to Operations::op--><path codeLine="1183" d="M6195.03,1135 C6210.21,1175.59 6229.02,1232.79 6237,1285 C6273.86,1526.18 6248.29,1816.7 6232.66,1950.48 " fill="none" id="IFunctionNode-backto-Operations::op" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="6190.35,1122.69,6188.7394,1129.7189,6194.6082,1133.9091,6196.2188,1126.8801,6190.35,1122.69" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[efb7ef13657b6fc949565044919673f3]
reverse link Layout to AllVertices--><path codeLine="1186" d="M5218.26,1680.14 C5159.09,1748.45 5094.07,1823.52 5039.88,1886.09 " fill="none" id="Layout-backto-AllVertices" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="5226.94,1670.11,5219.9881,1672.026,5219.0828,1679.18,5226.0348,1677.2641,5226.94,1670.11" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[95ba44a0b3c69ce18700dade6dfd248d]
reverse link LayoutFactory to Layout--><path codeLine="1189" d="M5389,1168.28 C5389,1202.8 5389,1243.93 5389,1284.83 " fill="none" id="LayoutFactory-backto-Layout" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="5389,1154.89,5385,1160.89,5389,1166.89,5393,1160.89,5389,1154.89" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0e5738770afdb953f3cb9465cb228f84]
reverse link Model to Connections--><path codeLine="1192" d="M3514.71,1100.55 C3296.91,1130.94 2884.89,1194.83 2542,1285 C2466.69,1304.8 2387,1329.86 2312,1355.39 " fill="none" id="Model-backto-Connections" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3527.81,1098.73,3521.3177,1095.5915,3515.9236,1100.3772,3522.4159,1103.5157,3527.81,1098.73" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[68c77613e519ddb3f64ca187dac87597]
reverse link Model to IRecorder--><path codeLine="1195" d="M3817.36,1174.62 C3868.18,1208 3924.54,1246.8 3974,1285 C4012.36,1314.63 4052.46,1349.17 4087.76,1380.94 " fill="none" id="Model-backto-IRecorder" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3806.27,1167.36,3809.0981,1173.9934,3816.309,1173.9341,3813.4809,1167.3007,3806.27,1167.36" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a911b337811af7fd7ce810fac5ac8c54]
reverse link Model to Layout--><path codeLine="1198" d="M3818.43,1161.11 C3872.37,1186.09 3934.51,1210.78 3994,1225 C4237.49,1283.22 4883.03,1201.37 5119,1285 C5156.4,1298.25 5193.11,1318.45 5226.84,1340.92 " fill="none" id="Model-backto-Layout" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3806.33,1155.44,3810.0666,1161.6075,3817.1968,1160.5305,3813.4602,1154.363,3806.33,1155.44" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[da4e37961616ea89232dc94550b7be3e]
reverse link OperationManager to IFunctionNode--><path codeLine="1201" d="M6173,528.52 C6173,667.26 6173,933.4 6173,1036.37 " fill="none" id="OperationManager-backto-IFunctionNode" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="6173,515.51,6169,521.51,6173,527.51,6177,521.51,6173,515.51" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[79989c5c612cd705f8c6af7a6267fbc0]
reverse link RecorderFactory to IRecorder--><path codeLine="1204" d="M4194,1167.94 C4194,1230.72 4194,1315.46 4194,1380.95 " fill="none" id="RecorderFactory-backto-IRecorder" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="4194,1154.89,4190,1160.89,4194,1166.89,4198,1160.89,4194,1154.89" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[263ae887246c1ce3b32534d14bc96b50]
reverse link Simulator to Model--><path codeLine="1207" d="M3667,887.37 C3667,903.5 3667,919.11 3667,934 " fill="none" id="Simulator-backto-Model" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3667,874.32,3663,880.32,3667,886.32,3671,880.32,3667,874.32" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[420839a3a3a413a1278c95e345e5584e]
reverse link VerticesFactory to AllVertices--><path codeLine="1210" d="M4920,1570.19 C4920,1655.52 4920,1786.83 4920,1886.37 " fill="none" id="VerticesFactory-backto-AllVertices" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="4920,1557.16,4916,1563.16,4920,1569.16,4924,1563.16,4920,1557.16" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[1c85b8207771a3600805682c49a79883]
reverse link ConnGrowth to ConnGrowth::GrowthParams--><path codeLine="1219" d="M2046,2224.97 C2046,2302.1 2046,2385.31 2046,2441.79 " fill="none" id="ConnGrowth-backto-ConnGrowth::GrowthParams" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="2046" cy="2217.64" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2046" x2="2046" y1="2225.64" y2="2209.64"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2038" x2="2054" y1="2217.64" y2="2217.64"/><!--MD5=[7436606c18ecdbda5eaebb84cf9adb19]
reverse link ConnStatic to ConnStatic::DistDestVertex--><path codeLine="1222" d="M1261,2199.18 C1261,2295.71 1261,2408.28 1261,2467.91 " fill="none" id="ConnStatic-backto-ConnStatic::DistDestVertex" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="1261" cy="2192.15" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="1261" x2="1261" y1="2200.15" y2="2184.15"/><line style="stroke:#A80036;stroke-width:1.0;" x1="1253" x2="1269" y1="2192.15" y2="2192.15"/><!--MD5=[5a8d3fbc42f80913afa6dc1778a071da]
reverse link Operations to Operations::op--><path codeLine="1225" d="M6176.54,1521.32 C6184.78,1610.54 6205.36,1833.46 6216.15,1950.34 " fill="none" id="Operations-backto-Operations::op" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="6175.8887" cy="1514.2358" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="6176.6274" x2="6175.15" y1="1522.2016" y2="1506.27"/><line style="stroke:#A80036;stroke-width:1.0;" x1="6167.9229" x2="6183.8545" y1="1514.9745" y2="1513.4971"/><!--MD5=[b6eab63830109b4b10c4568c8e0e5550]
@startuml GraphittiClassDiagram





/' Objects '/

class AllDSSynapses {
	+AllDSSynapses()
	+AllDSSynapses(const int numVertices, const int maxEdges)
	+~AllDSSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDSSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDSSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllDynamicSTDPSynapses {
	+AllDynamicSTDPSynapses()
	+AllDynamicSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllDynamicSTDPSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllEdges {
	+AllEdges()
	+AllEdges(const int numVertices, const int maxEdges)
	+~AllEdges()
	+W_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	#edgeOrdinalToType(const int typeOrdinal) : edgeType
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	+addEdge(edgeType type, const int srcVertex, const int destVertex, const BGFLOAT deltaT) : BGSIZE
	+{abstract} advanceEdge(const BGSIZE iEdg, AllVertices* vertices) : void
	+{abstract} advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	+advanceEdges(AllVertices* vertices, EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+{abstract} copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	+createEdgeIndexMap(shared_ptr<EdgeIndexMap> edgeIndexMap) : void
	+{abstract} deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+eraseEdge(const int neuronIndex, const BGSIZE iEdg) : void
	+load(Archive& archive) : void
	+loadParameters() : void
	+{abstract} printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+save(Archive& archive) : void {query}
	+{abstract} setAdvanceEdgesDeviceParams() : void
	+{abstract} setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllIFNeurons {
	+AllIFNeurons()
	+~AllIFNeurons()
	-IinjectRange_ : BGFLOAT
	-InoiseRange_ : BGFLOAT
	-VinitRange_ : BGFLOAT
	-VresetRange_ : BGFLOAT
	-VrestingRange_ : BGFLOAT
	-VthreshRange_ : BGFLOAT
	-starterVresetRange_ : BGFLOAT
	-starterVthreshRange_ : BGFLOAT
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
	+toString(const int index) : string {query}
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+loadParameters() : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int i) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int i) : void {query}
}


class AllIZHNeurons {
	+AllIZHNeurons()
	+~AllIZHNeurons()
	+{static} Create() : AllVertices*
	-excAconst_ : BGFLOAT
	-excBconst_ : BGFLOAT
	-excCconst_ : BGFLOAT
	-excDconst_ : BGFLOAT
	-inhAconst_ : BGFLOAT
	-inhBconst_ : BGFLOAT
	-inhCconst_ : BGFLOAT
	-inhDconst_ : BGFLOAT
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
	-{static} DEFAULT_a : static constexpr BGFLOAT
	-{static} DEFAULT_b : static constexpr BGFLOAT
	-{static} DEFAULT_c : static constexpr BGFLOAT
	-{static} DEFAULT_d : static constexpr BGFLOAT
	+toString(const int index) : string {query}
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#fire(const int index) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int index) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int index) : void {query}
}


class AllLIFNeurons {
	+AllLIFNeurons()
	+~AllLIFNeurons()
	+{static} Create() : AllVertices*
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#fire(const int index) : void
	+printParameters() : void {query}
}


class AllNeuroEdges {
	+AllNeuroEdges()
	+~AllNeuroEdges()
	+psr_ : BGFLOAT*
	+edgSign(const edgeType type) : int
	+{static} SYNAPSE_STRENGTH_ADJUSTMENT : static constexpr BGFLOAT
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllSTDPSynapses {
	+AllSTDPSynapses()
	+AllSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllSTDPSynapses()
	+{static} Create() : AllEdges*
	+Aneg_E_ : BGFLOAT
	+Aneg_I_ : BGFLOAT
	+Apos_E_ : BGFLOAT
	+Apos_I_ : BGFLOAT
	+Wex_E_ : BGFLOAT
	+Wex_I_ : BGFLOAT
	+defaultSTDPgap_ : BGFLOAT
	#synapticWeightModification(const BGSIZE iEdg, BGFLOAT edgeWeight, double delta) : BGFLOAT
	+tauneg_E_ : BGFLOAT
	+tauneg_I_ : BGFLOAT
	+taupos_E_ : BGFLOAT
	+taupos_I_ : BGFLOAT
	+tauspost_E_ : BGFLOAT
	+tauspost_I_ : BGFLOAT
	+tauspre_E_ : BGFLOAT
	+tauspre_I_ : BGFLOAT
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueuePost(const BGSIZE iEdg) : bool
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyDeviceToHost(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	-stdpLearning(const BGSIZE iEdg, double delta, double epost, double epre, int srcVertex, int destVertex) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllSpikingNeurons {
	+AllSpikingNeurons()
	+~AllSpikingNeurons()
	#fAllowBackPropagation_ : bool
	+getSpikeHistory(int index, int offIndex) : uint64_t
	+vertexEvents_ : vector<EventBuffer>
	+hasFired_ : vector<bool>
	#{abstract} advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, const EdgeIndexMap* edgeIndexMap) : void
	#clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} clearNeuronSpikeCounts(void* allVerticesDevice) : void
	+clearSpikeCounts() : void
	#copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	#copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	#fire(const int index) : void
	+setAdvanceVerticesDeviceParams(AllEdges& synapses) : void
	+setupVertices() : void
}


class AllSpikingSynapses {
	+AllSpikingSynapses()
	+AllSpikingSynapses(const int numVertices, const int maxEdges)
	+~AllSpikingSynapses()
	+{static} Create() : AllEdges*
	+delay_EE_ : BGFLOAT
	+delay_EI_ : BGFLOAT
	+delay_IE_ : BGFLOAT
	+delay_II_ : BGFLOAT
	+tau_EE_ : BGFLOAT
	+tau_EI_ : BGFLOAT
	+tau_IE_ : BGFLOAT
	+tau_II_ : BGFLOAT
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueue(const BGSIZE iEdg) : bool
	#updateDecay(const BGSIZE iEdg, const BGFLOAT deltaT) : bool
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	#copyDeviceToHost(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSpikingSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+preSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setAdvanceEdgesDeviceParams() : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllVertices {
	+AllVertices()
	+~AllVertices()
	+summationPoints_ : BGFLOAT*
	#size_ : int
	#fileLogger_ : log4cplus::Logger
	#vertexLogger_ : log4cplus::Logger
	+{abstract} toString(const int i) : string {query}
	+{abstract} advanceVertices(AllEdges& edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	+{abstract} advanceVertices(AllEdges& edges, const EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+{abstract} copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronHostToDevice(void* allVerticesDevice) : void
	+{abstract} createAllVertices(Layout* layout) : void
	+{abstract} deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+{abstract} setAdvanceVerticesDeviceParams(AllEdges& edges) : void
	+setupVertices() : void
}


class CPUModel {
	+CPUModel()
	+~CPUModel()
	+advance() : void
	+copyCPUtoGPU() : void
	+copyGPUtoCPU() : void
	+finish() : void
	+updateConnections() : void
}


class ConnGrowth {
	+ConnGrowth()
	+~ConnGrowth()
	+W_ : CompleteMatrix*
	+area_ : CompleteMatrix*
	+delta_ : CompleteMatrix*
	+{static} Create() : Connections*
	+growthParams_ : GrowthParams
	+deltaR_ : VectorMatrix*
	+outgrowth_ : VectorMatrix*
	+radii_ : VectorMatrix*
	+rates_ : VectorMatrix*
	+updateConnections(AllVertices& neurons, Layout* layout) : bool
	+radiiSize_ : int
	+spikeCounts_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+printRadii() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* neurons, AllEdges* synapses) : void
	-updateConns(AllVertices& neurons) : void
	-updateFrontiers(const int numVertices, Layout* layout) : void
	-updateOverlap(BGFLOAT numVertices, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& neurons, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnStatic {
	+ConnStatic()
	+~ConnStatic()
	-excWeight_ : BGFLOAT
	+getConnsRadiusThresh() : BGFLOAT {query}
	-inhWeight_ : BGFLOAT
	-rewiringProbability_ : BGFLOAT
	-threshConnsRadius_ : BGFLOAT
	-WCurrentEpoch_ : BGFLOAT*
	+getWCurrentEpoch() : BGFLOAT* {query}
	+{static} Create() : Connections*
	-connsPerVertex_ : int
	-radiiSize_ : int
	-destVertexIndexCurrentEpoch_ : int*
	+getDestVertexIndexCurrentEpoch() : int* {query}
	+getSourceVertexIndexCurrentEpoch() : int* {query}
	-sourceVertexIndexCurrentEpoch_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* vertices, AllEdges* edges) : void
}


abstract class Connections {
	+Connections()
	+~Connections()
	+updateConnections(AllVertices& vertices, Layout* layout) : bool
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	#edges_ : shared_ptr<AllEdges>
	+getEdges() : shared_ptr<AllEdges> {query}
	+getEdgeIndexMap() : shared_ptr<EdgeIndexMap> {query}
	#synapseIndexMap_ : shared_ptr<EdgeIndexMap>
	+createEdgeIndexMap() : void
	+createSynapsesFromWeights(const int numVertices, Layout* layout, AllVertices& vertices, AllEdges& synapses) : void
	+{abstract} loadParameters() : void
	+{abstract} printParameters() : void {query}
	+{abstract} setupConnections(Layout* layout, AllVertices* vertices, AllEdges* synapses) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnectionsFactory {
	-ConnectionsFactory()
	+~ConnectionsFactory()
	-invokeCreateFunction(const string& className) : Connections*
	+{static} getInstance() : ConnectionsFactory*
	-createFunctions : ConnectionsFunctionMap
	-connectionsInstance : shared_ptr<Connections>
	+createConnections(const string& className) : shared_ptr<Connections>
	-registerClass(const string& className, CreateFunction function) : void
}


class DynamicLayout {
	+DynamicLayout()
	+~DynamicLayout()
	-fractionEndogenouslyActive_ : BGFLOAT
	-fractionExcitatory_ : BGFLOAT
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class EdgesFactory {
	-EdgesFactory()
	+~EdgesFactory()
	-invokeCreateFunction(const string& className) : AllEdges*
	+{static} getInstance() : EdgesFactory*
	-createFunctions : EdgesFunctionMap
	+createEdges(const string& className) : shared_ptr<AllEdges>
	-edgesInstance_ : shared_ptr<AllEdges>
	-registerClass(const string& className, CreateFunction function) : void
}


class EventBuffer {
	+EventBuffer(int maxEvents)
	-epochStart_ : int
	+getNumEventsInEpoch() : int {query}
	-numEventsInEpoch_ : int
	-queueEnd_ : int
	-queueFront_ : int
	+getPastEvent(int offset) : uint64_t {query}
	+operator[](int i) : uint64_t {query}
	-eventTimeSteps_ : vector<uint64_t>
	+clear() : void
	+insertEvent(uint64_t timeStep) : void
	+resize(int maxEvents) : void
	+startNewEpoch() : void
}


class FixedLayout {
	+FixedLayout()
	+~FixedLayout()
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class GPUModel {
	+GPUModel()
	+~GPUModel()
	#allVerticesDevice_ : AllSpikingNeuronsDeviceProperties*
	#allEdgesDevice_ : AllSpikingSynapsesDeviceProperties*
	#synapseIndexMapDevice_ : EdgeIndexMap*
	#randNoise_d : float*
	-addEdge(AllEdges& synapses, edgeType type, const int srcVertex, const int destVertex, Coordinate& source, Coordinate& dest, BGFLOAT deltaT) : void
	+advance() : void
	#allocDeviceStruct(void** allVerticesDevice, void** allEdgesDevice) : void
	-allocSynapseImap(int count) : void
	#calcSummationPoint() : void
	+copyCPUtoGPU() : void
	+copyGPUtoCPU() : void
	+copySynapseIndexMapHostToDevice(EdgeIndexMap& synapseIndexMapHost, int numVertices) : void
	-createEdge(AllEdges& synapses, const int neuronIndex, const int synapseIndex, Coordinate source, Coordinate dest, BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(void** allVerticesDevice, void** allEdgesDevice) : void
	-deleteSynapseImap() : void
	-eraseEdge(AllEdges& synapses, const int neuronIndex, const int synapseIndex) : void
	+finish() : void
	+printGPUSynapsesPropsModel() : void {query}
	+setupSim() : void
	+updateConnections() : void
	-updateHistory() : void
}


class GenericFunctionNode {
	+GenericFunctionNode(const Operations::op& operationType, const std::function<void ( )>& function)
	-function<void()
	+~GenericFunctionNode()
	+invokeFunction(const Operations::op& operation) : bool {query}
}


class Hdf5GrowthRecorder {
	+Hdf5GrowthRecorder()
	+~Hdf5GrowthRecorder()
	#radiiHistory_ : BGFLOAT*
	#ratesHistory_ : BGFLOAT*
	#dataSetRadiiHist_ : DataSet
	#dataSetRatesHist_ : DataSet
	+{static} Create() : IRecorder*
	+compileHistories(AllVertices& neurons) : void
	+getValues() : void
	#initDataSet() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+term() : void
	#writeRadiiRates() : void
}


class Hdf5Recorder {
	+Hdf5Recorder()
	#dataSetNeuronThresh_ : DataSet*
	#dataSetNeuronTypes_ : DataSet*
	#dataSetProbedNeurons_ : DataSet*
	#dataSetSimulationEndTime_ : DataSet*
	#dataSetSpikesHist_ : DataSet*
	#dataSetSpikesProbedNeurons_ : DataSet*
	#dataSetStarterNeurons_ : DataSet*
	#dataSetTsim_ : DataSet*
	#dataSetXloc_ : DataSet*
	#dataSetYloc_ : DataSet*
	#resultOut_ : H5File*
	+{static} Create() : IRecorder*
	#offsetSpikesProbedNeurons_ : hsize_t*
	#spikesHistory_ : int*
	#spikesProbedNeurons_ : vector<uint64_t>*
	+compileHistories(AllVertices& neurons) : void
	#getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+init() : void
	#initDataSet() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& neurons) : void
	+term() : void
}


abstract class IFunctionNode {
	+~IFunctionNode()
	#operationType_ : Operations::op
	+{abstract} invokeFunction(const Operations::op& operation) : bool {query}
}


abstract class IRecorder {
	+~IRecorder()
	#fileLogger_ : log4cplus::Logger
	#resultFileName_ : string
	+{abstract} compileHistories(AllVertices& vertices) : void
	#{abstract} getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+{abstract} getValues() : void
	+{abstract} init() : void
	+{abstract} initDefaultValues() : void
	+{abstract} initValues() : void
	+{abstract} printParameters() : void
	+{abstract} saveSimData(const AllVertices& vertices) : void
	+{abstract} term() : void
}


abstract class Layout {
	+Layout()
	+~Layout()
	+numCallerVertices_ : BGSIZE
	+numEndogenouslyActiveNeurons_ : BGSIZE
	+dist2_ : CompleteMatrix*
	+dist_ : CompleteMatrix*
	+xloc_ : VectorMatrix*
	+yloc_ : VectorMatrix*
	-gridLayout_ : bool
	+starterMap_ : bool*
	+{abstract} edgType(const int srcVertex, const int destVertex) : edgeType
	#fileLogger_ : log4cplus::Logger
	+getVertices() : shared_ptr<AllVertices> {query}
	#vertices_ : shared_ptr<AllVertices>
	#callerVertexList_ : vector<int>
	#endogenouslyActiveNeuronList_ : vector<int>
	#inhibitoryNeuronLayout_ : vector<int>
	+probedNeuronList_ : vector<int>
	#psapVertexList_ : vector<int>
	#responderVertexList_ : vector<int>
	+vertexTypeMap_ : vertexType*
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	-initVerticesLocs() : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+setupLayout() : void
}


class LayoutFactory {
	-LayoutFactory()
	+~LayoutFactory()
	-invokeCreateFunction(const string& className) : Layout*
	+{static} getInstance() : LayoutFactory*
	-createFunctions : LayoutFunctionMap
	+createLayout(const string& className) : shared_ptr<Layout>
	-layoutInstance : shared_ptr<Layout>
	-registerClass(const string& className, CreateFunction function) : void
}


abstract class Model {
	+Model()
	+~Model()
	#fileLogger_ : log4cplus::Logger
	#connections_ : shared_ptr<Connections>
	+getConnections() : shared_ptr<Connections> {query}
	+getRecorder() : shared_ptr<IRecorder> {query}
	#recorder_ : shared_ptr<IRecorder>
	+getLayout() : shared_ptr<Layout> {query}
	#layout_ : shared_ptr<Layout>
	+{abstract} advance() : void
	#{abstract} copyCPUtoGPU() : void
	#{abstract} copyGPUtoCPU() : void
	#createAllVertices() : void
	+{abstract} finish() : void
	#logSimStep() : void {query}
	+saveResults() : void
	+setupSim() : void
	+{abstract} updateConnections() : void
	+updateHistory() : void
}


class OperationManager {
	-OperationManager()
	+~OperationManager()
	+{static} getInstance() : OperationManager&
	-functionList_ : list<unique_ptr<IFunctionNode>>
	-logger_ : log4cplus::Logger
	+operationToString(const Operations::op& operation) : string {query}
	+executeOperation(const Operations::op& operation) : void {query}
	+registerOperation(const Operations::op& operation, const function<void ( )>& function) : void
}


class Operations {
}


class RecorderFactory {
	-RecorderFactory()
	+~RecorderFactory()
	-invokeCreateFunction(const string& className) : IRecorder*
	+{static} getInstance() : RecorderFactory*
	-createFunctions : RecorderFunctionMap
	+createRecorder(const string& className) : shared_ptr<IRecorder>
	-recorderInstance : shared_ptr<IRecorder>
	-registerClass(const string& className, CreateFunction function) : void
}


class Simulator {
	-Simulator()
	+~Simulator()
	-deltaT_ : BGFLOAT
	-epochDuration_ : BGFLOAT
	+getDeltaT() : BGFLOAT {query}
	+getEpochDuration() : BGFLOAT {query}
	+getMaxRate() : BGFLOAT {query}
	-maxRate_ : BGFLOAT
	+{static} getInstance() : Simulator&
	+getShort_timer() : Timer
	+getTimer() : Timer
	-short_timer : Timer
	-timer : Timer
	+instantiateSimulatorObjects() : bool
	+getRgEndogenouslyActiveNeuronMap() : bool* {query}
	-rgEndogenouslyActiveNeuronMap_ : bool*
	-currentEpoch_ : int
	+getCurrentStep() : int {query}
	+getHeight() : int {query}
	+getMaxEdgesPerVertex() : int {query}
	+getMaxFiringRate() : int {query}
	+getNumEpochs() : int {query}
	+getTotalVertices() : int {query}
	+getWidth() : int {query}
	-height_ : int
	-maxEdgesPerVertex_ : int
	-maxFiringRate_ : int
	-numEpochs_ : int
	-totalNeurons_ : int
	-width_ : int
	-consoleLogger_ : log4cplus::Logger
	-edgeLogger_ : log4cplus::Logger
	-fileLogger_ : log4cplus::Logger
	+getInitRngSeed() : long {query}
	+getNoiseRngSeed() : long {query}
	-initRngSeed_ : long
	-noiseRngSeed_ : long
	+getModel() : shared_ptr<Model> {query}
	-model_ : shared_ptr<Model>
	-configFileName_ : string
	-deserializationFileName_ : string
	+getConfigFileName() : string {query}
	+getDeserializationFileName() : string {query}
	+getSerializationFileName() : string {query}
	+getStimulusFileName() : string {query}
	-serializationFileName_ : string
	-stimulusFileName_ : string
	+getRgNeuronTypeMap() : vertexType* {query}
	-rgNeuronTypeMap_ : vertexType*
	+advanceEpoch(const int& currentEpoch) : void {query}
	+copyCPUSynapseToGPU() : void
	+copyGPUSynapseToCPU() : void
	+finish() : void
	-freeResources() : void
	+loadParameters() : void
	+printParameters() : void {query}
	+reset() : void
	+saveResults() : void {query}
	+setConfigFileName(const string& fileName) : void
	+setDeserializationFileName(const string& fileName) : void
	+setSerializationFileName(const string& fileName) : void
	+setStimulusFileName(const string& fileName) : void
	+setup() : void
	+simulate() : void
}


class VerticesFactory {
	-VerticesFactory()
	+~VerticesFactory()
	-invokeCreateFunction(const string& className) : AllVertices*
	+{static} getInstance() : VerticesFactory*
	-createFunctions : VerticesFunctionMap
	+createVertices(const string& className) : shared_ptr<AllVertices>
	-verticesInstance : shared_ptr<AllVertices>
	-registerClass(const string& className, CreateFunction function) : void
}


class XmlGrowthRecorder {
	+XmlGrowthRecorder()
	+~XmlGrowthRecorder()
	-radiiHistory_ : CompleteMatrix
	-ratesHistory_ : CompleteMatrix
	+{static} Create() : IRecorder*
	+compileHistories(AllVertices& neurons) : void
	-getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& neurons) : void
}


class XmlRecorder {
	+XmlRecorder()
	+{static} Create() : IRecorder*
	#spikesHistory_ : VectorMatrix
	#resultOut_ : ofstream
	+compileHistories(AllVertices& vertices) : void
	#getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+init() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& vertices) : void
	+term() : void
}


class XmlSTDPRecorder {
	+XmlSTDPRecorder()
	+~XmlSTDPRecorder()
	+{static} Create() : IRecorder*
	+toXML(string name, vector<vector<BGFLOAT>> MatrixToWrite) : string {query}
	+toXML(string name, vector<vector<int>> MatrixToWrite) : string {query}
	#weightsHistory_ : vector<vector<BGFLOAT>>
	#destNeuronIndexHistory_ : vector<vector<int>>
	#sourceNeuronIndexHistory_ : vector<vector<int>>
	+compileHistories(AllVertices& neurons) : void
	+getValues() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& neurons) : void
}


enum Operations::op {
	copyFromGPU
	copyToGPU
	deallocateGPUMemory
	deserialize
	loadParameters
	printParameters
	restoreToDefault
	serialize
}


enum enumClassSynapses {
	classAllDSSynapses
	classAllDynamicSTDPSynapses
	classAllSTDPSynapses
	classAllSpikingSynapses
	undefClassSynapses
}


class AllDSSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllDynamicSTDPSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllEdgesDeviceProperties {
	+W_ : BGFLOAT*
	+psr_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
}


class AllIFNeuronsDeviceProperties {
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
}


class AllIZHNeuronsDeviceProperties {
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
}


class AllSTDPSynapsesDeviceProperties {
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+useFroemkeDanSTDP_ : bool*
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
}


class AllSpikingNeuronsDeviceProperties {
	+hasFired_ : bool*
	+spikeCountOffset_ : int*
	+spikeCount_ : int*
	+spikeHistory_ : uint64_t**
}


class AllSpikingSynapsesDeviceProperties {
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
}


class AllVerticesDeviceProperties {
	+summationPoints_ : BGFLOAT*
}


class ConnGrowth::GrowthParams {
	+beta : BGFLOAT
	+epsilon : BGFLOAT
	+maxRate : BGFLOAT
	+minRadius : BGFLOAT
	+rho : BGFLOAT
	+startRadius : BGFLOAT
	+targetRate : BGFLOAT
}


class ConnStatic::DistDestVertex {
	+dist : BGFLOAT
	+operator<(DistDestVertex other) : bool {query}
	+destVertex : int
}


class EdgeIndexMap {
	+EdgeIndexMap()
	+EdgeIndexMap(int vertexCount, int edgeCount)
	+~EdgeIndexMap()
	-numOfEdges_ : BGSIZE
	-numOfVertices_ : BGSIZE
	+incomingEdgeBegin_ : BGSIZE*
	+incomingEdgeCount_ : BGSIZE*
	+incomingEdgeIndexMap_ : BGSIZE*
	+outgoingEdgeBegin_ : BGSIZE*
	+outgoingEdgeCount_ : BGSIZE*
	+outgoingEdgeIndexMap_ : BGSIZE*
}





/' Inheritance relationships '/

.AllEdges <|- - .AllNeuroEdges


.AllEdgesDeviceProperties <|- - .AllSpikingSynapsesDeviceProperties


.AllIFNeurons <|- - .AllIZHNeurons


.AllIFNeurons <|- - .AllLIFNeurons


.AllIFNeuronsDeviceProperties <|- - .AllIZHNeuronsDeviceProperties


.AllNeuroEdges <|- - .AllSpikingSynapses


.AllSTDPSynapses <|- - .AllDynamicSTDPSynapses


.AllSTDPSynapsesDeviceProperties <|- - .AllDynamicSTDPSynapsesDeviceProperties


.AllSpikingNeurons <|- - .AllIFNeurons


.AllSpikingNeuronsDeviceProperties <|- - .AllIFNeuronsDeviceProperties


.AllSpikingSynapses <|- - .AllDSSynapses


.AllSpikingSynapses <|- - .AllSTDPSynapses


.AllSpikingSynapsesDeviceProperties <|- - .AllDSSynapsesDeviceProperties


.AllSpikingSynapsesDeviceProperties <|- - .AllSTDPSynapsesDeviceProperties


.AllVertices <|- - .AllSpikingNeurons


.AllVerticesDeviceProperties <|- - .AllSpikingNeuronsDeviceProperties


.Connections <|- - .ConnGrowth


.Connections <|- - .ConnStatic


.Hdf5Recorder <|- - .Hdf5GrowthRecorder


.IFunctionNode <|- - .GenericFunctionNode


.IRecorder <|- - .Hdf5Recorder


.IRecorder <|- - .XmlRecorder


.Layout <|- - .DynamicLayout


.Layout <|- - .FixedLayout


.Model <|- - .CPUModel


.Model <|- - .GPUModel


.XmlRecorder <|- - .XmlGrowthRecorder


.XmlRecorder <|- - .XmlSTDPRecorder





/' Aggregation relationships '/

.AllSpikingNeurons *- - .EventBuffer


.Connections *- - .AllEdges


.Connections *- - .EdgeIndexMap


.ConnectionsFactory *- - .Connections


.EdgesFactory *- - .AllEdges


.GPUModel o- - .AllSpikingNeuronsDeviceProperties


.GPUModel o- - .AllSpikingSynapsesDeviceProperties


.GPUModel o- - .EdgeIndexMap


.IFunctionNode *- - .Operations


.IFunctionNode *- - .Operations::op


.Layout *- - .AllVertices


.LayoutFactory *- - .Layout


.Model *- - .Connections


.Model *- - .IRecorder


.Model *- - .Layout


.OperationManager *- - .IFunctionNode


.RecorderFactory *- - .IRecorder


.Simulator *- - .Model


.VerticesFactory *- - .AllVertices






/' Nested objects '/

.ConnGrowth +- - .ConnGrowth::GrowthParams


.ConnStatic +- - .ConnStatic::DistDestVertex


.Operations +- - .Operations::op




@enduml

@startuml GraphittiClassDiagram






class AllDSSynapses {
	+AllDSSynapses()
	+AllDSSynapses(const int numVertices, const int maxEdges)
	+~AllDSSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDSSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDSSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllDynamicSTDPSynapses {
	+AllDynamicSTDPSynapses()
	+AllDynamicSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllDynamicSTDPSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllEdges {
	+AllEdges()
	+AllEdges(const int numVertices, const int maxEdges)
	+~AllEdges()
	+W_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	#edgeOrdinalToType(const int typeOrdinal) : edgeType
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	+addEdge(edgeType type, const int srcVertex, const int destVertex, const BGFLOAT deltaT) : BGSIZE
	+{abstract} advanceEdge(const BGSIZE iEdg, AllVertices* vertices) : void
	+{abstract} advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	+advanceEdges(AllVertices* vertices, EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+{abstract} copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	+createEdgeIndexMap(shared_ptr<EdgeIndexMap> edgeIndexMap) : void
	+{abstract} deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+eraseEdge(const int neuronIndex, const BGSIZE iEdg) : void
	+load(Archive& archive) : void
	+loadParameters() : void
	+{abstract} printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+save(Archive& archive) : void {query}
	+{abstract} setAdvanceEdgesDeviceParams() : void
	+{abstract} setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllIFNeurons {
	+AllIFNeurons()
	+~AllIFNeurons()
	-IinjectRange_ : BGFLOAT
	-InoiseRange_ : BGFLOAT
	-VinitRange_ : BGFLOAT
	-VresetRange_ : BGFLOAT
	-VrestingRange_ : BGFLOAT
	-VthreshRange_ : BGFLOAT
	-starterVresetRange_ : BGFLOAT
	-starterVthreshRange_ : BGFLOAT
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
	+toString(const int index) : string {query}
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+loadParameters() : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int i) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int i) : void {query}
}


class AllIZHNeurons {
	+AllIZHNeurons()
	+~AllIZHNeurons()
	+{static} Create() : AllVertices*
	-excAconst_ : BGFLOAT
	-excBconst_ : BGFLOAT
	-excCconst_ : BGFLOAT
	-excDconst_ : BGFLOAT
	-inhAconst_ : BGFLOAT
	-inhBconst_ : BGFLOAT
	-inhCconst_ : BGFLOAT
	-inhDconst_ : BGFLOAT
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
	-{static} DEFAULT_a : static constexpr BGFLOAT
	-{static} DEFAULT_b : static constexpr BGFLOAT
	-{static} DEFAULT_c : static constexpr BGFLOAT
	-{static} DEFAULT_d : static constexpr BGFLOAT
	+toString(const int index) : string {query}
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#fire(const int index) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int index) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int index) : void {query}
}


class AllLIFNeurons {
	+AllLIFNeurons()
	+~AllLIFNeurons()
	+{static} Create() : AllVertices*
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#fire(const int index) : void
	+printParameters() : void {query}
}


class AllNeuroEdges {
	+AllNeuroEdges()
	+~AllNeuroEdges()
	+psr_ : BGFLOAT*
	+edgSign(const edgeType type) : int
	+{static} SYNAPSE_STRENGTH_ADJUSTMENT : static constexpr BGFLOAT
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllSTDPSynapses {
	+AllSTDPSynapses()
	+AllSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllSTDPSynapses()
	+{static} Create() : AllEdges*
	+Aneg_E_ : BGFLOAT
	+Aneg_I_ : BGFLOAT
	+Apos_E_ : BGFLOAT
	+Apos_I_ : BGFLOAT
	+Wex_E_ : BGFLOAT
	+Wex_I_ : BGFLOAT
	+defaultSTDPgap_ : BGFLOAT
	#synapticWeightModification(const BGSIZE iEdg, BGFLOAT edgeWeight, double delta) : BGFLOAT
	+tauneg_E_ : BGFLOAT
	+tauneg_I_ : BGFLOAT
	+taupos_E_ : BGFLOAT
	+taupos_I_ : BGFLOAT
	+tauspost_E_ : BGFLOAT
	+tauspost_I_ : BGFLOAT
	+tauspre_E_ : BGFLOAT
	+tauspre_I_ : BGFLOAT
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueuePost(const BGSIZE iEdg) : bool
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyDeviceToHost(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	-stdpLearning(const BGSIZE iEdg, double delta, double epost, double epre, int srcVertex, int destVertex) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllSpikingNeurons {
	+AllSpikingNeurons()
	+~AllSpikingNeurons()
	#fAllowBackPropagation_ : bool
	+getSpikeHistory(int index, int offIndex) : uint64_t
	+vertexEvents_ : vector<EventBuffer>
	+hasFired_ : vector<bool>
	#{abstract} advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, const EdgeIndexMap* edgeIndexMap) : void
	#clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} clearNeuronSpikeCounts(void* allVerticesDevice) : void
	+clearSpikeCounts() : void
	#copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	#copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	#fire(const int index) : void
	+setAdvanceVerticesDeviceParams(AllEdges& synapses) : void
	+setupVertices() : void
}


class AllSpikingSynapses {
	+AllSpikingSynapses()
	+AllSpikingSynapses(const int numVertices, const int maxEdges)
	+~AllSpikingSynapses()
	+{static} Create() : AllEdges*
	+delay_EE_ : BGFLOAT
	+delay_EI_ : BGFLOAT
	+delay_IE_ : BGFLOAT
	+delay_II_ : BGFLOAT
	+tau_EE_ : BGFLOAT
	+tau_EI_ : BGFLOAT
	+tau_IE_ : BGFLOAT
	+tau_II_ : BGFLOAT
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueue(const BGSIZE iEdg) : bool
	#updateDecay(const BGSIZE iEdg, const BGFLOAT deltaT) : bool
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	#copyDeviceToHost(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSpikingSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+preSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setAdvanceEdgesDeviceParams() : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllVertices {
	+AllVertices()
	+~AllVertices()
	+summationPoints_ : BGFLOAT*
	#size_ : int
	#fileLogger_ : log4cplus::Logger
	#vertexLogger_ : log4cplus::Logger
	+{abstract} toString(const int i) : string {query}
	+{abstract} advanceVertices(AllEdges& edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	+{abstract} advanceVertices(AllEdges& edges, const EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+{abstract} copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronHostToDevice(void* allVerticesDevice) : void
	+{abstract} createAllVertices(Layout* layout) : void
	+{abstract} deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+{abstract} setAdvanceVerticesDeviceParams(AllEdges& edges) : void
	+setupVertices() : void
}


class CPUModel {
	+CPUModel()
	+~CPUModel()
	+advance() : void
	+copyCPUtoGPU() : void
	+copyGPUtoCPU() : void
	+finish() : void
	+updateConnections() : void
}


class ConnGrowth {
	+ConnGrowth()
	+~ConnGrowth()
	+W_ : CompleteMatrix*
	+area_ : CompleteMatrix*
	+delta_ : CompleteMatrix*
	+{static} Create() : Connections*
	+growthParams_ : GrowthParams
	+deltaR_ : VectorMatrix*
	+outgrowth_ : VectorMatrix*
	+radii_ : VectorMatrix*
	+rates_ : VectorMatrix*
	+updateConnections(AllVertices& neurons, Layout* layout) : bool
	+radiiSize_ : int
	+spikeCounts_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+printRadii() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* neurons, AllEdges* synapses) : void
	-updateConns(AllVertices& neurons) : void
	-updateFrontiers(const int numVertices, Layout* layout) : void
	-updateOverlap(BGFLOAT numVertices, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& neurons, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnStatic {
	+ConnStatic()
	+~ConnStatic()
	-excWeight_ : BGFLOAT
	+getConnsRadiusThresh() : BGFLOAT {query}
	-inhWeight_ : BGFLOAT
	-rewiringProbability_ : BGFLOAT
	-threshConnsRadius_ : BGFLOAT
	-WCurrentEpoch_ : BGFLOAT*
	+getWCurrentEpoch() : BGFLOAT* {query}
	+{static} Create() : Connections*
	-connsPerVertex_ : int
	-radiiSize_ : int
	-destVertexIndexCurrentEpoch_ : int*
	+getDestVertexIndexCurrentEpoch() : int* {query}
	+getSourceVertexIndexCurrentEpoch() : int* {query}
	-sourceVertexIndexCurrentEpoch_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* vertices, AllEdges* edges) : void
}


abstract class Connections {
	+Connections()
	+~Connections()
	+updateConnections(AllVertices& vertices, Layout* layout) : bool
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	#edges_ : shared_ptr<AllEdges>
	+getEdges() : shared_ptr<AllEdges> {query}
	+getEdgeIndexMap() : shared_ptr<EdgeIndexMap> {query}
	#synapseIndexMap_ : shared_ptr<EdgeIndexMap>
	+createEdgeIndexMap() : void
	+createSynapsesFromWeights(const int numVertices, Layout* layout, AllVertices& vertices, AllEdges& synapses) : void
	+{abstract} loadParameters() : void
	+{abstract} printParameters() : void {query}
	+{abstract} setupConnections(Layout* layout, AllVertices* vertices, AllEdges* synapses) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnectionsFactory {
	-ConnectionsFactory()
	+~ConnectionsFactory()
	-invokeCreateFunction(const string& className) : Connections*
	+{static} getInstance() : ConnectionsFactory*
	-createFunctions : ConnectionsFunctionMap
	-connectionsInstance : shared_ptr<Connections>
	+createConnections(const string& className) : shared_ptr<Connections>
	-registerClass(const string& className, CreateFunction function) : void
}


class DynamicLayout {
	+DynamicLayout()
	+~DynamicLayout()
	-fractionEndogenouslyActive_ : BGFLOAT
	-fractionExcitatory_ : BGFLOAT
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class EdgesFactory {
	-EdgesFactory()
	+~EdgesFactory()
	-invokeCreateFunction(const string& className) : AllEdges*
	+{static} getInstance() : EdgesFactory*
	-createFunctions : EdgesFunctionMap
	+createEdges(const string& className) : shared_ptr<AllEdges>
	-edgesInstance_ : shared_ptr<AllEdges>
	-registerClass(const string& className, CreateFunction function) : void
}


class EventBuffer {
	+EventBuffer(int maxEvents)
	-epochStart_ : int
	+getNumEventsInEpoch() : int {query}
	-numEventsInEpoch_ : int
	-queueEnd_ : int
	-queueFront_ : int
	+getPastEvent(int offset) : uint64_t {query}
	+operator[](int i) : uint64_t {query}
	-eventTimeSteps_ : vector<uint64_t>
	+clear() : void
	+insertEvent(uint64_t timeStep) : void
	+resize(int maxEvents) : void
	+startNewEpoch() : void
}


class FixedLayout {
	+FixedLayout()
	+~FixedLayout()
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class GPUModel {
	+GPUModel()
	+~GPUModel()
	#allVerticesDevice_ : AllSpikingNeuronsDeviceProperties*
	#allEdgesDevice_ : AllSpikingSynapsesDeviceProperties*
	#synapseIndexMapDevice_ : EdgeIndexMap*
	#randNoise_d : float*
	-addEdge(AllEdges& synapses, edgeType type, const int srcVertex, const int destVertex, Coordinate& source, Coordinate& dest, BGFLOAT deltaT) : void
	+advance() : void
	#allocDeviceStruct(void** allVerticesDevice, void** allEdgesDevice) : void
	-allocSynapseImap(int count) : void
	#calcSummationPoint() : void
	+copyCPUtoGPU() : void
	+copyGPUtoCPU() : void
	+copySynapseIndexMapHostToDevice(EdgeIndexMap& synapseIndexMapHost, int numVertices) : void
	-createEdge(AllEdges& synapses, const int neuronIndex, const int synapseIndex, Coordinate source, Coordinate dest, BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(void** allVerticesDevice, void** allEdgesDevice) : void
	-deleteSynapseImap() : void
	-eraseEdge(AllEdges& synapses, const int neuronIndex, const int synapseIndex) : void
	+finish() : void
	+printGPUSynapsesPropsModel() : void {query}
	+setupSim() : void
	+updateConnections() : void
	-updateHistory() : void
}


class GenericFunctionNode {
	+GenericFunctionNode(const Operations::op& operationType, const std::function<void ( )>& function)
	-function<void()
	+~GenericFunctionNode()
	+invokeFunction(const Operations::op& operation) : bool {query}
}


class Hdf5GrowthRecorder {
	+Hdf5GrowthRecorder()
	+~Hdf5GrowthRecorder()
	#radiiHistory_ : BGFLOAT*
	#ratesHistory_ : BGFLOAT*
	#dataSetRadiiHist_ : DataSet
	#dataSetRatesHist_ : DataSet
	+{static} Create() : IRecorder*
	+compileHistories(AllVertices& neurons) : void
	+getValues() : void
	#initDataSet() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+term() : void
	#writeRadiiRates() : void
}


class Hdf5Recorder {
	+Hdf5Recorder()
	#dataSetNeuronThresh_ : DataSet*
	#dataSetNeuronTypes_ : DataSet*
	#dataSetProbedNeurons_ : DataSet*
	#dataSetSimulationEndTime_ : DataSet*
	#dataSetSpikesHist_ : DataSet*
	#dataSetSpikesProbedNeurons_ : DataSet*
	#dataSetStarterNeurons_ : DataSet*
	#dataSetTsim_ : DataSet*
	#dataSetXloc_ : DataSet*
	#dataSetYloc_ : DataSet*
	#resultOut_ : H5File*
	+{static} Create() : IRecorder*
	#offsetSpikesProbedNeurons_ : hsize_t*
	#spikesHistory_ : int*
	#spikesProbedNeurons_ : vector<uint64_t>*
	+compileHistories(AllVertices& neurons) : void
	#getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+init() : void
	#initDataSet() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& neurons) : void
	+term() : void
}


abstract class IFunctionNode {
	+~IFunctionNode()
	#operationType_ : Operations::op
	+{abstract} invokeFunction(const Operations::op& operation) : bool {query}
}


abstract class IRecorder {
	+~IRecorder()
	#fileLogger_ : log4cplus::Logger
	#resultFileName_ : string
	+{abstract} compileHistories(AllVertices& vertices) : void
	#{abstract} getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+{abstract} getValues() : void
	+{abstract} init() : void
	+{abstract} initDefaultValues() : void
	+{abstract} initValues() : void
	+{abstract} printParameters() : void
	+{abstract} saveSimData(const AllVertices& vertices) : void
	+{abstract} term() : void
}


abstract class Layout {
	+Layout()
	+~Layout()
	+numCallerVertices_ : BGSIZE
	+numEndogenouslyActiveNeurons_ : BGSIZE
	+dist2_ : CompleteMatrix*
	+dist_ : CompleteMatrix*
	+xloc_ : VectorMatrix*
	+yloc_ : VectorMatrix*
	-gridLayout_ : bool
	+starterMap_ : bool*
	+{abstract} edgType(const int srcVertex, const int destVertex) : edgeType
	#fileLogger_ : log4cplus::Logger
	+getVertices() : shared_ptr<AllVertices> {query}
	#vertices_ : shared_ptr<AllVertices>
	#callerVertexList_ : vector<int>
	#endogenouslyActiveNeuronList_ : vector<int>
	#inhibitoryNeuronLayout_ : vector<int>
	+probedNeuronList_ : vector<int>
	#psapVertexList_ : vector<int>
	#responderVertexList_ : vector<int>
	+vertexTypeMap_ : vertexType*
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	-initVerticesLocs() : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+setupLayout() : void
}


class LayoutFactory {
	-LayoutFactory()
	+~LayoutFactory()
	-invokeCreateFunction(const string& className) : Layout*
	+{static} getInstance() : LayoutFactory*
	-createFunctions : LayoutFunctionMap
	+createLayout(const string& className) : shared_ptr<Layout>
	-layoutInstance : shared_ptr<Layout>
	-registerClass(const string& className, CreateFunction function) : void
}


abstract class Model {
	+Model()
	+~Model()
	#fileLogger_ : log4cplus::Logger
	#connections_ : shared_ptr<Connections>
	+getConnections() : shared_ptr<Connections> {query}
	+getRecorder() : shared_ptr<IRecorder> {query}
	#recorder_ : shared_ptr<IRecorder>
	+getLayout() : shared_ptr<Layout> {query}
	#layout_ : shared_ptr<Layout>
	+{abstract} advance() : void
	#{abstract} copyCPUtoGPU() : void
	#{abstract} copyGPUtoCPU() : void
	#createAllVertices() : void
	+{abstract} finish() : void
	#logSimStep() : void {query}
	+saveResults() : void
	+setupSim() : void
	+{abstract} updateConnections() : void
	+updateHistory() : void
}


class OperationManager {
	-OperationManager()
	+~OperationManager()
	+{static} getInstance() : OperationManager&
	-functionList_ : list<unique_ptr<IFunctionNode>>
	-logger_ : log4cplus::Logger
	+operationToString(const Operations::op& operation) : string {query}
	+executeOperation(const Operations::op& operation) : void {query}
	+registerOperation(const Operations::op& operation, const function<void ( )>& function) : void
}


class Operations {
}


class RecorderFactory {
	-RecorderFactory()
	+~RecorderFactory()
	-invokeCreateFunction(const string& className) : IRecorder*
	+{static} getInstance() : RecorderFactory*
	-createFunctions : RecorderFunctionMap
	+createRecorder(const string& className) : shared_ptr<IRecorder>
	-recorderInstance : shared_ptr<IRecorder>
	-registerClass(const string& className, CreateFunction function) : void
}


class Simulator {
	-Simulator()
	+~Simulator()
	-deltaT_ : BGFLOAT
	-epochDuration_ : BGFLOAT
	+getDeltaT() : BGFLOAT {query}
	+getEpochDuration() : BGFLOAT {query}
	+getMaxRate() : BGFLOAT {query}
	-maxRate_ : BGFLOAT
	+{static} getInstance() : Simulator&
	+getShort_timer() : Timer
	+getTimer() : Timer
	-short_timer : Timer
	-timer : Timer
	+instantiateSimulatorObjects() : bool
	+getRgEndogenouslyActiveNeuronMap() : bool* {query}
	-rgEndogenouslyActiveNeuronMap_ : bool*
	-currentEpoch_ : int
	+getCurrentStep() : int {query}
	+getHeight() : int {query}
	+getMaxEdgesPerVertex() : int {query}
	+getMaxFiringRate() : int {query}
	+getNumEpochs() : int {query}
	+getTotalVertices() : int {query}
	+getWidth() : int {query}
	-height_ : int
	-maxEdgesPerVertex_ : int
	-maxFiringRate_ : int
	-numEpochs_ : int
	-totalNeurons_ : int
	-width_ : int
	-consoleLogger_ : log4cplus::Logger
	-edgeLogger_ : log4cplus::Logger
	-fileLogger_ : log4cplus::Logger
	+getInitRngSeed() : long {query}
	+getNoiseRngSeed() : long {query}
	-initRngSeed_ : long
	-noiseRngSeed_ : long
	+getModel() : shared_ptr<Model> {query}
	-model_ : shared_ptr<Model>
	-configFileName_ : string
	-deserializationFileName_ : string
	+getConfigFileName() : string {query}
	+getDeserializationFileName() : string {query}
	+getSerializationFileName() : string {query}
	+getStimulusFileName() : string {query}
	-serializationFileName_ : string
	-stimulusFileName_ : string
	+getRgNeuronTypeMap() : vertexType* {query}
	-rgNeuronTypeMap_ : vertexType*
	+advanceEpoch(const int& currentEpoch) : void {query}
	+copyCPUSynapseToGPU() : void
	+copyGPUSynapseToCPU() : void
	+finish() : void
	-freeResources() : void
	+loadParameters() : void
	+printParameters() : void {query}
	+reset() : void
	+saveResults() : void {query}
	+setConfigFileName(const string& fileName) : void
	+setDeserializationFileName(const string& fileName) : void
	+setSerializationFileName(const string& fileName) : void
	+setStimulusFileName(const string& fileName) : void
	+setup() : void
	+simulate() : void
}


class VerticesFactory {
	-VerticesFactory()
	+~VerticesFactory()
	-invokeCreateFunction(const string& className) : AllVertices*
	+{static} getInstance() : VerticesFactory*
	-createFunctions : VerticesFunctionMap
	+createVertices(const string& className) : shared_ptr<AllVertices>
	-verticesInstance : shared_ptr<AllVertices>
	-registerClass(const string& className, CreateFunction function) : void
}


class XmlGrowthRecorder {
	+XmlGrowthRecorder()
	+~XmlGrowthRecorder()
	-radiiHistory_ : CompleteMatrix
	-ratesHistory_ : CompleteMatrix
	+{static} Create() : IRecorder*
	+compileHistories(AllVertices& neurons) : void
	-getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& neurons) : void
}


class XmlRecorder {
	+XmlRecorder()
	+{static} Create() : IRecorder*
	#spikesHistory_ : VectorMatrix
	#resultOut_ : ofstream
	+compileHistories(AllVertices& vertices) : void
	#getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+init() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& vertices) : void
	+term() : void
}


class XmlSTDPRecorder {
	+XmlSTDPRecorder()
	+~XmlSTDPRecorder()
	+{static} Create() : IRecorder*
	+toXML(string name, vector<vector<BGFLOAT>> MatrixToWrite) : string {query}
	+toXML(string name, vector<vector<int>> MatrixToWrite) : string {query}
	#weightsHistory_ : vector<vector<BGFLOAT>>
	#destNeuronIndexHistory_ : vector<vector<int>>
	#sourceNeuronIndexHistory_ : vector<vector<int>>
	+compileHistories(AllVertices& neurons) : void
	+getValues() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& neurons) : void
}


enum Operations::op {
	copyFromGPU
	copyToGPU
	deallocateGPUMemory
	deserialize
	loadParameters
	printParameters
	restoreToDefault
	serialize
}


enum enumClassSynapses {
	classAllDSSynapses
	classAllDynamicSTDPSynapses
	classAllSTDPSynapses
	classAllSpikingSynapses
	undefClassSynapses
}


class AllDSSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllDynamicSTDPSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllEdgesDeviceProperties {
	+W_ : BGFLOAT*
	+psr_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
}


class AllIFNeuronsDeviceProperties {
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
}


class AllIZHNeuronsDeviceProperties {
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
}


class AllSTDPSynapsesDeviceProperties {
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+useFroemkeDanSTDP_ : bool*
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
}


class AllSpikingNeuronsDeviceProperties {
	+hasFired_ : bool*
	+spikeCountOffset_ : int*
	+spikeCount_ : int*
	+spikeHistory_ : uint64_t**
}


class AllSpikingSynapsesDeviceProperties {
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
}


class AllVerticesDeviceProperties {
	+summationPoints_ : BGFLOAT*
}


class ConnGrowth::GrowthParams {
	+beta : BGFLOAT
	+epsilon : BGFLOAT
	+maxRate : BGFLOAT
	+minRadius : BGFLOAT
	+rho : BGFLOAT
	+startRadius : BGFLOAT
	+targetRate : BGFLOAT
}


class ConnStatic::DistDestVertex {
	+dist : BGFLOAT
	+operator<(DistDestVertex other) : bool {query}
	+destVertex : int
}


class EdgeIndexMap {
	+EdgeIndexMap()
	+EdgeIndexMap(int vertexCount, int edgeCount)
	+~EdgeIndexMap()
	-numOfEdges_ : BGSIZE
	-numOfVertices_ : BGSIZE
	+incomingEdgeBegin_ : BGSIZE*
	+incomingEdgeCount_ : BGSIZE*
	+incomingEdgeIndexMap_ : BGSIZE*
	+outgoingEdgeBegin_ : BGSIZE*
	+outgoingEdgeCount_ : BGSIZE*
	+outgoingEdgeIndexMap_ : BGSIZE*
}






.AllEdges <|- - .AllNeuroEdges


.AllEdgesDeviceProperties <|- - .AllSpikingSynapsesDeviceProperties


.AllIFNeurons <|- - .AllIZHNeurons


.AllIFNeurons <|- - .AllLIFNeurons


.AllIFNeuronsDeviceProperties <|- - .AllIZHNeuronsDeviceProperties


.AllNeuroEdges <|- - .AllSpikingSynapses


.AllSTDPSynapses <|- - .AllDynamicSTDPSynapses


.AllSTDPSynapsesDeviceProperties <|- - .AllDynamicSTDPSynapsesDeviceProperties


.AllSpikingNeurons <|- - .AllIFNeurons


.AllSpikingNeuronsDeviceProperties <|- - .AllIFNeuronsDeviceProperties


.AllSpikingSynapses <|- - .AllDSSynapses


.AllSpikingSynapses <|- - .AllSTDPSynapses


.AllSpikingSynapsesDeviceProperties <|- - .AllDSSynapsesDeviceProperties


.AllSpikingSynapsesDeviceProperties <|- - .AllSTDPSynapsesDeviceProperties


.AllVertices <|- - .AllSpikingNeurons


.AllVerticesDeviceProperties <|- - .AllSpikingNeuronsDeviceProperties


.Connections <|- - .ConnGrowth


.Connections <|- - .ConnStatic


.Hdf5Recorder <|- - .Hdf5GrowthRecorder


.IFunctionNode <|- - .GenericFunctionNode


.IRecorder <|- - .Hdf5Recorder


.IRecorder <|- - .XmlRecorder


.Layout <|- - .DynamicLayout


.Layout <|- - .FixedLayout


.Model <|- - .CPUModel


.Model <|- - .GPUModel


.XmlRecorder <|- - .XmlGrowthRecorder


.XmlRecorder <|- - .XmlSTDPRecorder






.AllSpikingNeurons *- - .EventBuffer


.Connections *- - .AllEdges


.Connections *- - .EdgeIndexMap


.ConnectionsFactory *- - .Connections


.EdgesFactory *- - .AllEdges


.GPUModel o- - .AllSpikingNeuronsDeviceProperties


.GPUModel o- - .AllSpikingSynapsesDeviceProperties


.GPUModel o- - .EdgeIndexMap


.IFunctionNode *- - .Operations


.IFunctionNode *- - .Operations::op


.Layout *- - .AllVertices


.LayoutFactory *- - .Layout


.Model *- - .Connections


.Model *- - .IRecorder


.Model *- - .Layout


.OperationManager *- - .IFunctionNode


.RecorderFactory *- - .IRecorder


.Simulator *- - .Model


.VerticesFactory *- - .AllVertices







.ConnGrowth +- - .ConnGrowth::GrowthParams


.ConnStatic +- - .ConnStatic::DistDestVertex


.Operations +- - .Operations::op




@enduml

PlantUML version 1.2020.23(Sun Dec 13 19:14:58 GMT 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>