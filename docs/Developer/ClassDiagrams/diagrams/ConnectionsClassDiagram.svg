<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3559px" preserveAspectRatio="none" style="width:3121px;height:3559px;" version="1.1" viewBox="0 0 3121 3559" width="3121px" zoomAndPan="magnify"><defs><filter height="300%" id="fm7xoaais3fge" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[935a686a552498c9fe3db149d943753f]
class AllDSSynapses--><rect codeLine="8" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="444.9453" id="AllDSSynapses" style="stroke:#A80036;stroke-width:1.5;" width="724" x="9" y="2397.5"/><ellipse cx="326.75" cy="2413.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M326.6875,2409.3281 Q325.9375,2409.3281 325.375,2409.625 Q324.8125,2409.9063 324.4219,2410.4375 Q324.0313,2410.9688 323.8281,2411.75 Q323.6406,2412.5156 323.6406,2413.4688 Q323.6406,2414.4375 323.8125,2415.2031 Q324,2415.9531 324.3594,2416.4688 Q324.7344,2416.9844 325.3125,2417.2656 Q325.8906,2417.5313 326.6875,2417.5313 Q327.4219,2417.5313 328.1563,2417.3594 Q328.9063,2417.1875 329.7813,2416.8906 L329.7813,2419.0469 Q329.375,2419.2031 328.9844,2419.3281 Q328.5938,2419.4375 328.1875,2419.5156 Q327.7813,2419.5938 327.3594,2419.625 Q326.9375,2419.6719 326.4375,2419.6719 Q325.0313,2419.6719 324,2419.2188 Q322.9844,2418.7656 322.3125,2417.9531 Q321.6406,2417.1406 321.3125,2416 Q320.9844,2414.8438 320.9844,2413.4531 Q320.9844,2412.0781 321.3594,2410.9219 Q321.7344,2409.7656 322.4531,2408.9375 Q323.1719,2408.1094 324.2344,2407.6563 Q325.2969,2407.1875 326.6875,2407.1875 Q327.5938,2407.1875 328.5,2407.4219 Q329.4063,2407.6406 330.2344,2408.0469 L329.4063,2410.1406 Q328.7188,2409.8125 328.0313,2409.5781 Q327.3438,2409.3281 326.6875,2409.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="347.25" y="2417.6543">AllDSSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="732" y1="2429.5" y2="2429.5"/><ellipse cx="20" cy="2440.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="29" y="2443.7104">D_ : BGFLOAT*</text><ellipse cx="20" cy="2453.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="29" y="2456.5151">F_ : BGFLOAT*</text><ellipse cx="20" cy="2466.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="29" y="2469.3198">U_ : BGFLOAT*</text><ellipse cx="20" cy="2478.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="29" y="2482.1245">r_ : BGFLOAT*</text><ellipse cx="20" cy="2491.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="29" y="2494.9292">u_ : BGFLOAT*</text><ellipse cx="20" cy="2504.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="29" y="2507.7339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="732" y1="2514.3281" y2="2514.3281"/><ellipse cx="20" cy="2525.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="29" y="2528.5386">AllDSSynapses()</text><ellipse cx="20" cy="2538.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="29" y="2541.3433">AllDSSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="20" cy="2550.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="29" y="2554.1479">~AllDSSynapses()</text><ellipse cx="20" cy="2563.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="29" y="2566.9526">Create() : AllEdges*</text><polygon fill="#FFFF44" points="20,2571.5469,24,2575.5469,20,2579.5469,16,2575.5469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="29" y="2579.7573">allocDeviceStruct(AllDSSynapsesDeviceProperties&amp; allEdges, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="20" cy="2589.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="29" y="2592.562">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="20" cy="2602.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="29" y="2605.3667">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="20,2609.9609,24,2613.9609,20,2617.9609,16,2613.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="29" y="2618.1714">changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><polygon fill="#FFFF44" points="20,2622.7656,24,2626.7656,20,2630.7656,16,2626.7656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="29" y="2630.9761">copyDeviceToHost(AllDSSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="20" cy="2640.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="29" y="2643.7808">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="20" cy="2653.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="29" y="2656.5854">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="20" cy="2666.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="29" y="2669.3901">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="20,2673.9844,24,2677.9844,20,2681.9844,16,2677.9844" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="698" x="29" y="2682.1948">copyHostToDevice(void* allEdgesDevice, AllDSSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="20" cy="2691.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="29" y="2694.9995">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="20,2699.5938,24,2703.5938,20,2707.5938,16,2703.5938" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="29" y="2707.8042">deleteDeviceStruct(AllDSSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="20" cy="2717.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="29" y="2720.6089">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><ellipse cx="20" cy="2730.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="29" y="2733.4136">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="20" cy="2743.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="29" y="2746.2183">printParameters() : void {query}</text><ellipse cx="20" cy="2755.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="29" y="2759.0229">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="20,2763.6172,24,2767.6172,20,2771.6172,16,2767.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="29" y="2771.8276">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="20" cy="2781.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="29" y="2784.6323">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="20" cy="2794.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="2797.437">setEdgeClassID() : void</text><ellipse cx="20" cy="2807.0313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="29" y="2810.2417">setupEdges() : void</text><polygon fill="#FFFF44" points="20,2814.8359,24,2818.8359,20,2822.8359,16,2818.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="29" y="2823.0464">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="20,2827.6406,24,2831.6406,20,2835.6406,16,2831.6406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="29" y="2835.8511">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[09c0093d34d85daed484b6b6f446313a]
class AllDynamicSTDPSynapses--><rect codeLine="43" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="444.9453" id="AllDynamicSTDPSynapses" style="stroke:#A80036;stroke-width:1.5;" width="778" x="747" y="3101"/><ellipse cx="1061.25" cy="3117" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1061.1875,3112.8281 Q1060.4375,3112.8281 1059.875,3113.125 Q1059.3125,3113.4063 1058.9219,3113.9375 Q1058.5313,3114.4688 1058.3281,3115.25 Q1058.1406,3116.0156 1058.1406,3116.9688 Q1058.1406,3117.9375 1058.3125,3118.7031 Q1058.5,3119.4531 1058.8594,3119.9688 Q1059.2344,3120.4844 1059.8125,3120.7656 Q1060.3906,3121.0313 1061.1875,3121.0313 Q1061.9219,3121.0313 1062.6563,3120.8594 Q1063.4063,3120.6875 1064.2813,3120.3906 L1064.2813,3122.5469 Q1063.875,3122.7031 1063.4844,3122.8281 Q1063.0938,3122.9375 1062.6875,3123.0156 Q1062.2813,3123.0938 1061.8594,3123.125 Q1061.4375,3123.1719 1060.9375,3123.1719 Q1059.5313,3123.1719 1058.5,3122.7188 Q1057.4844,3122.2656 1056.8125,3121.4531 Q1056.1406,3120.6406 1055.8125,3119.5 Q1055.4844,3118.3438 1055.4844,3116.9531 Q1055.4844,3115.5781 1055.8594,3114.4219 Q1056.2344,3113.2656 1056.9531,3112.4375 Q1057.6719,3111.6094 1058.7344,3111.1563 Q1059.7969,3110.6875 1061.1875,3110.6875 Q1062.0938,3110.6875 1063,3110.9219 Q1063.9063,3111.1406 1064.7344,3111.5469 L1063.9063,3113.6406 Q1063.2188,3113.3125 1062.5313,3113.0781 Q1061.8438,3112.8281 1061.1875,3112.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="141" x="1081.75" y="3121.1543">AllDynamicSTDPSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="748" x2="1524" y1="3133" y2="3133"/><ellipse cx="758" cy="3144" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="767" y="3147.2104">D_ : BGFLOAT*</text><ellipse cx="758" cy="3156.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="767" y="3160.0151">F_ : BGFLOAT*</text><ellipse cx="758" cy="3169.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="767" y="3172.8198">U_ : BGFLOAT*</text><ellipse cx="758" cy="3182.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="767" y="3185.6245">r_ : BGFLOAT*</text><ellipse cx="758" cy="3195.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="767" y="3198.4292">u_ : BGFLOAT*</text><ellipse cx="758" cy="3208.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="767" y="3211.2339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="748" x2="1524" y1="3217.8281" y2="3217.8281"/><ellipse cx="758" cy="3228.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="767" y="3232.0386">AllDynamicSTDPSynapses()</text><ellipse cx="758" cy="3241.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="767" y="3244.8433">AllDynamicSTDPSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="758" cy="3254.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="767" y="3257.6479">~AllDynamicSTDPSynapses()</text><ellipse cx="758" cy="3267.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="767" y="3270.4526">Create() : AllEdges*</text><polygon fill="#FFFF44" points="758,3275.0469,762,3279.0469,758,3283.0469,754,3279.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="578" x="767" y="3283.2573">allocDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties&amp; allEdges, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="758" cy="3292.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="767" y="3296.062">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="758" cy="3305.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="767" y="3308.8667">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="758,3313.4609,762,3317.4609,758,3321.4609,754,3317.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="767" y="3321.6714">changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><polygon fill="#FFFF44" points="758,3326.2656,762,3330.2656,758,3334.2656,754,3330.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="442" x="767" y="3334.4761">copyDeviceToHost(AllDynamicSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="758" cy="3344.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="767" y="3347.2808">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="758" cy="3356.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="767" y="3360.0854">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="758" cy="3369.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="767" y="3372.8901">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="758,3377.4844,762,3381.4844,758,3385.4844,754,3381.4844" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="752" x="767" y="3385.6948">copyHostToDevice(void* allEdgesDevice, AllDynamicSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="758" cy="3395.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="767" y="3398.4995">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="758,3403.0938,762,3407.0938,758,3411.0938,754,3407.0938" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="767" y="3411.3042">deleteDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps) : void</text><ellipse cx="758" cy="3420.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="767" y="3424.1089">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><ellipse cx="758" cy="3433.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="767" y="3436.9136">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="758" cy="3446.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="767" y="3449.7183">printParameters() : void {query}</text><ellipse cx="758" cy="3459.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="767" y="3462.5229">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="758,3467.1172,762,3471.1172,758,3475.1172,754,3471.1172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="767" y="3475.3276">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="758" cy="3484.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="767" y="3488.1323">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="758" cy="3497.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="767" y="3500.937">setEdgeClassID() : void</text><ellipse cx="758" cy="3510.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="767" y="3513.7417">setupEdges() : void</text><polygon fill="#FFFF44" points="758,3518.3359,762,3522.3359,758,3526.3359,754,3522.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="767" y="3526.5464">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="758,3531.1406,762,3535.1406,758,3539.1406,754,3535.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="767" y="3539.3511">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[06f12ec46b87224fd0e1c514fed4a6e4]
class AllEdges--><rect codeLine="78" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="572.9922" id="AllEdges" style="stroke:#A80036;stroke-width:1.5;" width="539" x="483.5" y="556"/><ellipse cx="726.25" cy="572" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M729.2031,577 L728.375,574.1094 L724.1875,574.1094 L723.3438,577 L720.75,577 L724.6875,564.8125 L727.8438,564.8125 L731.7969,577 L729.2031,577 Z M727.7656,571.9531 L727,569.2969 Q726.9375,569.1406 726.8438,568.8125 Q726.75,568.4688 726.625,568.0625 Q726.5156,567.6406 726.4063,567.2344 Q726.3125,566.8125 726.2813,566.5313 Q726.25,566.7031 726.1875,566.9531 Q726.1406,567.2031 726.0625,567.4844 Q726,567.7656 725.9219,568.0469 Q725.8438,568.3281 725.7813,568.5781 Q725.7188,568.8281 725.6563,569.0156 Q725.6094,569.2031 725.5781,569.2969 L724.8125,571.9531 L727.7656,571.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="45" x="746.75" y="576.1543">AllEdges</text><line style="stroke:#A80036;stroke-width:1.5;" x1="484.5" x2="1021.5" y1="588" y2="588"/><ellipse cx="494.5" cy="599" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="503.5" y="602.2104">W_ : BGFLOAT*</text><ellipse cx="494.5" cy="611.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="503.5" y="615.0151">maxEdgesPerVertex_ : BGSIZE</text><ellipse cx="494.5" cy="624.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="503.5" y="627.8198">totalEdgeCount_ : BGSIZE</text><ellipse cx="494.5" cy="637.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="503.5" y="640.6245">edgeCounts_ : BGSIZE*</text><ellipse cx="494.5" cy="650.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="503.5" y="653.4292">inUse_ : bool*</text><ellipse cx="494.5" cy="663.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="503.5" y="666.2339">type_ : edgeType*</text><ellipse cx="494.5" cy="675.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="503.5" y="679.0386">countVertices_ : int</text><ellipse cx="494.5" cy="688.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="503.5" y="691.8433">destVertexIndex_ : int*</text><ellipse cx="494.5" cy="701.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="503.5" y="704.6479">sourceVertexIndex_ : int*</text><polygon fill="none" points="494.5,709.2422,498.5,713.2422,494.5,717.2422,490.5,713.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="503.5" y="717.4526">edgeLogger_ : log4cplus::Logger</text><polygon fill="none" points="494.5,722.0469,498.5,726.0469,494.5,730.0469,490.5,726.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="503.5" y="730.2573">fileLogger_ : log4cplus::Logger</text><line style="stroke:#A80036;stroke-width:1.5;" x1="484.5" x2="1021.5" y1="736.8516" y2="736.8516"/><ellipse cx="494.5" cy="747.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="46" x="503.5" y="751.062">AllEdges()</text><ellipse cx="494.5" cy="760.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="503.5" y="763.8667">AllEdges(const int numVertices, const int maxEdges)</text><ellipse cx="494.5" cy="773.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="503.5" y="776.6714">~AllEdges()</text><polygon fill="#FFFF44" points="494.5,781.2656,498.5,785.2656,494.5,789.2656,490.5,785.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="503.5" y="789.4761">edgeOrdinalToType(const int typeOrdinal) : edgeType</text><ellipse cx="494.5" cy="799.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="503.5" y="802.2808">addEdge(edgeType type, const int srcVertex, const int destVertex, const BGFLOAT deltaT) : BGSIZE</text><ellipse cx="494.5" cy="811.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="292" x="503.5" y="815.0854">advanceEdge(const BGSIZE iEdg, AllVertices* vertices) : void</text><ellipse cx="494.5" cy="824.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="503.5" y="827.8901">advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void</text><ellipse cx="494.5" cy="837.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="503.5" y="840.6948">advanceEdges(AllVertices* vertices, EdgeIndexMap* edgeIndexMap) : void</text><ellipse cx="494.5" cy="850.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="249" x="503.5" y="853.4995">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="494.5" cy="863.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="503.5" y="866.3042">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="494.5" cy="875.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="503.5" y="879.1089">copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="888.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="503.5" y="891.9136">copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="901.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="503.5" y="904.7183">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="914.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="503.5" y="917.5229">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="927.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="503.5" y="930.3276">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="494.5" cy="939.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="513" x="503.5" y="943.1323">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><ellipse cx="494.5" cy="952.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="503.5" y="955.937">createEdgeIndexMap(shared_ptr&lt;EdgeIndexMap&gt; edgeIndexMap) : void</text><ellipse cx="494.5" cy="965.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="503.5" y="968.7417">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><ellipse cx="494.5" cy="978.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="503.5" y="981.5464">eraseEdge(const int neuronIndex, const BGSIZE iEdg) : void</text><ellipse cx="494.5" cy="991.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="503.5" y="994.3511">load(Archive&amp; archive) : void</text><ellipse cx="494.5" cy="1003.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="503.5" y="1007.1558">loadParameters() : void</text><ellipse cx="494.5" cy="1016.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="503.5" y="1019.9604">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="494.5" cy="1029.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="503.5" y="1032.7651">printParameters() : void {query}</text><polygon fill="#FFFF44" points="494.5,1037.3594,498.5,1041.3594,494.5,1045.3594,490.5,1041.3594" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="503.5" y="1045.5698">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="494.5" cy="1055.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="503.5" y="1058.3745">save(Archive&amp; archive) : void {query}</text><ellipse cx="494.5" cy="1067.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="191" x="503.5" y="1071.1792">setAdvanceEdgesDeviceParams() : void</text><ellipse cx="494.5" cy="1080.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="110" x="503.5" y="1083.9839">setEdgeClassID() : void</text><ellipse cx="494.5" cy="1093.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="503.5" y="1096.7886">setupEdges() : void</text><polygon fill="#FFFF44" points="494.5,1101.3828,498.5,1105.3828,494.5,1109.3828,490.5,1105.3828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="503.5" y="1109.5933">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="494.5,1114.1875,498.5,1118.1875,494.5,1122.1875,490.5,1118.1875" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="503.5" y="1122.3979">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[96f31d00847e9628d93d2720c47b9604]
class AllNeuroEdges--><rect codeLine="123" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="188.8516" id="AllNeuroEdges" style="stroke:#A80036;stroke-width:1.5;" width="336" x="585" y="1189"/><ellipse cx="709.25" cy="1205" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M709.1875,1200.8281 Q708.4375,1200.8281 707.875,1201.125 Q707.3125,1201.4063 706.9219,1201.9375 Q706.5313,1202.4688 706.3281,1203.25 Q706.1406,1204.0156 706.1406,1204.9688 Q706.1406,1205.9375 706.3125,1206.7031 Q706.5,1207.4531 706.8594,1207.9688 Q707.2344,1208.4844 707.8125,1208.7656 Q708.3906,1209.0313 709.1875,1209.0313 Q709.9219,1209.0313 710.6563,1208.8594 Q711.4063,1208.6875 712.2813,1208.3906 L712.2813,1210.5469 Q711.875,1210.7031 711.4844,1210.8281 Q711.0938,1210.9375 710.6875,1211.0156 Q710.2813,1211.0938 709.8594,1211.125 Q709.4375,1211.1719 708.9375,1211.1719 Q707.5313,1211.1719 706.5,1210.7188 Q705.4844,1210.2656 704.8125,1209.4531 Q704.1406,1208.6406 703.8125,1207.5 Q703.4844,1206.3438 703.4844,1204.9531 Q703.4844,1203.5781 703.8594,1202.4219 Q704.2344,1201.2656 704.9531,1200.4375 Q705.6719,1199.6094 706.7344,1199.1563 Q707.7969,1198.6875 709.1875,1198.6875 Q710.0938,1198.6875 711,1198.9219 Q711.9063,1199.1406 712.7344,1199.5469 L711.9063,1201.6406 Q711.2188,1201.3125 710.5313,1201.0781 Q709.8438,1200.8281 709.1875,1200.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="729.75" y="1209.1543">AllNeuroEdges</text><line style="stroke:#A80036;stroke-width:1.5;" x1="586" x2="920" y1="1221" y2="1221"/><ellipse cx="596" cy="1232" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="605" y="1235.2104">psr_ : BGFLOAT*</text><ellipse cx="596" cy="1244.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="310" x="605" y="1248.0151">SYNAPSE_STRENGTH_ADJUSTMENT : static constexpr BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="586" x2="920" y1="1254.6094" y2="1254.6094"/><ellipse cx="596" cy="1265.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="605" y="1268.8198">AllNeuroEdges()</text><ellipse cx="596" cy="1278.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="605" y="1281.6245">~AllNeuroEdges()</text><ellipse cx="596" cy="1291.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="605" y="1294.4292">edgSign(const edgeType type) : int</text><ellipse cx="596" cy="1304.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="605" y="1307.2339">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="596,1311.8281,600,1315.8281,596,1319.8281,592,1315.8281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="605" y="1320.0386">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="596" cy="1329.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="605" y="1332.8433">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="596" cy="1342.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="605" y="1345.6479">setupEdges() : void</text><polygon fill="#FFFF44" points="596,1350.2422,600,1354.2422,596,1358.2422,592,1354.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="605" y="1358.4526">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="596,1363.0469,600,1367.0469,596,1371.0469,592,1367.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="605" y="1371.2573">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[635988d62f36dba7a8b9baa086d12f03]
class AllSTDPSynapses--><rect codeLine="138" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="841.8906" id="AllSTDPSynapses" style="stroke:#A80036;stroke-width:1.5;" width="735" x="768.5" y="2199"/><ellipse cx="1084.75" cy="2215" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1084.6875,2210.8281 Q1083.9375,2210.8281 1083.375,2211.125 Q1082.8125,2211.4063 1082.4219,2211.9375 Q1082.0313,2212.4688 1081.8281,2213.25 Q1081.6406,2214.0156 1081.6406,2214.9688 Q1081.6406,2215.9375 1081.8125,2216.7031 Q1082,2217.4531 1082.3594,2217.9688 Q1082.7344,2218.4844 1083.3125,2218.7656 Q1083.8906,2219.0313 1084.6875,2219.0313 Q1085.4219,2219.0313 1086.1563,2218.8594 Q1086.9063,2218.6875 1087.7813,2218.3906 L1087.7813,2220.5469 Q1087.375,2220.7031 1086.9844,2220.8281 Q1086.5938,2220.9375 1086.1875,2221.0156 Q1085.7813,2221.0938 1085.3594,2221.125 Q1084.9375,2221.1719 1084.4375,2221.1719 Q1083.0313,2221.1719 1082,2220.7188 Q1080.9844,2220.2656 1080.3125,2219.4531 Q1079.6406,2218.6406 1079.3125,2217.5 Q1078.9844,2216.3438 1078.9844,2214.9531 Q1078.9844,2213.5781 1079.3594,2212.4219 Q1079.7344,2211.2656 1080.4531,2210.4375 Q1081.1719,2209.6094 1082.2344,2209.1563 Q1083.2969,2208.6875 1084.6875,2208.6875 Q1085.5938,2208.6875 1086.5,2208.9219 Q1087.4063,2209.1406 1088.2344,2209.5469 L1087.4063,2211.6406 Q1086.7188,2211.3125 1086.0313,2211.0781 Q1085.3438,2210.8281 1084.6875,2210.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="94" x="1105.25" y="2219.1543">AllSTDPSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="769.5" x2="1502.5" y1="2231" y2="2231"/><ellipse cx="779.5" cy="2242" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="788.5" y="2245.2104">Aneg_E_ : BGFLOAT</text><ellipse cx="779.5" cy="2254.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="788.5" y="2258.0151">Aneg_I_ : BGFLOAT</text><ellipse cx="779.5" cy="2267.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="788.5" y="2270.8198">Apos_E_ : BGFLOAT</text><ellipse cx="779.5" cy="2280.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="788.5" y="2283.6245">Apos_I_ : BGFLOAT</text><ellipse cx="779.5" cy="2293.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="788.5" y="2296.4292">Wex_E_ : BGFLOAT</text><ellipse cx="779.5" cy="2306.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="788.5" y="2309.2339">Wex_I_ : BGFLOAT</text><ellipse cx="779.5" cy="2318.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="788.5" y="2322.0386">defaultSTDPgap_ : BGFLOAT</text><ellipse cx="779.5" cy="2331.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="788.5" y="2334.8433">tauneg_E_ : BGFLOAT</text><ellipse cx="779.5" cy="2344.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="788.5" y="2347.6479">tauneg_I_ : BGFLOAT</text><ellipse cx="779.5" cy="2357.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="788.5" y="2360.4526">taupos_E_ : BGFLOAT</text><ellipse cx="779.5" cy="2370.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="788.5" y="2373.2573">taupos_I_ : BGFLOAT</text><ellipse cx="779.5" cy="2382.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="788.5" y="2386.062">tauspost_E_ : BGFLOAT</text><ellipse cx="779.5" cy="2395.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="788.5" y="2398.8667">tauspost_I_ : BGFLOAT</text><ellipse cx="779.5" cy="2408.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="788.5" y="2411.6714">tauspre_E_ : BGFLOAT</text><ellipse cx="779.5" cy="2421.2656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="788.5" y="2424.4761">tauspre_I_ : BGFLOAT</text><ellipse cx="779.5" cy="2434.0703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="788.5" y="2437.2808">Aneg_ : BGFLOAT*</text><ellipse cx="779.5" cy="2446.875" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="788.5" y="2450.0854">Apos_ : BGFLOAT*</text><ellipse cx="779.5" cy="2459.6797" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="788.5" y="2462.8901">STDPgap_ : BGFLOAT*</text><ellipse cx="779.5" cy="2472.4844" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="788.5" y="2475.6948">Wex_ : BGFLOAT*</text><ellipse cx="779.5" cy="2485.2891" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="788.5" y="2488.4995">muneg_ : BGFLOAT*</text><ellipse cx="779.5" cy="2498.0938" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="788.5" y="2501.3042">mupos_ : BGFLOAT*</text><ellipse cx="779.5" cy="2510.8984" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="788.5" y="2514.1089">tauneg_ : BGFLOAT*</text><ellipse cx="779.5" cy="2523.7031" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="788.5" y="2526.9136">taupos_ : BGFLOAT*</text><ellipse cx="779.5" cy="2536.5078" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="788.5" y="2539.7183">tauspost_ : BGFLOAT*</text><ellipse cx="779.5" cy="2549.3125" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="788.5" y="2552.5229">tauspre_ : BGFLOAT*</text><ellipse cx="779.5" cy="2562.1172" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="788.5" y="2565.3276">delayIndexPost_ : int*</text><ellipse cx="779.5" cy="2574.9219" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="788.5" y="2578.1323">delayQueuePostLength_ : int*</text><ellipse cx="779.5" cy="2587.7266" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="788.5" y="2590.937">totalDelayPost_ : int*</text><ellipse cx="779.5" cy="2600.5313" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="788.5" y="2603.7417">delayQueuePost_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="769.5" x2="1502.5" y1="2610.3359" y2="2610.3359"/><ellipse cx="779.5" cy="2621.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="788.5" y="2624.5464">AllSTDPSynapses()</text><ellipse cx="779.5" cy="2634.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="788.5" y="2637.3511">AllSTDPSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="779.5" cy="2646.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="788.5" y="2650.1558">~AllSTDPSynapses()</text><ellipse cx="779.5" cy="2659.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="788.5" y="2662.9604">Create() : AllEdges*</text><polygon fill="#FFFF44" points="779.5,2667.5547,783.5,2671.5547,779.5,2675.5547,775.5,2671.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="459" x="788.5" y="2675.7651">synapticWeightModification(const BGSIZE iEdg, BGFLOAT edgeWeight, double delta) : BGFLOAT</text><ellipse cx="779.5" cy="2685.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="788.5" y="2688.5698">allowBackPropagation() : bool</text><polygon fill="#FFFF44" points="779.5,2693.1641,783.5,2697.1641,779.5,2701.1641,775.5,2697.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="788.5" y="2701.3745">isSpikeQueuePost(const BGSIZE iEdg) : bool</text><ellipse cx="779.5" cy="2710.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="788.5" y="2714.1792">advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void</text><ellipse cx="779.5" cy="2723.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="464" x="788.5" y="2726.9839">advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="779.5,2731.5781,783.5,2735.5781,779.5,2739.5781,775.5,2735.5781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="568" x="788.5" y="2739.7886">allocDeviceStruct(AllSTDPSynapsesDeviceProperties&amp; allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="779.5" cy="2749.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="788.5" y="2752.5933">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="779.5" cy="2762.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="788.5" y="2765.3979">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="779.5,2769.9922,783.5,2773.9922,779.5,2777.9922,775.5,2773.9922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="788.5" y="2778.2026">copyDeviceToHost(AllSTDPSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="779.5" cy="2787.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="788.5" y="2791.0073">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="779.5" cy="2800.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="788.5" y="2803.812">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="779.5" cy="2813.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="788.5" y="2816.6167">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="779.5,2821.2109,783.5,2825.2109,779.5,2829.2109,775.5,2825.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="709" x="788.5" y="2829.4214">copyHostToDevice(void* allEdgesDevice, AllSTDPSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="779.5" cy="2839.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="788.5" y="2842.2261">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="779.5,2846.8203,783.5,2850.8203,779.5,2854.8203,775.5,2850.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="788.5" y="2855.0308">deleteDeviceStruct(AllSTDPSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="779.5" cy="2864.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="788.5" y="2867.8354">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><polygon fill="#FFFF44" points="779.5,2872.4297,783.5,2876.4297,779.5,2880.4297,775.5,2876.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="788.5" y="2880.6401">initSpikeQueue(const BGSIZE iEdg) : void</text><ellipse cx="779.5" cy="2890.2344" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="788.5" y="2893.4448">loadParameters() : void</text><ellipse cx="779.5" cy="2903.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="788.5" y="2906.2495">postSpikeHit(const BGSIZE iEdg) : void</text><ellipse cx="779.5" cy="2915.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="788.5" y="2919.0542">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="779.5" cy="2928.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="788.5" y="2931.8589">printParameters() : void {query}</text><ellipse cx="779.5" cy="2941.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="788.5" y="2944.6636">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="779.5,2949.2578,783.5,2953.2578,779.5,2957.2578,775.5,2953.2578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="788.5" y="2957.4683">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="779.5" cy="2967.0625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="788.5" y="2970.2729">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="779.5" cy="2979.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="788.5" y="2983.0776">setEdgeClassID() : void</text><ellipse cx="779.5" cy="2992.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="788.5" y="2995.8823">setupEdges() : void</text><polygon fill="#FFFF44" points="779.5,3000.4766,783.5,3004.4766,779.5,3008.4766,775.5,3004.4766" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="788.5" y="3008.687">setupEdges(const int numVertices, const int maxEdges) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="776.5" y="3015.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="788.5" y="3021.4917">stdpLearning(const BGSIZE iEdg, double delta, double epost, double epre, int srcVertex, int destVertex) : void</text><polygon fill="#FFFF44" points="779.5,3026.0859,783.5,3030.0859,779.5,3034.0859,775.5,3030.0859" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="788.5" y="3034.2964">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[cfe37ad1a50a7dcaaf80645f5fb9fa69]
class AllSpikingSynapses--><rect codeLine="204" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="701.0391" id="AllSpikingSynapses" style="stroke:#A80036;stroke-width:1.5;" width="743" x="381.5" y="1438"/><ellipse cx="696.75" cy="1454" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M696.6875,1449.8281 Q695.9375,1449.8281 695.375,1450.125 Q694.8125,1450.4063 694.4219,1450.9375 Q694.0313,1451.4688 693.8281,1452.25 Q693.6406,1453.0156 693.6406,1453.9688 Q693.6406,1454.9375 693.8125,1455.7031 Q694,1456.4531 694.3594,1456.9688 Q694.7344,1457.4844 695.3125,1457.7656 Q695.8906,1458.0313 696.6875,1458.0313 Q697.4219,1458.0313 698.1563,1457.8594 Q698.9063,1457.6875 699.7813,1457.3906 L699.7813,1459.5469 Q699.375,1459.7031 698.9844,1459.8281 Q698.5938,1459.9375 698.1875,1460.0156 Q697.7813,1460.0938 697.3594,1460.125 Q696.9375,1460.1719 696.4375,1460.1719 Q695.0313,1460.1719 694,1459.7188 Q692.9844,1459.2656 692.3125,1458.4531 Q691.6406,1457.6406 691.3125,1456.5 Q690.9844,1455.3438 690.9844,1453.9531 Q690.9844,1452.5781 691.3594,1451.4219 Q691.7344,1450.2656 692.4531,1449.4375 Q693.1719,1448.6094 694.2344,1448.1563 Q695.2969,1447.6875 696.6875,1447.6875 Q697.5938,1447.6875 698.5,1447.9219 Q699.4063,1448.1406 700.2344,1448.5469 L699.4063,1450.6406 Q698.7188,1450.3125 698.0313,1450.0781 Q697.3438,1449.8281 696.6875,1449.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="717.25" y="1458.1543">AllSpikingSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="382.5" x2="1123.5" y1="1470" y2="1470"/><ellipse cx="392.5" cy="1481" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="401.5" y="1484.2104">delay_EE_ : BGFLOAT</text><ellipse cx="392.5" cy="1493.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="401.5" y="1497.0151">delay_EI_ : BGFLOAT</text><ellipse cx="392.5" cy="1506.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="401.5" y="1509.8198">delay_IE_ : BGFLOAT</text><ellipse cx="392.5" cy="1519.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="401.5" y="1522.6245">delay_II_ : BGFLOAT</text><ellipse cx="392.5" cy="1532.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="401.5" y="1535.4292">tau_EE_ : BGFLOAT</text><ellipse cx="392.5" cy="1545.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="401.5" y="1548.2339">tau_EI_ : BGFLOAT</text><ellipse cx="392.5" cy="1557.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="401.5" y="1561.0386">tau_IE_ : BGFLOAT</text><ellipse cx="392.5" cy="1570.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="401.5" y="1573.8433">tau_II_ : BGFLOAT</text><ellipse cx="392.5" cy="1583.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="401.5" y="1586.6479">decay_ : BGFLOAT*</text><ellipse cx="392.5" cy="1596.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="401.5" y="1599.4526">tau_ : BGFLOAT*</text><ellipse cx="392.5" cy="1609.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="401.5" y="1612.2573">delayIndex_ : int*</text><ellipse cx="392.5" cy="1621.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="401.5" y="1625.062">delayQueueLength_ : int*</text><ellipse cx="392.5" cy="1634.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="401.5" y="1637.8667">totalDelay_ : int*</text><ellipse cx="392.5" cy="1647.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="401.5" y="1650.6714">delayQueue_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="382.5" x2="1123.5" y1="1657.2656" y2="1657.2656"/><ellipse cx="392.5" cy="1668.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="401.5" y="1671.4761">AllSpikingSynapses()</text><ellipse cx="392.5" cy="1681.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="401.5" y="1684.2808">AllSpikingSynapses(const int numVertices, const int maxEdges)</text><ellipse cx="392.5" cy="1693.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="401.5" y="1697.0854">~AllSpikingSynapses()</text><ellipse cx="392.5" cy="1706.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="94" x="401.5" y="1709.8901">Create() : AllEdges*</text><ellipse cx="392.5" cy="1719.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="401.5" y="1722.6948">allowBackPropagation() : bool</text><polygon fill="#FFFF44" points="392.5,1727.2891,396.5,1731.2891,392.5,1735.2891,388.5,1731.2891" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="401.5" y="1735.4995">isSpikeQueue(const BGSIZE iEdg) : bool</text><polygon fill="#FFFF44" points="392.5,1740.0938,396.5,1744.0938,392.5,1748.0938,388.5,1744.0938" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="401.5" y="1748.3042">updateDecay(const BGSIZE iEdg, const BGFLOAT deltaT) : bool</text><ellipse cx="392.5" cy="1757.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="401.5" y="1761.1089">advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void</text><ellipse cx="392.5" cy="1770.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="464" x="401.5" y="1773.9136">advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="392.5,1778.5078,396.5,1782.5078,392.5,1786.5078,388.5,1782.5078" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="576" x="401.5" y="1786.7183">allocDeviceStruct(AllSpikingSynapsesDeviceProperties&amp; allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="392.5" cy="1796.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="401.5" y="1799.5229">allocEdgeDeviceStruct(void** allEdgesDevice) : void</text><ellipse cx="392.5" cy="1809.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="401.5" y="1812.3276">allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="392.5,1816.9219,396.5,1820.9219,392.5,1824.9219,388.5,1820.9219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="401.5" y="1825.1323">changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="392.5" cy="1834.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="401.5" y="1837.937">copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void</text><ellipse cx="392.5" cy="1847.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="401.5" y="1850.7417">copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void</text><polygon fill="#FFFF44" points="392.5,1855.3359,396.5,1859.3359,392.5,1863.3359,388.5,1859.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="401.5" y="1863.5464">copyDeviceToHost(AllSpikingSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="392.5" cy="1873.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="401.5" y="1876.3511">copyEdgeDeviceToHost(void* allEdgesDevice) : void</text><ellipse cx="392.5" cy="1885.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="401.5" y="1889.1558">copyEdgeHostToDevice(void* allEdgesDevice) : void</text><ellipse cx="392.5" cy="1898.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="401.5" y="1901.9604">copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void</text><polygon fill="#FFFF44" points="392.5,1906.5547,396.5,1910.5547,392.5,1914.5547,388.5,1910.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="717" x="401.5" y="1914.7651">copyHostToDevice(void* allEdgesDevice, AllSpikingSynapsesDeviceProperties&amp; allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void</text><ellipse cx="392.5" cy="1924.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="401.5" y="1927.5698">createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void</text><polygon fill="#FFFF44" points="392.5,1932.1641,396.5,1936.1641,392.5,1940.1641,388.5,1936.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="401.5" y="1940.3745">deleteDeviceStruct(AllSpikingSynapsesDeviceProperties&amp; allEdgesDevice) : void</text><ellipse cx="392.5" cy="1949.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="401.5" y="1953.1792">deleteEdgeDeviceStruct(void* allEdgesDevice) : void</text><polygon fill="#FFFF44" points="392.5,1957.7734,396.5,1961.7734,392.5,1965.7734,388.5,1961.7734" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="401.5" y="1965.9839">initSpikeQueue(const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="1975.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="401.5" y="1978.7886">loadParameters() : void</text><ellipse cx="392.5" cy="1988.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="401.5" y="1991.5933">postSpikeHit(const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="2001.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="401.5" y="2004.3979">preSpikeHit(const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="2013.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="401.5" y="2017.2026">printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}</text><ellipse cx="392.5" cy="2026.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="401.5" y="2030.0073">printParameters() : void {query}</text><ellipse cx="392.5" cy="2039.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="401.5" y="2042.812">printSynapsesProps() : void {query}</text><polygon fill="#FFFF44" points="392.5,2047.4063,396.5,2051.4063,392.5,2055.4063,388.5,2051.4063" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="401.5" y="2055.6167">readEdge(istream&amp; input, const BGSIZE iEdg) : void</text><ellipse cx="392.5" cy="2065.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="401.5" y="2068.4214">resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void</text><ellipse cx="392.5" cy="2078.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="401.5" y="2081.2261">setAdvanceEdgesDeviceParams() : void</text><ellipse cx="392.5" cy="2090.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="401.5" y="2094.0308">setEdgeClassID() : void</text><ellipse cx="392.5" cy="2103.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="401.5" y="2106.8354">setupEdges() : void</text><polygon fill="#FFFF44" points="392.5,2111.4297,396.5,2115.4297,392.5,2119.4297,388.5,2115.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="401.5" y="2119.6401">setupEdges(const int numVertices, const int maxEdges) : void</text><polygon fill="#FFFF44" points="392.5,2124.2344,396.5,2128.2344,392.5,2132.2344,388.5,2128.2344" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="401.5" y="2132.4448">writeEdge(ostream&amp; output, const BGSIZE iEdg) : void {query}</text><!--MD5=[540eab1ed52846d003b47757435df453]
class ConnGrowth--><rect codeLine="259" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="368.1172" id="ConnGrowth" style="stroke:#A80036;stroke-width:1.5;" width="1093" x="1057.5" y="658.5"/><ellipse cx="1566.25" cy="674.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1566.1875,670.3281 Q1565.4375,670.3281 1564.875,670.625 Q1564.3125,670.9063 1563.9219,671.4375 Q1563.5313,671.9688 1563.3281,672.75 Q1563.1406,673.5156 1563.1406,674.4688 Q1563.1406,675.4375 1563.3125,676.2031 Q1563.5,676.9531 1563.8594,677.4688 Q1564.2344,677.9844 1564.8125,678.2656 Q1565.3906,678.5313 1566.1875,678.5313 Q1566.9219,678.5313 1567.6563,678.3594 Q1568.4063,678.1875 1569.2813,677.8906 L1569.2813,680.0469 Q1568.875,680.2031 1568.4844,680.3281 Q1568.0938,680.4375 1567.6875,680.5156 Q1567.2813,680.5938 1566.8594,680.625 Q1566.4375,680.6719 1565.9375,680.6719 Q1564.5313,680.6719 1563.5,680.2188 Q1562.4844,679.7656 1561.8125,678.9531 Q1561.1406,678.1406 1560.8125,677 Q1560.4844,675.8438 1560.4844,674.4531 Q1560.4844,673.0781 1560.8594,671.9219 Q1561.2344,670.7656 1561.9531,669.9375 Q1562.6719,669.1094 1563.7344,668.6563 Q1564.7969,668.1875 1566.1875,668.1875 Q1567.0938,668.1875 1568,668.4219 Q1568.9063,668.6406 1569.7344,669.0469 L1568.9063,671.1406 Q1568.2188,670.8125 1567.5313,670.5781 Q1566.8438,670.3281 1566.1875,670.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="1586.75" y="678.6543">ConnGrowth</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1058.5" x2="2149.5" y1="690.5" y2="690.5"/><ellipse cx="1068.5" cy="701.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="1077.5" y="704.7104">W_ : CompleteMatrix*</text><ellipse cx="1068.5" cy="714.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="1077.5" y="717.5151">area_ : CompleteMatrix*</text><ellipse cx="1068.5" cy="727.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="1077.5" y="730.3198">delta_ : CompleteMatrix*</text><ellipse cx="1068.5" cy="739.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1077.5" y="743.1245">growthParams_ : GrowthParams</text><ellipse cx="1068.5" cy="752.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1077.5" y="755.9292">deltaR_ : VectorMatrix*</text><ellipse cx="1068.5" cy="765.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1077.5" y="768.7339">outgrowth_ : VectorMatrix*</text><ellipse cx="1068.5" cy="778.3281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1077.5" y="781.5386">radii_ : VectorMatrix*</text><ellipse cx="1068.5" cy="791.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1077.5" y="794.3433">rates_ : VectorMatrix*</text><ellipse cx="1068.5" cy="803.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="1077.5" y="807.1479">radiiSize_ : int</text><ellipse cx="1068.5" cy="816.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="1077.5" y="819.9526">spikeCounts_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1058.5" x2="2149.5" y1="826.5469" y2="826.5469"/><ellipse cx="1068.5" cy="837.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1077.5" y="840.7573">ConnGrowth()</text><ellipse cx="1068.5" cy="850.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1077.5" y="853.562">~ConnGrowth()</text><ellipse cx="1068.5" cy="863.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="113" x="1077.5" y="866.3667">Create() : Connections*</text><ellipse cx="1068.5" cy="875.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="1077.5" y="879.1714">updateConnections(AllVertices&amp; neurons, Layout* layout) : bool</text><ellipse cx="1068.5" cy="888.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="1077.5" y="891.9761">load(Archive&amp; archive) : void</text><ellipse cx="1068.5" cy="901.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1077.5" y="904.7808">loadParameters() : void</text><ellipse cx="1068.5" cy="914.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1077.5" y="917.5854">printParameters() : void {query}</text><ellipse cx="1068.5" cy="927.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1077.5" y="930.3901">printRadii() : void {query}</text><ellipse cx="1068.5" cy="939.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1077.5" y="943.1948">save(Archive&amp; archive) : void {query}</text><ellipse cx="1068.5" cy="952.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="397" x="1077.5" y="955.9995">setupConnections(Layout* layout, AllVertices* neurons, AllEdges* synapses) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1065.5" y="962.5938"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1077.5" y="968.8042">updateConns(AllVertices&amp; neurons) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1065.5" y="975.3984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="1077.5" y="981.6089">updateFrontiers(const int numVertices, Layout* layout) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1065.5" y="988.2031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="1077.5" y="994.4136">updateOverlap(BGFLOAT numVertices, Layout* layout) : void</text><ellipse cx="1068.5" cy="1004.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1067" x="1077.5" y="1007.2183">updateSynapsesWeights(const int numVertices, AllVertices&amp; neurons, AllEdges&amp; synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void</text><ellipse cx="1068.5" cy="1016.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="1077.5" y="1020.0229">updateSynapsesWeights(const int numVertices, AllVertices&amp; vertices, AllEdges&amp; synapses, Layout* layout) : void</text><!--MD5=[b671e9144a70d5380b4364952f259167]
class ConnStatic--><rect codeLine="288" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="316.8984" id="ConnStatic" style="stroke:#A80036;stroke-width:1.5;" width="406" x="2186" y="684"/><ellipse cx="2355.25" cy="700" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2355.1875,695.8281 Q2354.4375,695.8281 2353.875,696.125 Q2353.3125,696.4063 2352.9219,696.9375 Q2352.5313,697.4688 2352.3281,698.25 Q2352.1406,699.0156 2352.1406,699.9688 Q2352.1406,700.9375 2352.3125,701.7031 Q2352.5,702.4531 2352.8594,702.9688 Q2353.2344,703.4844 2353.8125,703.7656 Q2354.3906,704.0313 2355.1875,704.0313 Q2355.9219,704.0313 2356.6563,703.8594 Q2357.4063,703.6875 2358.2813,703.3906 L2358.2813,705.5469 Q2357.875,705.7031 2357.4844,705.8281 Q2357.0938,705.9375 2356.6875,706.0156 Q2356.2813,706.0938 2355.8594,706.125 Q2355.4375,706.1719 2354.9375,706.1719 Q2353.5313,706.1719 2352.5,705.7188 Q2351.4844,705.2656 2350.8125,704.4531 Q2350.1406,703.6406 2349.8125,702.5 Q2349.4844,701.3438 2349.4844,699.9531 Q2349.4844,698.5781 2349.8594,697.4219 Q2350.2344,696.2656 2350.9531,695.4375 Q2351.6719,694.6094 2352.7344,694.1563 Q2353.7969,693.6875 2355.1875,693.6875 Q2356.0938,693.6875 2357,693.9219 Q2357.9063,694.1406 2358.7344,694.5469 L2357.9063,696.6406 Q2357.2188,696.3125 2356.5313,696.0781 Q2355.8438,695.8281 2355.1875,695.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2375.75" y="704.1543">ConnStatic</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2187" x2="2591" y1="716" y2="716"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="724"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2206" y="730.2104">excWeight_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="736.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="2206" y="743.0151">inhWeight_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="749.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2206" y="755.8198">rewiringProbability_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="762.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2206" y="768.6245">threshConnsRadius_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="775.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2206" y="781.4292">WCurrentEpoch_ : BGFLOAT*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="788.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2206" y="794.2339">connsPerVertex_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="800.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="2206" y="807.0386">radiiSize_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="813.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2206" y="819.8433">destVertexIndexCurrentEpoch_ : int*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="826.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="2206" y="832.6479">sourceVertexIndexCurrentEpoch_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2187" x2="2591" y1="839.2422" y2="839.2422"/><ellipse cx="2197" cy="850.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="2206" y="853.4526">ConnStatic()</text><ellipse cx="2197" cy="863.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2206" y="866.2573">~ConnStatic()</text><ellipse cx="2197" cy="875.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="2206" y="879.062">getConnsRadiusThresh() : BGFLOAT {query}</text><ellipse cx="2197" cy="888.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="2206" y="891.8667">getWCurrentEpoch() : BGFLOAT* {query}</text><ellipse cx="2197" cy="901.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="113" x="2206" y="904.6714">Create() : Connections*</text><ellipse cx="2197" cy="914.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="2206" y="917.4761">getDestVertexIndexCurrentEpoch() : int* {query}</text><ellipse cx="2197" cy="927.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2206" y="930.2808">getSourceVertexIndexCurrentEpoch() : int* {query}</text><ellipse cx="2197" cy="939.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="2206" y="943.0854">load(Archive&amp; archive) : void</text><ellipse cx="2197" cy="952.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2206" y="955.8901">loadParameters() : void</text><ellipse cx="2197" cy="965.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2206" y="968.6948">printParameters() : void {query}</text><ellipse cx="2197" cy="978.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2206" y="981.4995">save(Archive&amp; archive) : void {query}</text><ellipse cx="2197" cy="991.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="2206" y="994.3042">setupConnections(Layout* layout, AllVertices* vertices, AllEdges* edges) : void</text><!--MD5=[24bb951fb6b9ac52df1580923e830244]
class Connections--><rect codeLine="313" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="252.875" id="Connections" style="stroke:#A80036;stroke-width:1.5;" width="1092" x="1058" y="243"/><ellipse cx="1565.75" cy="259" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1568.7031,264 L1567.875,261.1094 L1563.6875,261.1094 L1562.8438,264 L1560.25,264 L1564.1875,251.8125 L1567.3438,251.8125 L1571.2969,264 L1568.7031,264 Z M1567.2656,258.9531 L1566.5,256.2969 Q1566.4375,256.1406 1566.3438,255.8125 Q1566.25,255.4688 1566.125,255.0625 Q1566.0156,254.6406 1565.9063,254.2344 Q1565.8125,253.8125 1565.7813,253.5313 Q1565.75,253.7031 1565.6875,253.9531 Q1565.6406,254.2031 1565.5625,254.4844 Q1565.5,254.7656 1565.4219,255.0469 Q1565.3438,255.3281 1565.2813,255.5781 Q1565.2188,255.8281 1565.1563,256.0156 Q1565.1094,256.2031 1565.0781,256.2969 L1564.3125,258.9531 L1567.2656,258.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="1586.25" y="263.1543">Connections</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1059" x2="2149" y1="275" y2="275"/><polygon fill="none" points="1069,281,1073,285,1069,289,1065,285" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1078" y="289.2104">edgeLogger_ : log4cplus::Logger</text><polygon fill="none" points="1069,293.8047,1073,297.8047,1069,301.8047,1065,297.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1078" y="302.0151">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="1069,306.6094,1073,310.6094,1069,314.6094,1065,310.6094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1078" y="314.8198">edges_ : shared_ptr&lt;AllEdges&gt;</text><polygon fill="none" points="1069,319.4141,1073,323.4141,1069,327.4141,1065,323.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1078" y="327.6245">synapseIndexMap_ : shared_ptr&lt;EdgeIndexMap&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1059" x2="2149" y1="334.2188" y2="334.2188"/><ellipse cx="1069" cy="345.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="1078" y="348.4292">Connections()</text><ellipse cx="1069" cy="358.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1078" y="361.2339">~Connections()</text><ellipse cx="1069" cy="370.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="1078" y="374.0386">updateConnections(AllVertices&amp; vertices, Layout* layout) : bool</text><ellipse cx="1069" cy="383.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1078" y="386.8433">getEdges() : shared_ptr&lt;AllEdges&gt; {query}</text><ellipse cx="1069" cy="396.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="1078" y="399.6479">getEdgeIndexMap() : shared_ptr&lt;EdgeIndexMap&gt; {query}</text><ellipse cx="1069" cy="409.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1078" y="412.4526">createEdgeIndexMap() : void</text><ellipse cx="1069" cy="422.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="565" x="1078" y="425.2573">createSynapsesFromWeights(const int numVertices, Layout* layout, AllVertices&amp; vertices, AllEdges&amp; synapses) : void</text><ellipse cx="1069" cy="434.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112" x="1078" y="438.062">loadParameters() : void</text><ellipse cx="1069" cy="447.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="1078" y="450.8667">printParameters() : void {query}</text><ellipse cx="1069" cy="460.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1078" y="463.6714">setupConnections(Layout* layout, AllVertices* vertices, AllEdges* synapses) : void</text><ellipse cx="1069" cy="473.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1066" x="1078" y="476.4761">updateSynapsesWeights(const int numVertices, AllVertices&amp; vertices, AllEdges&amp; synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void</text><ellipse cx="1069" cy="486.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="1078" y="489.2808">updateSynapsesWeights(const int numVertices, AllVertices&amp; vertices, AllEdges&amp; synapses, Layout* layout) : void</text><!--MD5=[07560c205a8067cf69726ad645fec973]
class ConnectionsFactory--><rect codeLine="333" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="150.4375" id="ConnectionsFactory" style="stroke:#A80036;stroke-width:1.5;" width="374" x="1417" y="20"/><ellipse cx="1546.25" cy="36" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1546.1875,31.8281 Q1545.4375,31.8281 1544.875,32.125 Q1544.3125,32.4063 1543.9219,32.9375 Q1543.5313,33.4688 1543.3281,34.25 Q1543.1406,35.0156 1543.1406,35.9688 Q1543.1406,36.9375 1543.3125,37.7031 Q1543.5,38.4531 1543.8594,38.9688 Q1544.2344,39.4844 1544.8125,39.7656 Q1545.3906,40.0313 1546.1875,40.0313 Q1546.9219,40.0313 1547.6563,39.8594 Q1548.4063,39.6875 1549.2813,39.3906 L1549.2813,41.5469 Q1548.875,41.7031 1548.4844,41.8281 Q1548.0938,41.9375 1547.6875,42.0156 Q1547.2813,42.0938 1546.8594,42.125 Q1546.4375,42.1719 1545.9375,42.1719 Q1544.5313,42.1719 1543.5,41.7188 Q1542.4844,41.2656 1541.8125,40.4531 Q1541.1406,39.6406 1540.8125,38.5 Q1540.4844,37.3438 1540.4844,35.9531 Q1540.4844,34.5781 1540.8594,33.4219 Q1541.2344,32.2656 1541.9531,31.4375 Q1542.6719,30.6094 1543.7344,30.1563 Q1544.7969,29.6875 1546.1875,29.6875 Q1547.0938,29.6875 1548,29.9219 Q1548.9063,30.1406 1549.7344,30.5469 L1548.9063,32.6406 Q1548.2188,32.3125 1547.5313,32.0781 Q1546.8438,31.8281 1546.1875,31.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="1566.75" y="40.1543">ConnectionsFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1418" x2="1790" y1="52" y2="52"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1425" y="60"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="1437" y="66.2104">createFunctions : ConnectionsFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1425" y="72.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="1437" y="79.0151">connectionsInstance : shared_ptr&lt;Connections&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1418" x2="1790" y1="85.6094" y2="85.6094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1425" y="93.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1437" y="99.8198">ConnectionsFactory()</text><ellipse cx="1428" cy="109.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="1437" y="112.6245">~ConnectionsFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1425" y="119.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="1437" y="125.4292">invokeCreateFunction(const string&amp; className) : Connections*</text><ellipse cx="1428" cy="135.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="173" x="1437" y="138.2339">getInstance() : ConnectionsFactory*</text><ellipse cx="1428" cy="147.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="1437" y="151.0386">createConnections(const string&amp; className) : shared_ptr&lt;Connections&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1425" y="157.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="1437" y="163.8433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[2137c854024e09e8076c84fb007b1c3c]
class EdgesFactory--><rect codeLine="345" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="150.4375" id="EdgesFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="571" y="294.5"/><ellipse cx="713.25" cy="310.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M713.1875,306.3281 Q712.4375,306.3281 711.875,306.625 Q711.3125,306.9063 710.9219,307.4375 Q710.5313,307.9688 710.3281,308.75 Q710.1406,309.5156 710.1406,310.4688 Q710.1406,311.4375 710.3125,312.2031 Q710.5,312.9531 710.8594,313.4688 Q711.2344,313.9844 711.8125,314.2656 Q712.3906,314.5313 713.1875,314.5313 Q713.9219,314.5313 714.6563,314.3594 Q715.4063,314.1875 716.2813,313.8906 L716.2813,316.0469 Q715.875,316.2031 715.4844,316.3281 Q715.0938,316.4375 714.6875,316.5156 Q714.2813,316.5938 713.8594,316.625 Q713.4375,316.6719 712.9375,316.6719 Q711.5313,316.6719 710.5,316.2188 Q709.4844,315.7656 708.8125,314.9531 Q708.1406,314.1406 707.8125,313 Q707.4844,311.8438 707.4844,310.4531 Q707.4844,309.0781 707.8594,307.9219 Q708.2344,306.7656 708.9531,305.9375 Q709.6719,305.1094 710.7344,304.6563 Q711.7969,304.1875 713.1875,304.1875 Q714.0938,304.1875 715,304.4219 Q715.9063,304.6406 716.7344,305.0469 L715.9063,307.1406 Q715.2188,306.8125 714.5313,306.5781 Q713.8438,306.3281 713.1875,306.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="733.75" y="314.6543">EdgesFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="572" x2="934" y1="326.5" y2="326.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="334.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="591" y="340.7104">createFunctions : EdgesFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="347.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="591" y="353.5151">edgesInstance_ : shared_ptr&lt;AllEdges&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="572" x2="934" y1="360.1094" y2="360.1094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="368.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="591" y="374.3198">EdgesFactory()</text><ellipse cx="582" cy="383.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="591" y="387.1245">~EdgesFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="393.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="591" y="399.9292">invokeCreateFunction(const string&amp; className) : AllEdges*</text><ellipse cx="582" cy="409.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="143" x="591" y="412.7339">getInstance() : EdgesFactory*</text><ellipse cx="582" cy="422.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="591" y="425.5386">createEdges(const string&amp; className) : shared_ptr&lt;AllEdges&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="579" y="432.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="591" y="438.3433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[2c8a843ca32eecec980159abf8666d97]
class enumClassSynapses--><rect codeLine="357" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="112.0234" id="enumClassSynapses" style="stroke:#A80036;stroke-width:1.5;" width="160" x="2259" y="39"/><ellipse cx="2280.75" cy="55" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2283.7656,61 L2276.7813,61 L2276.7813,48.8594 L2283.7656,48.8594 L2283.7656,50.9688 L2279.3438,50.9688 L2279.3438,53.6406 L2283.4531,53.6406 L2283.4531,55.75 L2279.3438,55.75 L2279.3438,58.875 L2283.7656,58.875 L2283.7656,61 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="113" x="2296.25" y="59.1543">enumClassSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2260" x2="2418" y1="71" y2="71"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2265" y="85.2104">classAllDSSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2265" y="98.0151">classAllDynamicSTDPSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2265" y="110.8198">classAllSTDPSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2265" y="123.6245">classAllSpikingSynapses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2265" y="136.4292">undefClassSynapses</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2260" x2="2418" y1="143.0234" y2="143.0234"/><!--MD5=[12eed8bfdcfc08849f14b9c8d25e6e94]
class AllDSSynapsesDeviceProperties--><rect codeLine="366" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="124.8281" id="AllDSSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="204" x="2627" y="780"/><ellipse cx="2642" cy="796" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2641.9375,791.8281 Q2641.1875,791.8281 2640.625,792.125 Q2640.0625,792.4063 2639.6719,792.9375 Q2639.2813,793.4688 2639.0781,794.25 Q2638.8906,795.0156 2638.8906,795.9688 Q2638.8906,796.9375 2639.0625,797.7031 Q2639.25,798.4531 2639.6094,798.9688 Q2639.9844,799.4844 2640.5625,799.7656 Q2641.1406,800.0313 2641.9375,800.0313 Q2642.6719,800.0313 2643.4063,799.8594 Q2644.1563,799.6875 2645.0313,799.3906 L2645.0313,801.5469 Q2644.625,801.7031 2644.2344,801.8281 Q2643.8438,801.9375 2643.4375,802.0156 Q2643.0313,802.0938 2642.6094,802.125 Q2642.1875,802.1719 2641.6875,802.1719 Q2640.2813,802.1719 2639.25,801.7188 Q2638.2344,801.2656 2637.5625,800.4531 Q2636.8906,799.6406 2636.5625,798.5 Q2636.2344,797.3438 2636.2344,795.9531 Q2636.2344,794.5781 2636.6094,793.4219 Q2636.9844,792.2656 2637.7031,791.4375 Q2638.4219,790.6094 2639.4844,790.1563 Q2640.5469,789.6875 2641.9375,789.6875 Q2642.8438,789.6875 2643.75,789.9219 Q2644.6563,790.1406 2645.4844,790.5469 L2644.6563,792.6406 Q2643.9688,792.3125 2643.2813,792.0781 Q2642.5938,791.8281 2641.9375,791.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="172" x="2656" y="800.1543">AllDSSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2628" x2="2830" y1="812" y2="812"/><ellipse cx="2638" cy="823" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2647" y="826.2104">D_ : BGFLOAT*</text><ellipse cx="2638" cy="835.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2647" y="839.0151">F_ : BGFLOAT*</text><ellipse cx="2638" cy="848.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2647" y="851.8198">U_ : BGFLOAT*</text><ellipse cx="2638" cy="861.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2647" y="864.6245">r_ : BGFLOAT*</text><ellipse cx="2638" cy="874.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2647" y="877.4292">u_ : BGFLOAT*</text><ellipse cx="2638" cy="887.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="2647" y="890.2339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2628" x2="2830" y1="896.8281" y2="896.8281"/><!--MD5=[4b1be41c79a1ff75e3d6100484a928eb]
class AllDynamicSTDPSynapsesDeviceProperties--><rect codeLine="376" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="124.8281" id="AllDynamicSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="265" x="2842.5" y="1221"/><ellipse cx="2857.5" cy="1237" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2857.4375,1232.8281 Q2856.6875,1232.8281 2856.125,1233.125 Q2855.5625,1233.4063 2855.1719,1233.9375 Q2854.7813,1234.4688 2854.5781,1235.25 Q2854.3906,1236.0156 2854.3906,1236.9688 Q2854.3906,1237.9375 2854.5625,1238.7031 Q2854.75,1239.4531 2855.1094,1239.9688 Q2855.4844,1240.4844 2856.0625,1240.7656 Q2856.6406,1241.0313 2857.4375,1241.0313 Q2858.1719,1241.0313 2858.9063,1240.8594 Q2859.6563,1240.6875 2860.5313,1240.3906 L2860.5313,1242.5469 Q2860.125,1242.7031 2859.7344,1242.8281 Q2859.3438,1242.9375 2858.9375,1243.0156 Q2858.5313,1243.0938 2858.1094,1243.125 Q2857.6875,1243.1719 2857.1875,1243.1719 Q2855.7813,1243.1719 2854.75,1242.7188 Q2853.7344,1242.2656 2853.0625,1241.4531 Q2852.3906,1240.6406 2852.0625,1239.5 Q2851.7344,1238.3438 2851.7344,1236.9531 Q2851.7344,1235.5781 2852.1094,1234.4219 Q2852.4844,1233.2656 2853.2031,1232.4375 Q2853.9219,1231.6094 2854.9844,1231.1563 Q2856.0469,1230.6875 2857.4375,1230.6875 Q2858.3438,1230.6875 2859.25,1230.9219 Q2860.1563,1231.1406 2860.9844,1231.5469 L2860.1563,1233.6406 Q2859.4688,1233.3125 2858.7813,1233.0781 Q2858.0938,1232.8281 2857.4375,1232.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="233" x="2871.5" y="1241.1543">AllDynamicSTDPSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2843.5" x2="3106.5" y1="1253" y2="1253"/><ellipse cx="2853.5" cy="1264" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2862.5" y="1267.2104">D_ : BGFLOAT*</text><ellipse cx="2853.5" cy="1276.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2862.5" y="1280.0151">F_ : BGFLOAT*</text><ellipse cx="2853.5" cy="1289.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2862.5" y="1292.8198">U_ : BGFLOAT*</text><ellipse cx="2853.5" cy="1302.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2862.5" y="1305.6245">r_ : BGFLOAT*</text><ellipse cx="2853.5" cy="1315.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2862.5" y="1318.4292">u_ : BGFLOAT*</text><ellipse cx="2853.5" cy="1328.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="2862.5" y="1331.2339">lastSpike_ : uint64_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2843.5" x2="3106.5" y1="1337.8281" y2="1337.8281"/><!--MD5=[017d3a10fe7408131050c5acc75b1a9b]
class AllEdgesDeviceProperties--><rect codeLine="386" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="176.0469" id="AllEdgesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="177" x="2763.5" y="7"/><ellipse cx="2782.1" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2782.0375,18.8281 Q2781.2875,18.8281 2780.725,19.125 Q2780.1625,19.4063 2779.7719,19.9375 Q2779.3813,20.4688 2779.1781,21.25 Q2778.9906,22.0156 2778.9906,22.9688 Q2778.9906,23.9375 2779.1625,24.7031 Q2779.35,25.4531 2779.7094,25.9688 Q2780.0844,26.4844 2780.6625,26.7656 Q2781.2406,27.0313 2782.0375,27.0313 Q2782.7719,27.0313 2783.5063,26.8594 Q2784.2563,26.6875 2785.1313,26.3906 L2785.1313,28.5469 Q2784.725,28.7031 2784.3344,28.8281 Q2783.9438,28.9375 2783.5375,29.0156 Q2783.1313,29.0938 2782.7094,29.125 Q2782.2875,29.1719 2781.7875,29.1719 Q2780.3813,29.1719 2779.35,28.7188 Q2778.3344,28.2656 2777.6625,27.4531 Q2776.9906,26.6406 2776.6625,25.5 Q2776.3344,24.3438 2776.3344,22.9531 Q2776.3344,21.5781 2776.7094,20.4219 Q2777.0844,19.2656 2777.8031,18.4375 Q2778.5219,17.6094 2779.5844,17.1563 Q2780.6469,16.6875 2782.0375,16.6875 Q2782.9438,16.6875 2783.85,16.9219 Q2784.7563,17.1406 2785.5844,17.5469 L2784.7563,19.6406 Q2784.0688,19.3125 2783.3813,19.0781 Q2782.6938,18.8281 2782.0375,18.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="137" x="2796.9" y="27.1543">AllEdgesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2764.5" x2="2939.5" y1="39" y2="39"/><ellipse cx="2774.5" cy="50" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="2783.5" y="53.2104">W_ : BGFLOAT*</text><ellipse cx="2774.5" cy="62.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2783.5" y="66.0151">psr_ : BGFLOAT*</text><ellipse cx="2774.5" cy="75.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2783.5" y="78.8198">maxEdgesPerVertex_ : BGSIZE</text><ellipse cx="2774.5" cy="88.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2783.5" y="91.6245">totalEdgeCount_ : BGSIZE</text><ellipse cx="2774.5" cy="101.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2783.5" y="104.4292">edgeCounts_ : BGSIZE*</text><ellipse cx="2774.5" cy="114.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2783.5" y="117.2339">inUse_ : bool*</text><ellipse cx="2774.5" cy="126.8281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="2783.5" y="130.0386">type_ : edgeType*</text><ellipse cx="2774.5" cy="139.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="2783.5" y="142.8433">countVertices_ : int</text><ellipse cx="2774.5" cy="152.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2783.5" y="155.6479">destVertexIndex_ : int*</text><ellipse cx="2774.5" cy="165.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2783.5" y="168.4526">sourceVertexIndex_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2764.5" x2="2939.5" y1="175.0469" y2="175.0469"/><!--MD5=[a7843438017f4a8113b6a979c3ec4039]
class AllSTDPSynapsesDeviceProperties--><rect codeLine="400" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="240.0703" id="AllSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="218" x="2866" y="722.5"/><ellipse cx="2881" cy="738.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2880.9375,734.3281 Q2880.1875,734.3281 2879.625,734.625 Q2879.0625,734.9063 2878.6719,735.4375 Q2878.2813,735.9688 2878.0781,736.75 Q2877.8906,737.5156 2877.8906,738.4688 Q2877.8906,739.4375 2878.0625,740.2031 Q2878.25,740.9531 2878.6094,741.4688 Q2878.9844,741.9844 2879.5625,742.2656 Q2880.1406,742.5313 2880.9375,742.5313 Q2881.6719,742.5313 2882.4063,742.3594 Q2883.1563,742.1875 2884.0313,741.8906 L2884.0313,744.0469 Q2883.625,744.2031 2883.2344,744.3281 Q2882.8438,744.4375 2882.4375,744.5156 Q2882.0313,744.5938 2881.6094,744.625 Q2881.1875,744.6719 2880.6875,744.6719 Q2879.2813,744.6719 2878.25,744.2188 Q2877.2344,743.7656 2876.5625,742.9531 Q2875.8906,742.1406 2875.5625,741 Q2875.2344,739.8438 2875.2344,738.4531 Q2875.2344,737.0781 2875.6094,735.9219 Q2875.9844,734.7656 2876.7031,733.9375 Q2877.4219,733.1094 2878.4844,732.6563 Q2879.5469,732.1875 2880.9375,732.1875 Q2881.8438,732.1875 2882.75,732.4219 Q2883.6563,732.6406 2884.4844,733.0469 L2883.6563,735.1406 Q2882.9688,734.8125 2882.2813,734.5781 Q2881.5938,734.3281 2880.9375,734.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="186" x="2895" y="742.6543">AllSTDPSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2867" x2="3083" y1="754.5" y2="754.5"/><ellipse cx="2877" cy="765.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="2886" y="768.7104">Aneg_ : BGFLOAT*</text><ellipse cx="2877" cy="778.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="2886" y="781.5151">Apos_ : BGFLOAT*</text><ellipse cx="2877" cy="791.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2886" y="794.3198">STDPgap_ : BGFLOAT*</text><ellipse cx="2877" cy="803.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2886" y="807.1245">Wex_ : BGFLOAT*</text><ellipse cx="2877" cy="816.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2886" y="819.9292">muneg_ : BGFLOAT*</text><ellipse cx="2877" cy="829.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2886" y="832.7339">mupos_ : BGFLOAT*</text><ellipse cx="2877" cy="842.3281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2886" y="845.5386">tauneg_ : BGFLOAT*</text><ellipse cx="2877" cy="855.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2886" y="858.3433">taupos_ : BGFLOAT*</text><ellipse cx="2877" cy="867.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="2886" y="871.1479">tauspost_ : BGFLOAT*</text><ellipse cx="2877" cy="880.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2886" y="883.9526">tauspre_ : BGFLOAT*</text><ellipse cx="2877" cy="893.5469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="2886" y="896.7573">useFroemkeDanSTDP_ : bool*</text><ellipse cx="2877" cy="906.3516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2886" y="909.562">delayIndexPost_ : int*</text><ellipse cx="2877" cy="919.1563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2886" y="922.3667">delayQueuePostLength_ : int*</text><ellipse cx="2877" cy="931.9609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2886" y="935.1714">totalDelayPost_ : int*</text><ellipse cx="2877" cy="944.7656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2886" y="947.9761">delayQueuePost_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2867" x2="3083" y1="954.5703" y2="954.5703"/><!--MD5=[9207c363d1f0343d1c8507e42ff7f935]
class AllSpikingSynapsesDeviceProperties--><rect codeLine="419" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="124.8281" id="AllSpikingSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="228" x="2738" y="307"/><ellipse cx="2753" cy="323" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2752.9375,318.8281 Q2752.1875,318.8281 2751.625,319.125 Q2751.0625,319.4063 2750.6719,319.9375 Q2750.2813,320.4688 2750.0781,321.25 Q2749.8906,322.0156 2749.8906,322.9688 Q2749.8906,323.9375 2750.0625,324.7031 Q2750.25,325.4531 2750.6094,325.9688 Q2750.9844,326.4844 2751.5625,326.7656 Q2752.1406,327.0313 2752.9375,327.0313 Q2753.6719,327.0313 2754.4063,326.8594 Q2755.1563,326.6875 2756.0313,326.3906 L2756.0313,328.5469 Q2755.625,328.7031 2755.2344,328.8281 Q2754.8438,328.9375 2754.4375,329.0156 Q2754.0313,329.0938 2753.6094,329.125 Q2753.1875,329.1719 2752.6875,329.1719 Q2751.2813,329.1719 2750.25,328.7188 Q2749.2344,328.2656 2748.5625,327.4531 Q2747.8906,326.6406 2747.5625,325.5 Q2747.2344,324.3438 2747.2344,322.9531 Q2747.2344,321.5781 2747.6094,320.4219 Q2747.9844,319.2656 2748.7031,318.4375 Q2749.4219,317.6094 2750.4844,317.1563 Q2751.5469,316.6875 2752.9375,316.6875 Q2753.8438,316.6875 2754.75,316.9219 Q2755.6563,317.1406 2756.4844,317.5469 L2755.6563,319.6406 Q2754.9688,319.3125 2754.2813,319.0781 Q2753.5938,318.8281 2752.9375,318.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="196" x="2767" y="327.1543">AllSpikingSynapsesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2739" x2="2965" y1="339" y2="339"/><ellipse cx="2749" cy="350" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2758" y="353.2104">decay_ : BGFLOAT*</text><ellipse cx="2749" cy="362.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="2758" y="366.0151">tau_ : BGFLOAT*</text><ellipse cx="2749" cy="375.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2758" y="378.8198">delayIndex_ : int*</text><ellipse cx="2749" cy="388.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2758" y="391.6245">delayQueueLength_ : int*</text><ellipse cx="2749" cy="401.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="2758" y="404.4292">totalDelay_ : int*</text><ellipse cx="2749" cy="414.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2758" y="417.2339">delayQueue_ : uint32_t*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2739" x2="2965" y1="423.8281" y2="423.8281"/><!--MD5=[1ca6d9ba181062a9a4052698cf88a455]
class ConnGrowth::GrowthParams--><rect codeLine="429" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="137.6328" id="ConnGrowth::GrowthParams" style="stroke:#A80036;stroke-width:1.5;" width="186" x="1511" y="1214.5"/><ellipse cx="1526" cy="1230.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1525.9375,1226.3281 Q1525.1875,1226.3281 1524.625,1226.625 Q1524.0625,1226.9063 1523.6719,1227.4375 Q1523.2813,1227.9688 1523.0781,1228.75 Q1522.8906,1229.5156 1522.8906,1230.4688 Q1522.8906,1231.4375 1523.0625,1232.2031 Q1523.25,1232.9531 1523.6094,1233.4688 Q1523.9844,1233.9844 1524.5625,1234.2656 Q1525.1406,1234.5313 1525.9375,1234.5313 Q1526.6719,1234.5313 1527.4063,1234.3594 Q1528.1563,1234.1875 1529.0313,1233.8906 L1529.0313,1236.0469 Q1528.625,1236.2031 1528.2344,1236.3281 Q1527.8438,1236.4375 1527.4375,1236.5156 Q1527.0313,1236.5938 1526.6094,1236.625 Q1526.1875,1236.6719 1525.6875,1236.6719 Q1524.2813,1236.6719 1523.25,1236.2188 Q1522.2344,1235.7656 1521.5625,1234.9531 Q1520.8906,1234.1406 1520.5625,1233 Q1520.2344,1231.8438 1520.2344,1230.4531 Q1520.2344,1229.0781 1520.6094,1227.9219 Q1520.9844,1226.7656 1521.7031,1225.9375 Q1522.4219,1225.1094 1523.4844,1224.6563 Q1524.5469,1224.1875 1525.9375,1224.1875 Q1526.8438,1224.1875 1527.75,1224.4219 Q1528.6563,1224.6406 1529.4844,1225.0469 L1528.6563,1227.1406 Q1527.9688,1226.8125 1527.2813,1226.5781 Q1526.5938,1226.3281 1525.9375,1226.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="154" x="1540" y="1234.6543">ConnGrowth::GrowthParams</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1512" x2="1696" y1="1246.5" y2="1246.5"/><ellipse cx="1522" cy="1257.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1531" y="1260.7104">beta : BGFLOAT</text><ellipse cx="1522" cy="1270.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1531" y="1273.5151">epsilon : BGFLOAT</text><ellipse cx="1522" cy="1283.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="1531" y="1286.3198">maxRate : BGFLOAT</text><ellipse cx="1522" cy="1295.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1531" y="1299.1245">minRadius : BGFLOAT</text><ellipse cx="1522" cy="1308.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1531" y="1311.9292">rho : BGFLOAT</text><ellipse cx="1522" cy="1321.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="1531" y="1324.7339">startRadius : BGFLOAT</text><ellipse cx="1522" cy="1334.3281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="1531" y="1337.5386">targetRate : BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1512" x2="1696" y1="1344.1328" y2="1344.1328"/><!--MD5=[0db2b2f8d15a42d02f46e8af06351a10]
class ConnStatic::DistDestVertex--><rect codeLine="440" fill="#FEFECE" filter="url(#fm7xoaais3fge)" height="86.4141" id="ConnStatic::DistDestVertex" style="stroke:#A80036;stroke-width:1.5;" width="252" x="2263" y="1240.5"/><ellipse cx="2311.75" cy="1256.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2311.6875,1252.3281 Q2310.9375,1252.3281 2310.375,1252.625 Q2309.8125,1252.9063 2309.4219,1253.4375 Q2309.0313,1253.9688 2308.8281,1254.75 Q2308.6406,1255.5156 2308.6406,1256.4688 Q2308.6406,1257.4375 2308.8125,1258.2031 Q2309,1258.9531 2309.3594,1259.4688 Q2309.7344,1259.9844 2310.3125,1260.2656 Q2310.8906,1260.5313 2311.6875,1260.5313 Q2312.4219,1260.5313 2313.1563,1260.3594 Q2313.9063,1260.1875 2314.7813,1259.8906 L2314.7813,1262.0469 Q2314.375,1262.2031 2313.9844,1262.3281 Q2313.5938,1262.4375 2313.1875,1262.5156 Q2312.7813,1262.5938 2312.3594,1262.625 Q2311.9375,1262.6719 2311.4375,1262.6719 Q2310.0313,1262.6719 2309,1262.2188 Q2307.9844,1261.7656 2307.3125,1260.9531 Q2306.6406,1260.1406 2306.3125,1259 Q2305.9844,1257.8438 2305.9844,1256.4531 Q2305.9844,1255.0781 2306.3594,1253.9219 Q2306.7344,1252.7656 2307.4531,1251.9375 Q2308.1719,1251.1094 2309.2344,1250.6563 Q2310.2969,1250.1875 2311.6875,1250.1875 Q2312.5938,1250.1875 2313.5,1250.4219 Q2314.4063,1250.6406 2315.2344,1251.0469 L2314.4063,1253.1406 Q2313.7188,1252.8125 2313.0313,1252.5781 Q2312.3438,1252.3281 2311.6875,1252.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="146" x="2332.25" y="1260.6543">ConnStatic::DistDestVertex</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2264" x2="2514" y1="1272.5" y2="1272.5"/><ellipse cx="2274" cy="1283.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2283" y="1286.7104">dist : BGFLOAT</text><ellipse cx="2274" cy="1296.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="2283" y="1299.5151">destVertex : int</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2264" x2="2514" y1="1306.1094" y2="1306.1094"/><ellipse cx="2274" cy="1317.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="2283" y="1320.3198">operator&lt;(DistDestVertex other) : bool {query}</text><!--MD5=[36cebae4583ca589f8881f15eca879f1]
reverse link AllEdges to AllNeuroEdges--><path codeLine="452" d="M753,1149.71 C753,1163.42 753,1176.59 753,1188.95 " fill="none" id="AllEdges-backto-AllNeuroEdges" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="746,1149.27,753,1129.27,760,1149.27,746,1149.27" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d895029eba7154c6905399e7eb5aaaea]
reverse link AllEdgesDeviceProperties to AllSpikingSynapsesDeviceProperties--><path codeLine="455" d="M2852,203.57 C2852,238.56 2852,276.19 2852,306.66 " fill="none" id="AllEdgesDeviceProperties-backto-AllSpikingSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2845,203.35,2852,183.35,2859,203.35,2845,203.35" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[3d383143b8365dcb1c00482aec0d8f87]
reverse link AllNeuroEdges to AllSpikingSynapses--><path codeLine="458" d="M753,1398.52 C753,1410.96 753,1424.05 753,1437.59 " fill="none" id="AllNeuroEdges-backto-AllSpikingSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="746,1398.23,753,1378.23,760,1398.23,746,1398.23" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5445f169f2d896f0fc54fbb0dd17c8d5]
reverse link AllSTDPSynapses to AllDynamicSTDPSynapses--><path codeLine="461" d="M1136,3061.53 C1136,3074.84 1136,3087.95 1136,3100.8 " fill="none" id="AllSTDPSynapses-backto-AllDynamicSTDPSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1129,3061.22,1136,3041.22,1143,3061.22,1129,3061.22" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[539a086fdc8dbc8028ce1b9c0d3cb21a]
reverse link AllSTDPSynapsesDeviceProperties to AllDynamicSTDPSynapsesDeviceProperties--><path codeLine="464" d="M2975,982.81 C2975,1062.84 2975,1159.35 2975,1220.82 " fill="none" id="AllSTDPSynapsesDeviceProperties-backto-AllDynamicSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2968,982.59,2975,962.59,2982,982.59,2968,982.59" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f221506eaa2e129ebcab2e085332c1be]
reverse link AllSpikingSynapses to AllDSSynapses--><path codeLine="467" d="M583.57,2157.41 C545.9,2239.21 507.1,2323.46 473.13,2397.24 " fill="none" id="AllSpikingSynapses-backto-AllDSSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="577.24,2154.42,591.97,2139.18,589.96,2160.27,577.24,2154.42" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[587b9d07fbc4fdda6579551662042140]
reverse link AllSpikingSynapses to AllSTDPSynapses--><path codeLine="470" d="M923.01,2157.7 C929.29,2171.31 935.61,2185 941.93,2198.69 " fill="none" id="AllSpikingSynapses-backto-AllSTDPSynapses" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="916.48,2160.27,914.46,2139.18,929.19,2154.4,916.48,2160.27" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[23aac5e482fb680cc0cec1f0f0dd59a6]
reverse link AllSpikingSynapsesDeviceProperties to AllDSSynapsesDeviceProperties--><path codeLine="473" d="M2830.82,451.62 C2806.47,544.85 2767.05,695.81 2745.08,779.91 " fill="none" id="AllSpikingSynapsesDeviceProperties-backto-AllDSSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2824.09,449.66,2835.92,432.08,2837.64,453.19,2824.09,449.66" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e9a3e383543838c874b32001a8709207]
reverse link AllSpikingSynapsesDeviceProperties to AllSTDPSynapsesDeviceProperties--><path codeLine="476" d="M2873.18,451.61 C2892.66,526.18 2921.78,637.69 2943.89,722.38 " fill="none" id="AllSpikingSynapsesDeviceProperties-backto-AllSTDPSynapsesDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2866.36,453.19,2868.08,432.08,2879.91,449.66,2866.36,453.19" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[10477add2578806cc5f98b33b8db5e65]
reverse link Connections to ConnGrowth--><path codeLine="479" d="M1604,516.33 C1604,561.22 1604,611.2 1604,658.26 " fill="none" id="Connections-backto-ConnGrowth" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1597,516.1,1604,496.1,1611,516.1,1597,516.1" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[513ec0388948448dab3ce17eb36460f7]
reverse link Connections to ConnStatic--><path codeLine="482" d="M2083.55,505.18 C2113.11,520.44 2141.55,537.32 2168,556 C2216,589.9 2258.48,637.26 2293.05,683.67 " fill="none" id="Connections-backto-ConnStatic" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2080.26,511.36,2065.52,496.14,2086.54,498.85,2080.26,511.36" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[25007e0d6d2bc2691ed586569b6b25e2]
reverse link Connections to AllEdges--><path codeLine="490" d="M1143.81,501.48 C1107.73,517.83 1072.66,535.96 1040,556 C1034.16,559.58 1028.35,563.31 1022.57,567.16 " fill="none" id="Connections-backto-AllEdges" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1156.09,496,1148.9805,494.7935,1145.1324,500.892,1152.2419,502.0985,1156.09,496" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[dbf6625826c2ccd9ab80e1a9e4bec40a]
reverse link ConnectionsFactory to Connections--><path codeLine="493" d="M1604,183.29 C1604,202.24 1604,222.64 1604,242.74 " fill="none" id="ConnectionsFactory-backto-Connections" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1604,170.1,1600,176.1,1604,182.1,1608,176.1,1604,170.1" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[324f5d3a776c0915160172bb3bb1f68c]
reverse link EdgesFactory to AllEdges--><path codeLine="496" d="M753,457.92 C753,486.76 753,520.58 753,555.98 " fill="none" id="EdgesFactory-backto-AllEdges" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="753,444.61,749,450.61,753,456.61,757,450.61,753,444.61" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[1c85b8207771a3600805682c49a79883]
reverse link ConnGrowth to ConnGrowth::GrowthParams--><path codeLine="505" d="M1604,1042.06 C1604,1103.92 1604,1168.03 1604,1214.47 " fill="none" id="ConnGrowth-backto-ConnGrowth::GrowthParams" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="1604" cy="1034.81" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="1604" x2="1604" y1="1042.81" y2="1026.81"/><line style="stroke:#A80036;stroke-width:1.0;" x1="1596" x2="1612" y1="1034.81" y2="1034.81"/><!--MD5=[7436606c18ecdbda5eaebb84cf9adb19]
reverse link ConnStatic to ConnStatic::DistDestVertex--><path codeLine="508" d="M2389,1016.19 C2389,1097.84 2389,1188.55 2389,1240.24 " fill="none" id="ConnStatic-backto-ConnStatic::DistDestVertex" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="2389" cy="1009.06" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2389" x2="2389" y1="1017.06" y2="1001.06"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2381" x2="2397" y1="1009.06" y2="1009.06"/><!--MD5=[67ad86d56a5380b9ee43060d25c277cd]
@startuml ConnectionsClassDiagram





/' Objects '/

class AllDSSynapses {
	+AllDSSynapses()
	+AllDSSynapses(const int numVertices, const int maxEdges)
	+~AllDSSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDSSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDSSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllDynamicSTDPSynapses {
	+AllDynamicSTDPSynapses()
	+AllDynamicSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllDynamicSTDPSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllEdges {
	+AllEdges()
	+AllEdges(const int numVertices, const int maxEdges)
	+~AllEdges()
	+W_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	#edgeOrdinalToType(const int typeOrdinal) : edgeType
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	+addEdge(edgeType type, const int srcVertex, const int destVertex, const BGFLOAT deltaT) : BGSIZE
	+{abstract} advanceEdge(const BGSIZE iEdg, AllVertices* vertices) : void
	+{abstract} advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	+advanceEdges(AllVertices* vertices, EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+{abstract} copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	+createEdgeIndexMap(shared_ptr<EdgeIndexMap> edgeIndexMap) : void
	+{abstract} deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+eraseEdge(const int neuronIndex, const BGSIZE iEdg) : void
	+load(Archive& archive) : void
	+loadParameters() : void
	+{abstract} printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+save(Archive& archive) : void {query}
	+{abstract} setAdvanceEdgesDeviceParams() : void
	+{abstract} setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllNeuroEdges {
	+AllNeuroEdges()
	+~AllNeuroEdges()
	+psr_ : BGFLOAT*
	+edgSign(const edgeType type) : int
	+{static} SYNAPSE_STRENGTH_ADJUSTMENT : static constexpr BGFLOAT
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllSTDPSynapses {
	+AllSTDPSynapses()
	+AllSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllSTDPSynapses()
	+{static} Create() : AllEdges*
	+Aneg_E_ : BGFLOAT
	+Aneg_I_ : BGFLOAT
	+Apos_E_ : BGFLOAT
	+Apos_I_ : BGFLOAT
	+Wex_E_ : BGFLOAT
	+Wex_I_ : BGFLOAT
	+defaultSTDPgap_ : BGFLOAT
	#synapticWeightModification(const BGSIZE iEdg, BGFLOAT edgeWeight, double delta) : BGFLOAT
	+tauneg_E_ : BGFLOAT
	+tauneg_I_ : BGFLOAT
	+taupos_E_ : BGFLOAT
	+taupos_I_ : BGFLOAT
	+tauspost_E_ : BGFLOAT
	+tauspost_I_ : BGFLOAT
	+tauspre_E_ : BGFLOAT
	+tauspre_I_ : BGFLOAT
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueuePost(const BGSIZE iEdg) : bool
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyDeviceToHost(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	-stdpLearning(const BGSIZE iEdg, double delta, double epost, double epre, int srcVertex, int destVertex) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllSpikingSynapses {
	+AllSpikingSynapses()
	+AllSpikingSynapses(const int numVertices, const int maxEdges)
	+~AllSpikingSynapses()
	+{static} Create() : AllEdges*
	+delay_EE_ : BGFLOAT
	+delay_EI_ : BGFLOAT
	+delay_IE_ : BGFLOAT
	+delay_II_ : BGFLOAT
	+tau_EE_ : BGFLOAT
	+tau_EI_ : BGFLOAT
	+tau_IE_ : BGFLOAT
	+tau_II_ : BGFLOAT
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueue(const BGSIZE iEdg) : bool
	#updateDecay(const BGSIZE iEdg, const BGFLOAT deltaT) : bool
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	#copyDeviceToHost(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSpikingSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+preSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setAdvanceEdgesDeviceParams() : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class ConnGrowth {
	+ConnGrowth()
	+~ConnGrowth()
	+W_ : CompleteMatrix*
	+area_ : CompleteMatrix*
	+delta_ : CompleteMatrix*
	+{static} Create() : Connections*
	+growthParams_ : GrowthParams
	+deltaR_ : VectorMatrix*
	+outgrowth_ : VectorMatrix*
	+radii_ : VectorMatrix*
	+rates_ : VectorMatrix*
	+updateConnections(AllVertices& neurons, Layout* layout) : bool
	+radiiSize_ : int
	+spikeCounts_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+printRadii() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* neurons, AllEdges* synapses) : void
	-updateConns(AllVertices& neurons) : void
	-updateFrontiers(const int numVertices, Layout* layout) : void
	-updateOverlap(BGFLOAT numVertices, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& neurons, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnStatic {
	+ConnStatic()
	+~ConnStatic()
	-excWeight_ : BGFLOAT
	+getConnsRadiusThresh() : BGFLOAT {query}
	-inhWeight_ : BGFLOAT
	-rewiringProbability_ : BGFLOAT
	-threshConnsRadius_ : BGFLOAT
	-WCurrentEpoch_ : BGFLOAT*
	+getWCurrentEpoch() : BGFLOAT* {query}
	+{static} Create() : Connections*
	-connsPerVertex_ : int
	-radiiSize_ : int
	-destVertexIndexCurrentEpoch_ : int*
	+getDestVertexIndexCurrentEpoch() : int* {query}
	+getSourceVertexIndexCurrentEpoch() : int* {query}
	-sourceVertexIndexCurrentEpoch_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* vertices, AllEdges* edges) : void
}


abstract class Connections {
	+Connections()
	+~Connections()
	+updateConnections(AllVertices& vertices, Layout* layout) : bool
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	#edges_ : shared_ptr<AllEdges>
	+getEdges() : shared_ptr<AllEdges> {query}
	+getEdgeIndexMap() : shared_ptr<EdgeIndexMap> {query}
	#synapseIndexMap_ : shared_ptr<EdgeIndexMap>
	+createEdgeIndexMap() : void
	+createSynapsesFromWeights(const int numVertices, Layout* layout, AllVertices& vertices, AllEdges& synapses) : void
	+{abstract} loadParameters() : void
	+{abstract} printParameters() : void {query}
	+{abstract} setupConnections(Layout* layout, AllVertices* vertices, AllEdges* synapses) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnectionsFactory {
	-ConnectionsFactory()
	+~ConnectionsFactory()
	-invokeCreateFunction(const string& className) : Connections*
	+{static} getInstance() : ConnectionsFactory*
	-createFunctions : ConnectionsFunctionMap
	-connectionsInstance : shared_ptr<Connections>
	+createConnections(const string& className) : shared_ptr<Connections>
	-registerClass(const string& className, CreateFunction function) : void
}


class EdgesFactory {
	-EdgesFactory()
	+~EdgesFactory()
	-invokeCreateFunction(const string& className) : AllEdges*
	+{static} getInstance() : EdgesFactory*
	-createFunctions : EdgesFunctionMap
	+createEdges(const string& className) : shared_ptr<AllEdges>
	-edgesInstance_ : shared_ptr<AllEdges>
	-registerClass(const string& className, CreateFunction function) : void
}


enum enumClassSynapses {
	classAllDSSynapses
	classAllDynamicSTDPSynapses
	classAllSTDPSynapses
	classAllSpikingSynapses
	undefClassSynapses
}


class AllDSSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllDynamicSTDPSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllEdgesDeviceProperties {
	+W_ : BGFLOAT*
	+psr_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
}


class AllSTDPSynapsesDeviceProperties {
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+useFroemkeDanSTDP_ : bool*
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
}


class AllSpikingSynapsesDeviceProperties {
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
}


class ConnGrowth::GrowthParams {
	+beta : BGFLOAT
	+epsilon : BGFLOAT
	+maxRate : BGFLOAT
	+minRadius : BGFLOAT
	+rho : BGFLOAT
	+startRadius : BGFLOAT
	+targetRate : BGFLOAT
}


class ConnStatic::DistDestVertex {
	+dist : BGFLOAT
	+operator<(DistDestVertex other) : bool {query}
	+destVertex : int
}





/' Inheritance relationships '/

.AllEdges <|- - .AllNeuroEdges


.AllEdgesDeviceProperties <|- - .AllSpikingSynapsesDeviceProperties


.AllNeuroEdges <|- - .AllSpikingSynapses


.AllSTDPSynapses <|- - .AllDynamicSTDPSynapses


.AllSTDPSynapsesDeviceProperties <|- - .AllDynamicSTDPSynapsesDeviceProperties


.AllSpikingSynapses <|- - .AllDSSynapses


.AllSpikingSynapses <|- - .AllSTDPSynapses


.AllSpikingSynapsesDeviceProperties <|- - .AllDSSynapsesDeviceProperties


.AllSpikingSynapsesDeviceProperties <|- - .AllSTDPSynapsesDeviceProperties


.Connections <|- - .ConnGrowth


.Connections <|- - .ConnStatic





/' Aggregation relationships '/

.Connections *- - .AllEdges


.ConnectionsFactory *- - .Connections


.EdgesFactory *- - .AllEdges






/' Nested objects '/

.ConnGrowth +- - .ConnGrowth::GrowthParams


.ConnStatic +- - .ConnStatic::DistDestVertex




@enduml

@startuml ConnectionsClassDiagram






class AllDSSynapses {
	+AllDSSynapses()
	+AllDSSynapses(const int numVertices, const int maxEdges)
	+~AllDSSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDSSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDSSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllDynamicSTDPSynapses {
	+AllDynamicSTDPSynapses()
	+AllDynamicSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllDynamicSTDPSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllEdges {
	+AllEdges()
	+AllEdges(const int numVertices, const int maxEdges)
	+~AllEdges()
	+W_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	#edgeOrdinalToType(const int typeOrdinal) : edgeType
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	+addEdge(edgeType type, const int srcVertex, const int destVertex, const BGFLOAT deltaT) : BGSIZE
	+{abstract} advanceEdge(const BGSIZE iEdg, AllVertices* vertices) : void
	+{abstract} advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	+advanceEdges(AllVertices* vertices, EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+{abstract} copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	+createEdgeIndexMap(shared_ptr<EdgeIndexMap> edgeIndexMap) : void
	+{abstract} deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+eraseEdge(const int neuronIndex, const BGSIZE iEdg) : void
	+load(Archive& archive) : void
	+loadParameters() : void
	+{abstract} printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+save(Archive& archive) : void {query}
	+{abstract} setAdvanceEdgesDeviceParams() : void
	+{abstract} setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllNeuroEdges {
	+AllNeuroEdges()
	+~AllNeuroEdges()
	+psr_ : BGFLOAT*
	+edgSign(const edgeType type) : int
	+{static} SYNAPSE_STRENGTH_ADJUSTMENT : static constexpr BGFLOAT
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllSTDPSynapses {
	+AllSTDPSynapses()
	+AllSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllSTDPSynapses()
	+{static} Create() : AllEdges*
	+Aneg_E_ : BGFLOAT
	+Aneg_I_ : BGFLOAT
	+Apos_E_ : BGFLOAT
	+Apos_I_ : BGFLOAT
	+Wex_E_ : BGFLOAT
	+Wex_I_ : BGFLOAT
	+defaultSTDPgap_ : BGFLOAT
	#synapticWeightModification(const BGSIZE iEdg, BGFLOAT edgeWeight, double delta) : BGFLOAT
	+tauneg_E_ : BGFLOAT
	+tauneg_I_ : BGFLOAT
	+taupos_E_ : BGFLOAT
	+taupos_I_ : BGFLOAT
	+tauspost_E_ : BGFLOAT
	+tauspost_I_ : BGFLOAT
	+tauspre_E_ : BGFLOAT
	+tauspre_I_ : BGFLOAT
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueuePost(const BGSIZE iEdg) : bool
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyDeviceToHost(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	-stdpLearning(const BGSIZE iEdg, double delta, double epost, double epre, int srcVertex, int destVertex) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllSpikingSynapses {
	+AllSpikingSynapses()
	+AllSpikingSynapses(const int numVertices, const int maxEdges)
	+~AllSpikingSynapses()
	+{static} Create() : AllEdges*
	+delay_EE_ : BGFLOAT
	+delay_EI_ : BGFLOAT
	+delay_IE_ : BGFLOAT
	+delay_II_ : BGFLOAT
	+tau_EE_ : BGFLOAT
	+tau_EI_ : BGFLOAT
	+tau_IE_ : BGFLOAT
	+tau_II_ : BGFLOAT
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueue(const BGSIZE iEdg) : bool
	#updateDecay(const BGSIZE iEdg, const BGFLOAT deltaT) : bool
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	#copyDeviceToHost(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSpikingSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+preSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setAdvanceEdgesDeviceParams() : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class ConnGrowth {
	+ConnGrowth()
	+~ConnGrowth()
	+W_ : CompleteMatrix*
	+area_ : CompleteMatrix*
	+delta_ : CompleteMatrix*
	+{static} Create() : Connections*
	+growthParams_ : GrowthParams
	+deltaR_ : VectorMatrix*
	+outgrowth_ : VectorMatrix*
	+radii_ : VectorMatrix*
	+rates_ : VectorMatrix*
	+updateConnections(AllVertices& neurons, Layout* layout) : bool
	+radiiSize_ : int
	+spikeCounts_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+printRadii() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* neurons, AllEdges* synapses) : void
	-updateConns(AllVertices& neurons) : void
	-updateFrontiers(const int numVertices, Layout* layout) : void
	-updateOverlap(BGFLOAT numVertices, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& neurons, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnStatic {
	+ConnStatic()
	+~ConnStatic()
	-excWeight_ : BGFLOAT
	+getConnsRadiusThresh() : BGFLOAT {query}
	-inhWeight_ : BGFLOAT
	-rewiringProbability_ : BGFLOAT
	-threshConnsRadius_ : BGFLOAT
	-WCurrentEpoch_ : BGFLOAT*
	+getWCurrentEpoch() : BGFLOAT* {query}
	+{static} Create() : Connections*
	-connsPerVertex_ : int
	-radiiSize_ : int
	-destVertexIndexCurrentEpoch_ : int*
	+getDestVertexIndexCurrentEpoch() : int* {query}
	+getSourceVertexIndexCurrentEpoch() : int* {query}
	-sourceVertexIndexCurrentEpoch_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* vertices, AllEdges* edges) : void
}


abstract class Connections {
	+Connections()
	+~Connections()
	+updateConnections(AllVertices& vertices, Layout* layout) : bool
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	#edges_ : shared_ptr<AllEdges>
	+getEdges() : shared_ptr<AllEdges> {query}
	+getEdgeIndexMap() : shared_ptr<EdgeIndexMap> {query}
	#synapseIndexMap_ : shared_ptr<EdgeIndexMap>
	+createEdgeIndexMap() : void
	+createSynapsesFromWeights(const int numVertices, Layout* layout, AllVertices& vertices, AllEdges& synapses) : void
	+{abstract} loadParameters() : void
	+{abstract} printParameters() : void {query}
	+{abstract} setupConnections(Layout* layout, AllVertices* vertices, AllEdges* synapses) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnectionsFactory {
	-ConnectionsFactory()
	+~ConnectionsFactory()
	-invokeCreateFunction(const string& className) : Connections*
	+{static} getInstance() : ConnectionsFactory*
	-createFunctions : ConnectionsFunctionMap
	-connectionsInstance : shared_ptr<Connections>
	+createConnections(const string& className) : shared_ptr<Connections>
	-registerClass(const string& className, CreateFunction function) : void
}


class EdgesFactory {
	-EdgesFactory()
	+~EdgesFactory()
	-invokeCreateFunction(const string& className) : AllEdges*
	+{static} getInstance() : EdgesFactory*
	-createFunctions : EdgesFunctionMap
	+createEdges(const string& className) : shared_ptr<AllEdges>
	-edgesInstance_ : shared_ptr<AllEdges>
	-registerClass(const string& className, CreateFunction function) : void
}


enum enumClassSynapses {
	classAllDSSynapses
	classAllDynamicSTDPSynapses
	classAllSTDPSynapses
	classAllSpikingSynapses
	undefClassSynapses
}


class AllDSSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllDynamicSTDPSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllEdgesDeviceProperties {
	+W_ : BGFLOAT*
	+psr_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
}


class AllSTDPSynapsesDeviceProperties {
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+useFroemkeDanSTDP_ : bool*
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
}


class AllSpikingSynapsesDeviceProperties {
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
}


class ConnGrowth::GrowthParams {
	+beta : BGFLOAT
	+epsilon : BGFLOAT
	+maxRate : BGFLOAT
	+minRadius : BGFLOAT
	+rho : BGFLOAT
	+startRadius : BGFLOAT
	+targetRate : BGFLOAT
}


class ConnStatic::DistDestVertex {
	+dist : BGFLOAT
	+operator<(DistDestVertex other) : bool {query}
	+destVertex : int
}






.AllEdges <|- - .AllNeuroEdges


.AllEdgesDeviceProperties <|- - .AllSpikingSynapsesDeviceProperties


.AllNeuroEdges <|- - .AllSpikingSynapses


.AllSTDPSynapses <|- - .AllDynamicSTDPSynapses


.AllSTDPSynapsesDeviceProperties <|- - .AllDynamicSTDPSynapsesDeviceProperties


.AllSpikingSynapses <|- - .AllDSSynapses


.AllSpikingSynapses <|- - .AllSTDPSynapses


.AllSpikingSynapsesDeviceProperties <|- - .AllDSSynapsesDeviceProperties


.AllSpikingSynapsesDeviceProperties <|- - .AllSTDPSynapsesDeviceProperties


.Connections <|- - .ConnGrowth


.Connections <|- - .ConnStatic






.Connections *- - .AllEdges


.ConnectionsFactory *- - .Connections


.EdgesFactory *- - .AllEdges







.ConnGrowth +- - .ConnGrowth::GrowthParams


.ConnStatic +- - .ConnStatic::DistDestVertex




@enduml

PlantUML version 1.2020.23(Sun Dec 13 19:14:58 GMT 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>