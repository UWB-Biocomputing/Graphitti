<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2746px" preserveAspectRatio="none" style="width:2368px;height:2746px;" version="1.1" viewBox="0 0 2368 2746" width="2368px" zoomAndPan="magnify"><defs><filter height="300%" id="f1wblsvfdtujx2" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[cf80cca85261d84eda43dbc026d5d8d1]
class AllIFNeurons--><rect codeLine="8" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="688.2344" id="AllIFNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="397" y="1347"/><ellipse cx="728.25" cy="1363" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M728.1875,1358.8281 Q727.4375,1358.8281 726.875,1359.125 Q726.3125,1359.4063 725.9219,1359.9375 Q725.5313,1360.4688 725.3281,1361.25 Q725.1406,1362.0156 725.1406,1362.9688 Q725.1406,1363.9375 725.3125,1364.7031 Q725.5,1365.4531 725.8594,1365.9688 Q726.2344,1366.4844 726.8125,1366.7656 Q727.3906,1367.0313 728.1875,1367.0313 Q728.9219,1367.0313 729.6563,1366.8594 Q730.4063,1366.6875 731.2813,1366.3906 L731.2813,1368.5469 Q730.875,1368.7031 730.4844,1368.8281 Q730.0938,1368.9375 729.6875,1369.0156 Q729.2813,1369.0938 728.8594,1369.125 Q728.4375,1369.1719 727.9375,1369.1719 Q726.5313,1369.1719 725.5,1368.7188 Q724.4844,1368.2656 723.8125,1367.4531 Q723.1406,1366.6406 722.8125,1365.5 Q722.4844,1364.3438 722.4844,1362.9531 Q722.4844,1361.5781 722.8594,1360.4219 Q723.2344,1359.2656 723.9531,1358.4375 Q724.6719,1357.6094 725.7344,1357.1563 Q726.7969,1356.6875 728.1875,1356.6875 Q729.0938,1356.6875 730,1356.9219 Q730.9063,1357.1406 731.7344,1357.5469 L730.9063,1359.6406 Q730.2188,1359.3125 729.5313,1359.0781 Q728.8438,1358.8281 728.1875,1358.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="748.75" y="1367.1543">AllIFNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="398" x2="1137" y1="1379" y2="1379"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1387"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="417" y="1393.2104">IinjectRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1399.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="417" y="1406.0151">InoiseRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1412.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="417" y="1418.8198">VinitRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1425.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="417" y="1431.6245">VresetRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1438.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="417" y="1444.4292">VrestingRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1451.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="417" y="1457.2339">VthreshRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1463.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="417" y="1470.0386">starterVresetRange_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="405" y="1476.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="417" y="1482.8433">starterVthreshRange_ : BGFLOAT</text><ellipse cx="408" cy="1492.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="417" y="1495.6479">C1_ : BGFLOAT*</text><ellipse cx="408" cy="1505.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="417" y="1508.4526">C2_ : BGFLOAT*</text><ellipse cx="408" cy="1518.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1521.2573">Cm_ : BGFLOAT*</text><ellipse cx="408" cy="1530.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="417" y="1534.062">I0_ : BGFLOAT*</text><ellipse cx="408" cy="1543.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="417" y="1546.8667">Iinject_ : BGFLOAT*</text><ellipse cx="408" cy="1556.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="417" y="1559.6714">Inoise_ : BGFLOAT*</text><ellipse cx="408" cy="1569.2656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="417" y="1572.4761">Isyn_ : BGFLOAT*</text><ellipse cx="408" cy="1582.0703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1585.2808">Rm_ : BGFLOAT*</text><ellipse cx="408" cy="1594.875" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1598.0854">Tau_ : BGFLOAT*</text><ellipse cx="408" cy="1607.6797" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="417" y="1610.8901">Trefract_ : BGFLOAT*</text><ellipse cx="408" cy="1620.4844" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="417" y="1623.6948">Vinit_ : BGFLOAT*</text><ellipse cx="408" cy="1633.2891" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="417" y="1636.4995">Vm_ : BGFLOAT*</text><ellipse cx="408" cy="1646.0938" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="417" y="1649.3042">Vreset_ : BGFLOAT*</text><ellipse cx="408" cy="1658.8984" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="417" y="1662.1089">Vrest_ : BGFLOAT*</text><ellipse cx="408" cy="1671.7031" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="417" y="1674.9136">Vthresh_ : BGFLOAT*</text><ellipse cx="408" cy="1684.5078" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="417" y="1687.7183">numStepsInRefractoryPeriod_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="398" x2="1137" y1="1694.3125" y2="1694.3125"/><ellipse cx="408" cy="1705.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="417" y="1708.5229">AllIFNeurons()</text><ellipse cx="408" cy="1718.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="417" y="1721.3276">~AllIFNeurons()</text><ellipse cx="408" cy="1730.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="417" y="1734.1323">toString(const int index) : string {query}</text><ellipse cx="408" cy="1743.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="417" y="1746.937">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="408,1751.5313,412,1755.5313,408,1759.5313,404,1755.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="417" y="1759.7417">allocDeviceStruct(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="408" cy="1769.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="417" y="1772.5464">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="408" cy="1782.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="417" y="1785.3511">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="408,1789.9453,412,1793.9453,408,1797.9453,404,1793.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="417" y="1798.1558">copyDeviceToHost(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="408,1802.75,412,1806.75,408,1810.75,404,1806.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="417" y="1810.9604">copyHostToDevice(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="408" cy="1820.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="417" y="1823.7651">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1833.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="417" y="1836.5698">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1846.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="417" y="1849.3745">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1858.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="417" y="1862.1792">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1871.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="417" y="1874.9839">createAllVertices(Layout* layout) : void</text><polygon fill="#FFFF44" points="408,1879.5781,412,1883.5781,408,1887.5781,404,1883.5781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="417" y="1887.7886">createNeuron(int neuronIndex, Layout* layout) : void</text><polygon fill="#FFFF44" points="408,1892.3828,412,1896.3828,408,1900.3828,404,1896.3828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="417" y="1900.5933">deleteDeviceStruct(AllIFNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="408" cy="1910.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="417" y="1913.3979">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="408" cy="1922.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="417" y="1926.2026">deserialize(istream&amp; input) : void</text><polygon fill="#FFFF44" points="408,1930.7969,412,1934.7969,408,1938.7969,404,1934.7969" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="417" y="1939.0073">initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void</text><ellipse cx="408" cy="1948.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="417" y="1951.812">loadParameters() : void</text><ellipse cx="408" cy="1961.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="417" y="1964.6167">printParameters() : void {query}</text><polygon fill="#FFFF44" points="408,1969.2109,412,1973.2109,408,1977.2109,404,1973.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="417" y="1977.4214">readNeuron(istream&amp; input, int i) : void</text><ellipse cx="408" cy="1987.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="417" y="1990.2261">serialize(ostream&amp; output) : void {query}</text><polygon fill="#FFFF44" points="408,1994.8203,412,1998.8203,408,2002.8203,404,1998.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="417" y="2003.0308">setNeuronDefaults(const int index) : void</text><ellipse cx="408" cy="2012.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="417" y="2015.8354">setupVertices() : void</text><polygon fill="#FFFF44" points="408,2020.4297,412,2024.4297,408,2028.4297,404,2024.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="417" y="2028.6401">writeNeuron(ostream&amp; output, int i) : void {query}</text><!--MD5=[a4e35ff6c4fc9c7a26a0ff69acb0e23b]
class AllIZHNeurons--><rect codeLine="62" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="637.0156" id="AllIZHNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="9" y="2095"/><ellipse cx="335.75" cy="2111" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M335.6875,2106.8281 Q334.9375,2106.8281 334.375,2107.125 Q333.8125,2107.4063 333.4219,2107.9375 Q333.0313,2108.4688 332.8281,2109.25 Q332.6406,2110.0156 332.6406,2110.9688 Q332.6406,2111.9375 332.8125,2112.7031 Q333,2113.4531 333.3594,2113.9688 Q333.7344,2114.4844 334.3125,2114.7656 Q334.8906,2115.0313 335.6875,2115.0313 Q336.4219,2115.0313 337.1563,2114.8594 Q337.9063,2114.6875 338.7813,2114.3906 L338.7813,2116.5469 Q338.375,2116.7031 337.9844,2116.8281 Q337.5938,2116.9375 337.1875,2117.0156 Q336.7813,2117.0938 336.3594,2117.125 Q335.9375,2117.1719 335.4375,2117.1719 Q334.0313,2117.1719 333,2116.7188 Q331.9844,2116.2656 331.3125,2115.4531 Q330.6406,2114.6406 330.3125,2113.5 Q329.9844,2112.3438 329.9844,2110.9531 Q329.9844,2109.5781 330.3594,2108.4219 Q330.7344,2107.2656 331.4531,2106.4375 Q332.1719,2105.6094 333.2344,2105.1563 Q334.2969,2104.6875 335.6875,2104.6875 Q336.5938,2104.6875 337.5,2104.9219 Q338.4063,2105.1406 339.2344,2105.5469 L338.4063,2107.6406 Q337.7188,2107.3125 337.0313,2107.0781 Q336.3438,2106.8281 335.6875,2106.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="356.25" y="2115.1543">AllIZHNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="749" y1="2127" y2="2127"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2135"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="2141.2104">excAconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2147.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="2154.0151">excBconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2160.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="29" y="2166.8198">excCconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2173.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="29" y="2179.6245">excDconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2186.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="29" y="2192.4292">inhAconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2199.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="29" y="2205.2339">inhBconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2211.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="29" y="2218.0386">inhCconst_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2224.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="29" y="2230.8433">inhDconst_ : BGFLOAT</text><ellipse cx="20" cy="2240.4375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="29" y="2243.6479">Aconst_ : BGFLOAT*</text><ellipse cx="20" cy="2253.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="29" y="2256.4526">Bconst_ : BGFLOAT*</text><ellipse cx="20" cy="2266.0469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="29" y="2269.2573">C3_ : BGFLOAT*</text><ellipse cx="20" cy="2278.8516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="29" y="2282.062">Cconst_ : BGFLOAT*</text><ellipse cx="20" cy="2291.6563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="29" y="2294.8667">Dconst_ : BGFLOAT*</text><ellipse cx="20" cy="2304.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="29" y="2307.6714">u_ : BGFLOAT*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2314.2656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="29" y="2320.4761">DEFAULT_a : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2327.0703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="29" y="2333.2808">DEFAULT_b : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2339.875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="189" x="29" y="2346.0854">DEFAULT_c : static constexpr BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="2352.6797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="29" y="2358.8901">DEFAULT_d : static constexpr BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="749" y1="2365.4844" y2="2365.4844"/><ellipse cx="20" cy="2376.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="29" y="2379.6948">AllIZHNeurons()</text><ellipse cx="20" cy="2389.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="29" y="2392.4995">~AllIZHNeurons()</text><ellipse cx="20" cy="2402.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="104" x="29" y="2405.3042">Create() : AllVertices*</text><ellipse cx="20" cy="2414.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="29" y="2418.1089">toString(const int index) : string {query}</text><polygon fill="#FFFF44" points="20,2422.7031,24,2426.7031,20,2430.7031,16,2426.7031" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="29" y="2430.9136">advanceNeuron(const int index) : void</text><ellipse cx="20" cy="2440.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="29" y="2443.7183">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="20,2448.3125,24,2452.3125,20,2456.3125,16,2452.3125" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="29" y="2456.5229">allocDeviceStruct(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="20" cy="2466.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="29" y="2469.3276">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="20" cy="2478.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="29" y="2482.1323">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="20,2486.7266,24,2490.7266,20,2494.7266,16,2490.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="29" y="2494.937">copyDeviceToHost(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="20,2499.5313,24,2503.5313,20,2507.5313,16,2503.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="29" y="2507.7417">copyHostToDevice(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="20" cy="2517.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="29" y="2520.5464">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2530.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="29" y="2533.3511">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2542.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="29" y="2546.1558">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2555.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="29" y="2558.9604">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2568.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="29" y="2571.7651">createAllVertices(Layout* layout) : void</text><polygon fill="#FFFF44" points="20,2576.3594,24,2580.3594,20,2584.3594,16,2580.3594" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="29" y="2584.5698">createNeuron(int neuronIndex, Layout* layout) : void</text><polygon fill="#FFFF44" points="20,2589.1641,24,2593.1641,20,2597.1641,16,2593.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="29" y="2597.3745">deleteDeviceStruct(AllIZHNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="20" cy="2606.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="29" y="2610.1792">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="20" cy="2619.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="29" y="2622.9839">deserialize(istream&amp; input) : void</text><polygon fill="#FFFF44" points="20,2627.5781,24,2631.5781,20,2635.5781,16,2631.5781" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="29" y="2635.7886">fire(const int index) : void</text><polygon fill="#FFFF44" points="20,2640.3828,24,2644.3828,20,2648.3828,16,2644.3828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="29" y="2648.5933">initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void</text><ellipse cx="20" cy="2658.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="29" y="2661.3979">printParameters() : void {query}</text><polygon fill="#FFFF44" points="20,2665.9922,24,2669.9922,20,2673.9922,16,2669.9922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="29" y="2674.2026">readNeuron(istream&amp; input, int index) : void</text><ellipse cx="20" cy="2683.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="29" y="2687.0073">serialize(ostream&amp; output) : void {query}</text><polygon fill="#FFFF44" points="20,2691.6016,24,2695.6016,20,2699.6016,16,2695.6016" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="29" y="2699.812">setNeuronDefaults(const int index) : void</text><ellipse cx="20" cy="2709.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="29" y="2712.6167">setupVertices() : void</text><polygon fill="#FFFF44" points="20,2717.2109,24,2721.2109,20,2725.2109,16,2721.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="29" y="2725.4214">writeNeuron(ostream&amp; output, int index) : void {query}</text><!--MD5=[17306769ffb707adf94de37859054409]
class AllLIFNeurons--><rect codeLine="112" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="137.6328" id="AllLIFNeurons" style="stroke:#A80036;stroke-width:1.5;" width="741" x="785" y="2344.5"/><ellipse cx="1113.25" cy="2360.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1113.1875,2356.3281 Q1112.4375,2356.3281 1111.875,2356.625 Q1111.3125,2356.9063 1110.9219,2357.4375 Q1110.5313,2357.9688 1110.3281,2358.75 Q1110.1406,2359.5156 1110.1406,2360.4688 Q1110.1406,2361.4375 1110.3125,2362.2031 Q1110.5,2362.9531 1110.8594,2363.4688 Q1111.2344,2363.9844 1111.8125,2364.2656 Q1112.3906,2364.5313 1113.1875,2364.5313 Q1113.9219,2364.5313 1114.6563,2364.3594 Q1115.4063,2364.1875 1116.2813,2363.8906 L1116.2813,2366.0469 Q1115.875,2366.2031 1115.4844,2366.3281 Q1115.0938,2366.4375 1114.6875,2366.5156 Q1114.2813,2366.5938 1113.8594,2366.625 Q1113.4375,2366.6719 1112.9375,2366.6719 Q1111.5313,2366.6719 1110.5,2366.2188 Q1109.4844,2365.7656 1108.8125,2364.9531 Q1108.1406,2364.1406 1107.8125,2363 Q1107.4844,2361.8438 1107.4844,2360.4531 Q1107.4844,2359.0781 1107.8594,2357.9219 Q1108.2344,2356.7656 1108.9531,2355.9375 Q1109.6719,2355.1094 1110.7344,2354.6563 Q1111.7969,2354.1875 1113.1875,2354.1875 Q1114.0938,2354.1875 1115,2354.4219 Q1115.9063,2354.6406 1116.7344,2355.0469 L1115.9063,2357.1406 Q1115.2188,2356.8125 1114.5313,2356.5781 Q1113.8438,2356.3281 1113.1875,2356.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="1133.75" y="2364.6543">AllLIFNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="786" x2="1525" y1="2376.5" y2="2376.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="786" x2="1525" y1="2384.5" y2="2384.5"/><ellipse cx="796" cy="2395.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="805" y="2398.7104">AllLIFNeurons()</text><ellipse cx="796" cy="2408.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="805" y="2411.5151">~AllLIFNeurons()</text><ellipse cx="796" cy="2421.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="104" x="805" y="2424.3198">Create() : AllVertices*</text><polygon fill="#FFFF44" points="796,2428.9141,800,2432.9141,796,2436.9141,792,2432.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="805" y="2437.1245">advanceNeuron(const int index) : void</text><ellipse cx="796" cy="2446.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="715" x="805" y="2449.9292">advanceVertices(AllEdges&amp; synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><polygon fill="#FFFF44" points="796,2454.5234,800,2458.5234,796,2462.5234,792,2458.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="805" y="2462.7339">fire(const int index) : void</text><ellipse cx="796" cy="2472.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="805" y="2475.5386">printParameters() : void {query}</text><!--MD5=[00675e18512933602d55f5e0e2b1ab32]
class AllSpikingNeurons--><rect codeLine="123" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="278.4844" id="AllSpikingNeurons" style="stroke:#A80036;stroke-width:1.5;" width="471" x="792" y="1009"/><ellipse cx="973.75" cy="1025" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M976.7031,1030 L975.875,1027.1094 L971.6875,1027.1094 L970.8438,1030 L968.25,1030 L972.1875,1017.8125 L975.3438,1017.8125 L979.2969,1030 L976.7031,1030 Z M975.2656,1024.9531 L974.5,1022.2969 Q974.4375,1022.1406 974.3438,1021.8125 Q974.25,1021.4688 974.125,1021.0625 Q974.0156,1020.6406 973.9063,1020.2344 Q973.8125,1019.8125 973.7813,1019.5313 Q973.75,1019.7031 973.6875,1019.9531 Q973.6406,1020.2031 973.5625,1020.4844 Q973.5,1020.7656 973.4219,1021.0469 Q973.3438,1021.3281 973.2813,1021.5781 Q973.2188,1021.8281 973.1563,1022.0156 Q973.1094,1022.2031 973.0781,1022.2969 L972.3125,1024.9531 L975.2656,1024.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="99" x="994.25" y="1029.1543">AllSpikingNeurons</text><line style="stroke:#A80036;stroke-width:1.5;" x1="793" x2="1262" y1="1041" y2="1041"/><polygon fill="none" points="803,1047,807,1051,803,1055,799,1051" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="812" y="1055.2104">fAllowBackPropagation_ : bool</text><ellipse cx="803" cy="1064.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="812" y="1068.0151">vertexEvents_ : vector&lt;EventBuffer&gt;</text><ellipse cx="803" cy="1077.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="812" y="1080.8198">hasFired_ : vector&lt;bool&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="793" x2="1262" y1="1087.4141" y2="1087.4141"/><ellipse cx="803" cy="1098.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="812" y="1101.6245">AllSpikingNeurons()</text><ellipse cx="803" cy="1111.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="812" y="1114.4292">~AllSpikingNeurons()</text><ellipse cx="803" cy="1124.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="812" y="1127.2339">getSpikeHistory(int index, int offIndex) : uint64_t</text><polygon fill="#FFFF44" points="803,1131.8281,807,1135.8281,803,1139.8281,799,1135.8281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="182" x="812" y="1140.0386">advanceNeuron(const int index) : void</text><ellipse cx="803" cy="1149.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="812" y="1152.8433">advanceVertices(AllEdges&amp; synapses, const EdgeIndexMap* edgeIndexMap) : void</text><polygon fill="#FFFF44" points="803,1157.4375,807,1161.4375,803,1165.4375,799,1161.4375" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="812" y="1165.6479">clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="803" cy="1175.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="264" x="812" y="1178.4526">clearNeuronSpikeCounts(void* allVerticesDevice) : void</text><ellipse cx="803" cy="1188.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="812" y="1191.2573">clearSpikeCounts() : void</text><polygon fill="#FFFF44" points="803,1195.8516,807,1199.8516,803,1203.8516,799,1199.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="812" y="1204.062">copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><polygon fill="#FFFF44" points="803,1208.6563,807,1212.6563,803,1216.6563,799,1212.6563" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="445" x="812" y="1216.8667">copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties&amp; allVerticesDevice) : void</text><ellipse cx="803" cy="1226.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="331" x="812" y="1229.6714">copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void</text><ellipse cx="803" cy="1239.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="332" x="812" y="1242.4761">copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void</text><polygon fill="#FFFF44" points="803,1247.0703,807,1251.0703,803,1255.0703,799,1251.0703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="812" y="1255.2808">fire(const int index) : void</text><ellipse cx="803" cy="1264.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="812" y="1268.0854">setAdvanceVerticesDeviceParams(AllEdges&amp; synapses) : void</text><ellipse cx="803" cy="1277.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="812" y="1280.8901">setupVertices() : void</text><!--MD5=[34dee175ca2f1207a5c8be9520f72c2f]
class AllVertices--><rect codeLine="145" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="278.4844" id="AllVertices" style="stroke:#A80036;stroke-width:1.5;" width="725" x="665" y="671"/><ellipse cx="994.75" cy="687" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M997.7031,692 L996.875,689.1094 L992.6875,689.1094 L991.8438,692 L989.25,692 L993.1875,679.8125 L996.3438,679.8125 L1000.2969,692 L997.7031,692 Z M996.2656,686.9531 L995.5,684.2969 Q995.4375,684.1406 995.3438,683.8125 Q995.25,683.4688 995.125,683.0625 Q995.0156,682.6406 994.9063,682.2344 Q994.8125,681.8125 994.7813,681.5313 Q994.75,681.7031 994.6875,681.9531 Q994.6406,682.2031 994.5625,682.4844 Q994.5,682.7656 994.4219,683.0469 Q994.3438,683.3281 994.2813,683.5781 Q994.2188,683.8281 994.1563,684.0156 Q994.1094,684.2031 994.0781,684.2969 L993.3125,686.9531 L996.2656,686.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="1015.25" y="691.1543">AllVertices</text><line style="stroke:#A80036;stroke-width:1.5;" x1="666" x2="1389" y1="703" y2="703"/><ellipse cx="676" cy="714" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="685" y="717.2104">summationPoints_ : BGFLOAT*</text><polygon fill="none" points="676,721.8047,680,725.8047,676,729.8047,672,725.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="685" y="730.0151">size_ : int</text><polygon fill="none" points="676,734.6094,680,738.6094,676,742.6094,672,738.6094" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="685" y="742.8198">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="676,747.4141,680,751.4141,676,755.4141,672,751.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="685" y="755.6245">vertexLogger_ : log4cplus::Logger</text><line style="stroke:#A80036;stroke-width:1.5;" x1="666" x2="1389" y1="762.2188" y2="762.2188"/><ellipse cx="676" cy="773.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="685" y="776.4292">AllVertices()</text><ellipse cx="676" cy="786.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="685" y="789.2339">~AllVertices()</text><ellipse cx="676" cy="798.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="685" y="802.0386">toString(const int i) : string {query}</text><ellipse cx="676" cy="811.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="699" x="685" y="814.8433">advanceVertices(AllEdges&amp; edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void</text><ellipse cx="676" cy="824.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="685" y="827.6479">advanceVertices(AllEdges&amp; edges, const EdgeIndexMap* edgeIndexMap) : void</text><ellipse cx="676" cy="837.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="271" x="685" y="840.4526">allocNeuronDeviceStruct(void** allVerticesDevice) : void</text><ellipse cx="676" cy="850.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="685" y="853.2573">copyNeuronDeviceToHost(void* allVerticesDevice) : void</text><ellipse cx="676" cy="862.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="685" y="866.062">copyNeuronHostToDevice(void* allVerticesDevice) : void</text><ellipse cx="676" cy="875.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="685" y="878.8667">createAllVertices(Layout* layout) : void</text><ellipse cx="676" cy="888.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="274" x="685" y="891.6714">deleteNeuronDeviceStruct(void* allVerticesDevice) : void</text><ellipse cx="676" cy="901.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112" x="685" y="904.4761">loadParameters() : void</text><ellipse cx="676" cy="914.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="685" y="917.2808">printParameters() : void {query}</text><ellipse cx="676" cy="926.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="685" y="930.0854">setAdvanceVerticesDeviceParams(AllEdges&amp; edges) : void</text><ellipse cx="676" cy="939.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="685" y="942.8901">setupVertices() : void</text><!--MD5=[12f7f85e6a82a668bac37f73aa8a25f9]
class DynamicLayout--><rect codeLine="167" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="176.0469" id="DynamicLayout" style="stroke:#A80036;stroke-width:1.5;" width="324" x="1425.5" y="722"/><ellipse cx="1541.75" cy="738" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1541.6875,733.8281 Q1540.9375,733.8281 1540.375,734.125 Q1539.8125,734.4063 1539.4219,734.9375 Q1539.0313,735.4688 1538.8281,736.25 Q1538.6406,737.0156 1538.6406,737.9688 Q1538.6406,738.9375 1538.8125,739.7031 Q1539,740.4531 1539.3594,740.9688 Q1539.7344,741.4844 1540.3125,741.7656 Q1540.8906,742.0313 1541.6875,742.0313 Q1542.4219,742.0313 1543.1563,741.8594 Q1543.9063,741.6875 1544.7813,741.3906 L1544.7813,743.5469 Q1544.375,743.7031 1543.9844,743.8281 Q1543.5938,743.9375 1543.1875,744.0156 Q1542.7813,744.0938 1542.3594,744.125 Q1541.9375,744.1719 1541.4375,744.1719 Q1540.0313,744.1719 1539,743.7188 Q1537.9844,743.2656 1537.3125,742.4531 Q1536.6406,741.6406 1536.3125,740.5 Q1535.9844,739.3438 1535.9844,737.9531 Q1535.9844,736.5781 1536.3594,735.4219 Q1536.7344,734.2656 1537.4531,733.4375 Q1538.1719,732.6094 1539.2344,732.1563 Q1540.2969,731.6875 1541.6875,731.6875 Q1542.5938,731.6875 1543.5,731.9219 Q1544.4063,732.1406 1545.2344,732.5469 L1544.4063,734.6406 Q1543.7188,734.3125 1543.0313,734.0781 Q1542.3438,733.8281 1541.6875,733.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="1562.25" y="742.1543">DynamicLayout</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1426.5" x2="1748.5" y1="754" y2="754"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1433.5" y="762"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1445.5" y="768.2104">fractionEndogenouslyActive_ : BGFLOAT</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1433.5" y="774.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="1445.5" y="781.0151">fractionExcitatory_ : BGFLOAT</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1426.5" x2="1748.5" y1="787.6094" y2="787.6094"/><ellipse cx="1436.5" cy="798.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="1445.5" y="801.8198">DynamicLayout()</text><ellipse cx="1436.5" cy="811.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1445.5" y="814.6245">~DynamicLayout()</text><ellipse cx="1436.5" cy="824.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="1445.5" y="827.4292">Create() : Layout*</text><ellipse cx="1436.5" cy="837.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="1445.5" y="840.2339">edgType(const int srcVertex, const int destVertex) : edgeType</text><ellipse cx="1436.5" cy="849.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="1445.5" y="853.0386">generateVertexTypeMap(int numVertices) : void</text><ellipse cx="1436.5" cy="862.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="1445.5" y="865.8433">initStarterMap(const int numVertices) : void</text><ellipse cx="1436.5" cy="875.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1445.5" y="878.6479">loadParameters() : void</text><ellipse cx="1436.5" cy="888.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1445.5" y="891.4526">printParameters() : void {query}</text><!--MD5=[05f17831147ee39527b2431b4d22ccc3]
class EventBuffer--><rect codeLine="181" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="214.4609" id="EventBuffer" style="stroke:#A80036;stroke-width:1.5;" width="228" x="1173.5" y="1584"/><ellipse cx="1253.25" cy="1600" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1253.1875,1595.8281 Q1252.4375,1595.8281 1251.875,1596.125 Q1251.3125,1596.4063 1250.9219,1596.9375 Q1250.5313,1597.4688 1250.3281,1598.25 Q1250.1406,1599.0156 1250.1406,1599.9688 Q1250.1406,1600.9375 1250.3125,1601.7031 Q1250.5,1602.4531 1250.8594,1602.9688 Q1251.2344,1603.4844 1251.8125,1603.7656 Q1252.3906,1604.0313 1253.1875,1604.0313 Q1253.9219,1604.0313 1254.6563,1603.8594 Q1255.4063,1603.6875 1256.2813,1603.3906 L1256.2813,1605.5469 Q1255.875,1605.7031 1255.4844,1605.8281 Q1255.0938,1605.9375 1254.6875,1606.0156 Q1254.2813,1606.0938 1253.8594,1606.125 Q1253.4375,1606.1719 1252.9375,1606.1719 Q1251.5313,1606.1719 1250.5,1605.7188 Q1249.4844,1605.2656 1248.8125,1604.4531 Q1248.1406,1603.6406 1247.8125,1602.5 Q1247.4844,1601.3438 1247.4844,1599.9531 Q1247.4844,1598.5781 1247.8594,1597.4219 Q1248.2344,1596.2656 1248.9531,1595.4375 Q1249.6719,1594.6094 1250.7344,1594.1563 Q1251.7969,1593.6875 1253.1875,1593.6875 Q1254.0938,1593.6875 1255,1593.9219 Q1255.9063,1594.1406 1256.7344,1594.5469 L1255.9063,1596.6406 Q1255.2188,1596.3125 1254.5313,1596.0781 Q1253.8438,1595.8281 1253.1875,1595.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="1273.75" y="1604.1543">EventBuffer</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1174.5" x2="1400.5" y1="1616" y2="1616"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1624"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1193.5" y="1630.2104">epochStart_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1636.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1193.5" y="1643.0151">numEventsInEpoch_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1649.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="1193.5" y="1655.8198">queueEnd_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1662.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1193.5" y="1668.6245">queueFront_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.5" y="1675.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1193.5" y="1681.4292">eventTimeSteps_ : vector&lt;uint64_t&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1174.5" x2="1400.5" y1="1688.0234" y2="1688.0234"/><ellipse cx="1184.5" cy="1699.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1193.5" y="1702.2339">EventBuffer(int maxEvents)</text><ellipse cx="1184.5" cy="1711.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="1193.5" y="1715.0386">getNumEventsInEpoch() : int {query}</text><ellipse cx="1184.5" cy="1724.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1193.5" y="1727.8433">getPastEvent(int offset) : uint64_t {query}</text><ellipse cx="1184.5" cy="1737.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1193.5" y="1740.6479">operator[](int i) : uint64_t {query}</text><ellipse cx="1184.5" cy="1750.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="1193.5" y="1753.4526">clear() : void</text><ellipse cx="1184.5" cy="1763.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="1193.5" y="1766.2573">insertEvent(uint64_t timeStep) : void</text><ellipse cx="1184.5" cy="1775.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1193.5" y="1779.062">resize(int maxEvents) : void</text><ellipse cx="1184.5" cy="1788.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1193.5" y="1791.8667">startNewEpoch() : void</text><!--MD5=[c01d281453c5d4cdc24a7f27a30cb7c5]
class FixedLayout--><rect codeLine="198" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="150.4375" id="FixedLayout" style="stroke:#A80036;stroke-width:1.5;" width="324" x="1784.5" y="735"/><ellipse cx="1909.75" cy="751" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1909.6875,746.8281 Q1908.9375,746.8281 1908.375,747.125 Q1907.8125,747.4063 1907.4219,747.9375 Q1907.0313,748.4688 1906.8281,749.25 Q1906.6406,750.0156 1906.6406,750.9688 Q1906.6406,751.9375 1906.8125,752.7031 Q1907,753.4531 1907.3594,753.9688 Q1907.7344,754.4844 1908.3125,754.7656 Q1908.8906,755.0313 1909.6875,755.0313 Q1910.4219,755.0313 1911.1563,754.8594 Q1911.9063,754.6875 1912.7813,754.3906 L1912.7813,756.5469 Q1912.375,756.7031 1911.9844,756.8281 Q1911.5938,756.9375 1911.1875,757.0156 Q1910.7813,757.0938 1910.3594,757.125 Q1909.9375,757.1719 1909.4375,757.1719 Q1908.0313,757.1719 1907,756.7188 Q1905.9844,756.2656 1905.3125,755.4531 Q1904.6406,754.6406 1904.3125,753.5 Q1903.9844,752.3438 1903.9844,750.9531 Q1903.9844,749.5781 1904.3594,748.4219 Q1904.7344,747.2656 1905.4531,746.4375 Q1906.1719,745.6094 1907.2344,745.1563 Q1908.2969,744.6875 1909.6875,744.6875 Q1910.5938,744.6875 1911.5,744.9219 Q1912.4063,745.1406 1913.2344,745.5469 L1912.4063,747.6406 Q1911.7188,747.3125 1911.0313,747.0781 Q1910.3438,746.8281 1909.6875,746.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="1930.25" y="755.1543">FixedLayout</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1785.5" x2="2107.5" y1="767" y2="767"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1785.5" x2="2107.5" y1="775" y2="775"/><ellipse cx="1795.5" cy="786" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="1804.5" y="789.2104">FixedLayout()</text><ellipse cx="1795.5" cy="798.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="1804.5" y="802.0151">~FixedLayout()</text><ellipse cx="1795.5" cy="811.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="1804.5" y="814.8198">Create() : Layout*</text><ellipse cx="1795.5" cy="824.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="1804.5" y="827.6245">edgType(const int srcVertex, const int destVertex) : edgeType</text><ellipse cx="1795.5" cy="837.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="1804.5" y="840.4292">generateVertexTypeMap(int numVertices) : void</text><ellipse cx="1795.5" cy="850.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="1804.5" y="853.2339">initStarterMap(const int numVertices) : void</text><ellipse cx="1795.5" cy="862.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1804.5" y="866.0386">loadParameters() : void</text><ellipse cx="1795.5" cy="875.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1804.5" y="878.8433">printParameters() : void {query}</text><!--MD5=[caebf2ddd0fe15aa1cd7c0f919e7d6a1]
class Layout--><rect codeLine="210" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="393.7266" id="Layout" style="stroke:#A80036;stroke-width:1.5;" width="324" x="1425.5" y="217"/><ellipse cx="1565.25" cy="233" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1568.2031,238 L1567.375,235.1094 L1563.1875,235.1094 L1562.3438,238 L1559.75,238 L1563.6875,225.8125 L1566.8438,225.8125 L1570.7969,238 L1568.2031,238 Z M1566.7656,232.9531 L1566,230.2969 Q1565.9375,230.1406 1565.8438,229.8125 Q1565.75,229.4688 1565.625,229.0625 Q1565.5156,228.6406 1565.4063,228.2344 Q1565.3125,227.8125 1565.2813,227.5313 Q1565.25,227.7031 1565.1875,227.9531 Q1565.1406,228.2031 1565.0625,228.4844 Q1565,228.7656 1564.9219,229.0469 Q1564.8438,229.3281 1564.7813,229.5781 Q1564.7188,229.8281 1564.6563,230.0156 Q1564.6094,230.2031 1564.5781,230.2969 L1563.8125,232.9531 L1566.7656,232.9531 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="36" x="1585.75" y="237.1543">Layout</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1426.5" x2="1748.5" y1="249" y2="249"/><ellipse cx="1436.5" cy="260" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1445.5" y="263.2104">numCallerVertices_ : BGSIZE</text><ellipse cx="1436.5" cy="272.8047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="1445.5" y="276.0151">numEndogenouslyActiveNeurons_ : BGSIZE</text><ellipse cx="1436.5" cy="285.6094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="1445.5" y="288.8198">dist2_ : CompleteMatrix*</text><ellipse cx="1436.5" cy="298.4141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="1445.5" y="301.6245">dist_ : CompleteMatrix*</text><ellipse cx="1436.5" cy="311.2188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1445.5" y="314.4292">xloc_ : VectorMatrix*</text><ellipse cx="1436.5" cy="324.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1445.5" y="327.2339">yloc_ : VectorMatrix*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1433.5" y="333.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1445.5" y="340.0386">gridLayout_ : bool</text><ellipse cx="1436.5" cy="349.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1445.5" y="352.8433">starterMap_ : bool*</text><polygon fill="none" points="1436.5,357.4375,1440.5,361.4375,1436.5,365.4375,1432.5,361.4375" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1445.5" y="365.6479">fileLogger_ : log4cplus::Logger</text><polygon fill="none" points="1436.5,370.2422,1440.5,374.2422,1436.5,378.2422,1432.5,374.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1445.5" y="378.4526">vertices_ : shared_ptr&lt;AllVertices&gt;</text><polygon fill="none" points="1436.5,383.0469,1440.5,387.0469,1436.5,391.0469,1432.5,387.0469" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1445.5" y="391.2573">callerVertexList_ : vector&lt;int&gt;</text><polygon fill="none" points="1436.5,395.8516,1440.5,399.8516,1436.5,403.8516,1432.5,399.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="1445.5" y="404.062">endogenouslyActiveNeuronList_ : vector&lt;int&gt;</text><polygon fill="none" points="1436.5,408.6563,1440.5,412.6563,1436.5,416.6563,1432.5,412.6563" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1445.5" y="416.8667">inhibitoryNeuronLayout_ : vector&lt;int&gt;</text><ellipse cx="1436.5" cy="426.4609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1445.5" y="429.6714">probedNeuronList_ : vector&lt;int&gt;</text><polygon fill="none" points="1436.5,434.2656,1440.5,438.2656,1436.5,442.2656,1432.5,438.2656" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1445.5" y="442.4761">psapVertexList_ : vector&lt;int&gt;</text><polygon fill="none" points="1436.5,447.0703,1440.5,451.0703,1436.5,455.0703,1432.5,451.0703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1445.5" y="455.2808">responderVertexList_ : vector&lt;int&gt;</text><ellipse cx="1436.5" cy="464.875" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="1445.5" y="468.0854">vertexTypeMap_ : vertexType*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1426.5" x2="1748.5" y1="474.6797" y2="474.6797"/><ellipse cx="1436.5" cy="485.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="39" x="1445.5" y="488.8901">Layout()</text><ellipse cx="1436.5" cy="498.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="1445.5" y="501.6948">~Layout()</text><ellipse cx="1436.5" cy="511.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="1445.5" y="514.4995">edgType(const int srcVertex, const int destVertex) : edgeType</text><ellipse cx="1436.5" cy="524.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="1445.5" y="527.3042">getVertices() : shared_ptr&lt;AllVertices&gt; {query}</text><ellipse cx="1436.5" cy="536.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="1445.5" y="540.1089">generateVertexTypeMap(int numVertices) : void</text><ellipse cx="1436.5" cy="549.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="1445.5" y="552.9136">initStarterMap(const int numVertices) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1433.5" y="559.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1445.5" y="565.7183">initVerticesLocs() : void</text><ellipse cx="1436.5" cy="575.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112" x="1445.5" y="578.5229">loadParameters() : void</text><ellipse cx="1436.5" cy="588.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1445.5" y="591.3276">printParameters() : void {query}</text><ellipse cx="1436.5" cy="600.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1445.5" y="604.1323">setupLayout() : void</text><!--MD5=[e2bec1e8f5041d1015728825611f3c9f]
class LayoutFactory--><rect codeLine="241" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="150.4375" id="LayoutFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="1405.5" y="7"/><ellipse cx="1545.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1545.6875,18.8281 Q1544.9375,18.8281 1544.375,19.125 Q1543.8125,19.4063 1543.4219,19.9375 Q1543.0313,20.4688 1542.8281,21.25 Q1542.6406,22.0156 1542.6406,22.9688 Q1542.6406,23.9375 1542.8125,24.7031 Q1543,25.4531 1543.3594,25.9688 Q1543.7344,26.4844 1544.3125,26.7656 Q1544.8906,27.0313 1545.6875,27.0313 Q1546.4219,27.0313 1547.1563,26.8594 Q1547.9063,26.6875 1548.7813,26.3906 L1548.7813,28.5469 Q1548.375,28.7031 1547.9844,28.8281 Q1547.5938,28.9375 1547.1875,29.0156 Q1546.7813,29.0938 1546.3594,29.125 Q1545.9375,29.1719 1545.4375,29.1719 Q1544.0313,29.1719 1543,28.7188 Q1541.9844,28.2656 1541.3125,27.4531 Q1540.6406,26.6406 1540.3125,25.5 Q1539.9844,24.3438 1539.9844,22.9531 Q1539.9844,21.5781 1540.3594,20.4219 Q1540.7344,19.2656 1541.4531,18.4375 Q1542.1719,17.6094 1543.2344,17.1563 Q1544.2969,16.6875 1545.6875,16.6875 Q1546.5938,16.6875 1547.5,16.9219 Q1548.4063,17.1406 1549.2344,17.5469 L1548.4063,19.6406 Q1547.7188,19.3125 1547.0313,19.0781 Q1546.3438,18.8281 1545.6875,18.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="1566.25" y="27.1543">LayoutFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1406.5" x2="1768.5" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1413.5" y="47"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="1425.5" y="53.2104">createFunctions : LayoutFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1413.5" y="59.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="1425.5" y="66.0151">layoutInstance : shared_ptr&lt;Layout&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1406.5" x2="1768.5" y1="72.6094" y2="72.6094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1413.5" y="80.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="1425.5" y="86.8198">LayoutFactory()</text><ellipse cx="1416.5" cy="96.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1425.5" y="99.6245">~LayoutFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1413.5" y="106.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="1425.5" y="112.4292">invokeCreateFunction(const string&amp; className) : Layout*</text><ellipse cx="1416.5" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="147" x="1425.5" y="125.2339">getInstance() : LayoutFactory*</text><ellipse cx="1416.5" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="1425.5" y="138.0386">createLayout(const string&amp; className) : shared_ptr&lt;Layout&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1413.5" y="144.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="1425.5" y="150.8433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[cc1c410fe2850b6da0ea695abfcea755]
class VerticesFactory--><rect codeLine="253" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="150.4375" id="VerticesFactory" style="stroke:#A80036;stroke-width:1.5;" width="364" x="845.5" y="339"/><ellipse cx="981.75" cy="355" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M981.6875,350.8281 Q980.9375,350.8281 980.375,351.125 Q979.8125,351.4063 979.4219,351.9375 Q979.0313,352.4688 978.8281,353.25 Q978.6406,354.0156 978.6406,354.9688 Q978.6406,355.9375 978.8125,356.7031 Q979,357.4531 979.3594,357.9688 Q979.7344,358.4844 980.3125,358.7656 Q980.8906,359.0313 981.6875,359.0313 Q982.4219,359.0313 983.1563,358.8594 Q983.9063,358.6875 984.7813,358.3906 L984.7813,360.5469 Q984.375,360.7031 983.9844,360.8281 Q983.5938,360.9375 983.1875,361.0156 Q982.7813,361.0938 982.3594,361.125 Q981.9375,361.1719 981.4375,361.1719 Q980.0313,361.1719 979,360.7188 Q977.9844,360.2656 977.3125,359.4531 Q976.6406,358.6406 976.3125,357.5 Q975.9844,356.3438 975.9844,354.9531 Q975.9844,353.5781 976.3594,352.4219 Q976.7344,351.2656 977.4531,350.4375 Q978.1719,349.6094 979.2344,349.1563 Q980.2969,348.6875 981.6875,348.6875 Q982.5938,348.6875 983.5,348.9219 Q984.4063,349.1406 985.2344,349.5469 L984.4063,351.6406 Q983.7188,351.3125 983.0313,351.0781 Q982.3438,350.8281 981.6875,350.8281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="1002.25" y="359.1543">VerticesFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="846.5" x2="1208.5" y1="371" y2="371"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="853.5" y="379"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="865.5" y="385.2104">createFunctions : VerticesFunctionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="853.5" y="391.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="865.5" y="398.0151">verticesInstance : shared_ptr&lt;AllVertices&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="846.5" x2="1208.5" y1="404.6094" y2="404.6094"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="853.5" y="412.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="865.5" y="418.8198">VerticesFactory()</text><ellipse cx="856.5" cy="428.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="865.5" y="431.6245">~VerticesFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="853.5" y="438.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="865.5" y="444.4292">invokeCreateFunction(const string&amp; className) : AllVertices*</text><ellipse cx="856.5" cy="454.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="153" x="865.5" y="457.2339">getInstance() : VerticesFactory*</text><ellipse cx="856.5" cy="466.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="865.5" y="470.0386">createVertices(const string&amp; className) : shared_ptr&lt;AllVertices&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="853.5" y="476.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="865.5" y="482.8433">registerClass(const string&amp; className, CreateFunction function) : void</text><!--MD5=[639115fe7f0fcce40793e2aa5cc37621]
class AllIFNeuronsDeviceProperties--><rect codeLine="265" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="252.875" id="AllIFNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="198" x="2143.5" y="683.5"/><ellipse cx="2160.3" cy="699.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2160.2375,695.3281 Q2159.4875,695.3281 2158.925,695.625 Q2158.3625,695.9063 2157.9719,696.4375 Q2157.5813,696.9688 2157.3781,697.75 Q2157.1906,698.5156 2157.1906,699.4688 Q2157.1906,700.4375 2157.3625,701.2031 Q2157.55,701.9531 2157.9094,702.4688 Q2158.2844,702.9844 2158.8625,703.2656 Q2159.4406,703.5313 2160.2375,703.5313 Q2160.9719,703.5313 2161.7063,703.3594 Q2162.4563,703.1875 2163.3313,702.8906 L2163.3313,705.0469 Q2162.925,705.2031 2162.5344,705.3281 Q2162.1438,705.4375 2161.7375,705.5156 Q2161.3313,705.5938 2160.9094,705.625 Q2160.4875,705.6719 2159.9875,705.6719 Q2158.5813,705.6719 2157.55,705.2188 Q2156.5344,704.7656 2155.8625,703.9531 Q2155.1906,703.1406 2154.8625,702 Q2154.5344,700.8438 2154.5344,699.4531 Q2154.5344,698.0781 2154.9094,696.9219 Q2155.2844,695.7656 2156.0031,694.9375 Q2156.7219,694.1094 2157.7844,693.6563 Q2158.8469,693.1875 2160.2375,693.1875 Q2161.1438,693.1875 2162.05,693.4219 Q2162.9563,693.6406 2163.7844,694.0469 L2162.9563,696.1406 Q2162.2688,695.8125 2161.5813,695.5781 Q2160.8938,695.3281 2160.2375,695.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="162" x="2174.7" y="703.6543">AllIFNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2144.5" x2="2340.5" y1="715.5" y2="715.5"/><ellipse cx="2154.5" cy="726.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2163.5" y="729.7104">C1_ : BGFLOAT*</text><ellipse cx="2154.5" cy="739.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2163.5" y="742.5151">C2_ : BGFLOAT*</text><ellipse cx="2154.5" cy="752.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2163.5" y="755.3198">Cm_ : BGFLOAT*</text><ellipse cx="2154.5" cy="764.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="2163.5" y="768.1245">I0_ : BGFLOAT*</text><ellipse cx="2154.5" cy="777.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2163.5" y="780.9292">Iinject_ : BGFLOAT*</text><ellipse cx="2154.5" cy="790.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2163.5" y="793.7339">Inoise_ : BGFLOAT*</text><ellipse cx="2154.5" cy="803.3281" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2163.5" y="806.5386">Isyn_ : BGFLOAT*</text><ellipse cx="2154.5" cy="816.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2163.5" y="819.3433">Rm_ : BGFLOAT*</text><ellipse cx="2154.5" cy="828.9375" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2163.5" y="832.1479">Tau_ : BGFLOAT*</text><ellipse cx="2154.5" cy="841.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2163.5" y="844.9526">Trefract_ : BGFLOAT*</text><ellipse cx="2154.5" cy="854.5469" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2163.5" y="857.7573">Vinit_ : BGFLOAT*</text><ellipse cx="2154.5" cy="867.3516" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2163.5" y="870.562">Vm_ : BGFLOAT*</text><ellipse cx="2154.5" cy="880.1563" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2163.5" y="883.3667">Vreset_ : BGFLOAT*</text><ellipse cx="2154.5" cy="892.9609" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="2163.5" y="896.1714">Vrest_ : BGFLOAT*</text><ellipse cx="2154.5" cy="905.7656" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2163.5" y="908.9761">Vthresh_ : BGFLOAT*</text><ellipse cx="2154.5" cy="918.5703" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="2163.5" y="921.7808">numStepsInRefractoryPeriod_ : int*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2144.5" x2="2340.5" y1="928.375" y2="928.375"/><!--MD5=[bc6843495936d398fdad119946a0d209]
class AllIZHNeuronsDeviceProperties--><rect codeLine="285" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="124.8281" id="AllIZHNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="203" x="2141" y="1085.5"/><ellipse cx="2156" cy="1101.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2155.9375,1097.3281 Q2155.1875,1097.3281 2154.625,1097.625 Q2154.0625,1097.9063 2153.6719,1098.4375 Q2153.2813,1098.9688 2153.0781,1099.75 Q2152.8906,1100.5156 2152.8906,1101.4688 Q2152.8906,1102.4375 2153.0625,1103.2031 Q2153.25,1103.9531 2153.6094,1104.4688 Q2153.9844,1104.9844 2154.5625,1105.2656 Q2155.1406,1105.5313 2155.9375,1105.5313 Q2156.6719,1105.5313 2157.4063,1105.3594 Q2158.1563,1105.1875 2159.0313,1104.8906 L2159.0313,1107.0469 Q2158.625,1107.2031 2158.2344,1107.3281 Q2157.8438,1107.4375 2157.4375,1107.5156 Q2157.0313,1107.5938 2156.6094,1107.625 Q2156.1875,1107.6719 2155.6875,1107.6719 Q2154.2813,1107.6719 2153.25,1107.2188 Q2152.2344,1106.7656 2151.5625,1105.9531 Q2150.8906,1105.1406 2150.5625,1104 Q2150.2344,1102.8438 2150.2344,1101.4531 Q2150.2344,1100.0781 2150.6094,1098.9219 Q2150.9844,1097.7656 2151.7031,1096.9375 Q2152.4219,1096.1094 2153.4844,1095.6563 Q2154.5469,1095.1875 2155.9375,1095.1875 Q2156.8438,1095.1875 2157.75,1095.4219 Q2158.6563,1095.6406 2159.4844,1096.0469 L2158.6563,1098.1406 Q2157.9688,1097.8125 2157.2813,1097.5781 Q2156.5938,1097.3281 2155.9375,1097.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="171" x="2170" y="1105.6543">AllIZHNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2142" x2="2343" y1="1117.5" y2="1117.5"/><ellipse cx="2152" cy="1128.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2161" y="1131.7104">Aconst_ : BGFLOAT*</text><ellipse cx="2152" cy="1141.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2161" y="1144.5151">Bconst_ : BGFLOAT*</text><ellipse cx="2152" cy="1154.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2161" y="1157.3198">C3_ : BGFLOAT*</text><ellipse cx="2152" cy="1166.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2161" y="1170.1245">Cconst_ : BGFLOAT*</text><ellipse cx="2152" cy="1179.7188" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2161" y="1182.9292">Dconst_ : BGFLOAT*</text><ellipse cx="2152" cy="1192.5234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2161" y="1195.7339">u_ : BGFLOAT*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2142" x2="2343" y1="1202.3281" y2="1202.3281"/><!--MD5=[4ac84e1680f309079c4f5159a2743064]
class AllSpikingNeuronsDeviceProperties--><rect codeLine="295" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="99.2188" id="AllSpikingNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="223" x="2131" y="364.5"/><ellipse cx="2146" cy="380.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2145.9375,376.3281 Q2145.1875,376.3281 2144.625,376.625 Q2144.0625,376.9063 2143.6719,377.4375 Q2143.2813,377.9688 2143.0781,378.75 Q2142.8906,379.5156 2142.8906,380.4688 Q2142.8906,381.4375 2143.0625,382.2031 Q2143.25,382.9531 2143.6094,383.4688 Q2143.9844,383.9844 2144.5625,384.2656 Q2145.1406,384.5313 2145.9375,384.5313 Q2146.6719,384.5313 2147.4063,384.3594 Q2148.1563,384.1875 2149.0313,383.8906 L2149.0313,386.0469 Q2148.625,386.2031 2148.2344,386.3281 Q2147.8438,386.4375 2147.4375,386.5156 Q2147.0313,386.5938 2146.6094,386.625 Q2146.1875,386.6719 2145.6875,386.6719 Q2144.2813,386.6719 2143.25,386.2188 Q2142.2344,385.7656 2141.5625,384.9531 Q2140.8906,384.1406 2140.5625,383 Q2140.2344,381.8438 2140.2344,380.4531 Q2140.2344,379.0781 2140.6094,377.9219 Q2140.9844,376.7656 2141.7031,375.9375 Q2142.4219,375.1094 2143.4844,374.6563 Q2144.5469,374.1875 2145.9375,374.1875 Q2146.8438,374.1875 2147.75,374.4219 Q2148.6563,374.6406 2149.4844,375.0469 L2148.6563,377.1406 Q2147.9688,376.8125 2147.2813,376.5781 Q2146.5938,376.3281 2145.9375,376.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="191" x="2160" y="384.6543">AllSpikingNeuronsDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2132" x2="2353" y1="396.5" y2="396.5"/><ellipse cx="2142" cy="407.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2151" y="410.7104">hasFired_ : bool*</text><ellipse cx="2142" cy="420.3047" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2151" y="423.5151">spikeCountOffset_ : int*</text><ellipse cx="2142" cy="433.1094" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2151" y="436.3198">spikeCount_ : int*</text><ellipse cx="2142" cy="445.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2151" y="449.1245">spikeHistory_ : uint64_t**</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2132" x2="2353" y1="455.7188" y2="455.7188"/><!--MD5=[537ade6dbdfe6ef3b32240037651f8aa]
class AllVerticesDeviceProperties--><rect codeLine="303" fill="#FEFECE" filter="url(#f1wblsvfdtujx2)" height="60.8047" id="AllVerticesDeviceProperties" style="stroke:#A80036;stroke-width:1.5;" width="181" x="2152" y="51.5"/><ellipse cx="2167" cy="67.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2166.9375,63.3281 Q2166.1875,63.3281 2165.625,63.625 Q2165.0625,63.9063 2164.6719,64.4375 Q2164.2813,64.9688 2164.0781,65.75 Q2163.8906,66.5156 2163.8906,67.4688 Q2163.8906,68.4375 2164.0625,69.2031 Q2164.25,69.9531 2164.6094,70.4688 Q2164.9844,70.9844 2165.5625,71.2656 Q2166.1406,71.5313 2166.9375,71.5313 Q2167.6719,71.5313 2168.4063,71.3594 Q2169.1563,71.1875 2170.0313,70.8906 L2170.0313,73.0469 Q2169.625,73.2031 2169.2344,73.3281 Q2168.8438,73.4375 2168.4375,73.5156 Q2168.0313,73.5938 2167.6094,73.625 Q2167.1875,73.6719 2166.6875,73.6719 Q2165.2813,73.6719 2164.25,73.2188 Q2163.2344,72.7656 2162.5625,71.9531 Q2161.8906,71.1406 2161.5625,70 Q2161.2344,68.8438 2161.2344,67.4531 Q2161.2344,66.0781 2161.6094,64.9219 Q2161.9844,63.7656 2162.7031,62.9375 Q2163.4219,62.1094 2164.4844,61.6563 Q2165.5469,61.1875 2166.9375,61.1875 Q2167.8438,61.1875 2168.75,61.4219 Q2169.6563,61.6406 2170.4844,62.0469 L2169.6563,64.1406 Q2168.9688,63.8125 2168.2813,63.5781 Q2167.5938,63.3281 2166.9375,63.3281 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="149" x="2181" y="71.6543">AllVerticesDeviceProperties</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2153" x2="2332" y1="83.5" y2="83.5"/><ellipse cx="2163" cy="94.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2172" y="97.7104">summationPoints_ : BGFLOAT*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2153" x2="2332" y1="104.3047" y2="104.3047"/><!--MD5=[b299d6e53b6ac4d2a1701b68b9dc7554]
reverse link AllIFNeurons to AllIZHNeurons--><path codeLine="313" d="M573.16,2052.88 C565.6,2066.92 558.04,2080.95 550.53,2094.9 " fill="none" id="AllIFNeurons-backto-AllIZHNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="567.09,2049.4,582.73,2035.11,579.41,2056.03,567.09,2049.4" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7d41fa10eee7108bf615579dc16f66c4]
reverse link AllIFNeurons to AllLIFNeurons--><path codeLine="316" d="M961.9,2052.99 C1021.92,2164.45 1081.89,2275.81 1118.83,2344.4 " fill="none" id="AllIFNeurons-backto-AllLIFNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="955.59,2056.03,952.27,2035.11,967.91,2049.4,955.59,2056.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[17cadfdde82fbd78aaa7ab65342c0454]
reverse link AllIFNeuronsDeviceProperties to AllIZHNeuronsDeviceProperties--><path codeLine="319" d="M2242.5,956.73 C2242.5,1001.75 2242.5,1048.94 2242.5,1085.07 " fill="none" id="AllIFNeuronsDeviceProperties-backto-AllIZHNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2235.5,956.59,2242.5,936.59,2249.5,956.59,2235.5,956.59" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8724fdcf162cd93143062af7a28861a5]
reverse link AllSpikingNeurons to AllIFNeurons--><path codeLine="322" d="M952.36,1305.34 C945.88,1318.82 939.18,1332.76 932.35,1346.99 " fill="none" id="AllSpikingNeurons-backto-AllIFNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="946.08,1302.26,961.05,1287.27,958.7,1308.33,946.08,1302.26" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5fcb689111a9832bf7543527f372e607]
reverse link AllSpikingNeuronsDeviceProperties to AllIFNeuronsDeviceProperties--><path codeLine="325" d="M2242.5,483.88 C2242.5,538.78 2242.5,617.11 2242.5,683.13 " fill="none" id="AllSpikingNeuronsDeviceProperties-backto-AllIFNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2235.5,483.71,2242.5,463.71,2249.5,483.71,2235.5,483.71" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f591e114573ccd2409f159b73ea72911]
reverse link AllVertices to AllSpikingNeurons--><path codeLine="328" d="M1027.5,969.15 C1027.5,982.42 1027.5,995.77 1027.5,1008.87 " fill="none" id="AllVertices-backto-AllSpikingNeurons" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1020.5,969.12,1027.5,949.12,1034.5,969.12,1020.5,969.12" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[fcd28df228b50666b72099cd983e7d22]
reverse link AllVerticesDeviceProperties to AllSpikingNeuronsDeviceProperties--><path codeLine="331" d="M2242.5,132.73 C2242.5,195.35 2242.5,302.24 2242.5,364.35 " fill="none" id="AllVerticesDeviceProperties-backto-AllSpikingNeuronsDeviceProperties" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2235.5,132.58,2242.5,112.58,2249.5,132.58,2235.5,132.58" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7269b632a17f4028eba21f1bd63939ed]
reverse link Layout to DynamicLayout--><path codeLine="334" d="M1587.5,631.56 C1587.5,663.38 1587.5,694.52 1587.5,721.6 " fill="none" id="Layout-backto-DynamicLayout" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1580.5,631.13,1587.5,611.13,1594.5,631.13,1580.5,631.13" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[891067ebdc7a855417ab5d2553f427ef]
reverse link Layout to FixedLayout--><path codeLine="337" d="M1763.31,607.95 C1804.46,653.11 1845.87,698.56 1878.89,734.79 " fill="none" id="Layout-backto-FixedLayout" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1757.97,612.48,1749.67,592.98,1768.31,603.05,1757.97,612.48" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f7b242bc45f077880469141c87516fa7]
reverse link AllSpikingNeurons to EventBuffer--><path codeLine="345" d="M1128.88,1298.82 C1138.34,1314.82 1147.4,1331.07 1155.5,1347 C1194.49,1423.63 1229,1514.62 1252.95,1583.63 " fill="none" id="AllSpikingNeurons-backto-EventBuffer" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1121.93,1287.22,1121.587,1294.4229,1128.1039,1297.5099,1128.4469,1290.307,1121.93,1287.22" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[efb7ef13657b6fc949565044919673f3]
reverse link Layout to AllVertices--><path codeLine="348" d="M1414.37,536.81 C1354.05,579.25 1285.94,627.17 1223.87,670.84 " fill="none" id="Layout-backto-AllVertices" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1425.15,529.23,1417.941,529.4036,1415.3285,536.1248,1422.5375,535.9512,1425.15,529.23" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[95ba44a0b3c69ce18700dade6dfd248d]
reverse link LayoutFactory to Layout--><path codeLine="351" d="M1587.5,170.22 C1587.5,184.9 1587.5,200.65 1587.5,216.81 " fill="none" id="LayoutFactory-backto-Layout" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1587.5,157.06,1583.5,163.06,1587.5,169.06,1591.5,163.06,1587.5,157.06" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[420839a3a3a413a1278c95e345e5584e]
reverse link VerticesFactory to AllVertices--><path codeLine="354" d="M1027.5,502.34 C1027.5,551.75 1027.5,614.66 1027.5,670.63 " fill="none" id="VerticesFactory-backto-AllVertices" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1027.5,489.11,1023.5,495.11,1027.5,501.11,1031.5,495.11,1027.5,489.11" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[89f79e311439b217bcec5f67395ca570]
@startuml LayoutClassDiagram





/' Objects '/

class AllIFNeurons {
	+AllIFNeurons()
	+~AllIFNeurons()
	-IinjectRange_ : BGFLOAT
	-InoiseRange_ : BGFLOAT
	-VinitRange_ : BGFLOAT
	-VresetRange_ : BGFLOAT
	-VrestingRange_ : BGFLOAT
	-VthreshRange_ : BGFLOAT
	-starterVresetRange_ : BGFLOAT
	-starterVthreshRange_ : BGFLOAT
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
	+toString(const int index) : string {query}
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+loadParameters() : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int i) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int i) : void {query}
}


class AllIZHNeurons {
	+AllIZHNeurons()
	+~AllIZHNeurons()
	+{static} Create() : AllVertices*
	-excAconst_ : BGFLOAT
	-excBconst_ : BGFLOAT
	-excCconst_ : BGFLOAT
	-excDconst_ : BGFLOAT
	-inhAconst_ : BGFLOAT
	-inhBconst_ : BGFLOAT
	-inhCconst_ : BGFLOAT
	-inhDconst_ : BGFLOAT
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
	-{static} DEFAULT_a : static constexpr BGFLOAT
	-{static} DEFAULT_b : static constexpr BGFLOAT
	-{static} DEFAULT_c : static constexpr BGFLOAT
	-{static} DEFAULT_d : static constexpr BGFLOAT
	+toString(const int index) : string {query}
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#fire(const int index) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int index) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int index) : void {query}
}


class AllLIFNeurons {
	+AllLIFNeurons()
	+~AllLIFNeurons()
	+{static} Create() : AllVertices*
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#fire(const int index) : void
	+printParameters() : void {query}
}


abstract class AllSpikingNeurons {
	+AllSpikingNeurons()
	+~AllSpikingNeurons()
	#fAllowBackPropagation_ : bool
	+getSpikeHistory(int index, int offIndex) : uint64_t
	+vertexEvents_ : vector<EventBuffer>
	+hasFired_ : vector<bool>
	#{abstract} advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, const EdgeIndexMap* edgeIndexMap) : void
	#clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} clearNeuronSpikeCounts(void* allVerticesDevice) : void
	+clearSpikeCounts() : void
	#copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	#copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	#fire(const int index) : void
	+setAdvanceVerticesDeviceParams(AllEdges& synapses) : void
	+setupVertices() : void
}


abstract class AllVertices {
	+AllVertices()
	+~AllVertices()
	+summationPoints_ : BGFLOAT*
	#size_ : int
	#fileLogger_ : log4cplus::Logger
	#vertexLogger_ : log4cplus::Logger
	+{abstract} toString(const int i) : string {query}
	+{abstract} advanceVertices(AllEdges& edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	+{abstract} advanceVertices(AllEdges& edges, const EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+{abstract} copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronHostToDevice(void* allVerticesDevice) : void
	+{abstract} createAllVertices(Layout* layout) : void
	+{abstract} deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+{abstract} setAdvanceVerticesDeviceParams(AllEdges& edges) : void
	+setupVertices() : void
}


class DynamicLayout {
	+DynamicLayout()
	+~DynamicLayout()
	-fractionEndogenouslyActive_ : BGFLOAT
	-fractionExcitatory_ : BGFLOAT
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class EventBuffer {
	+EventBuffer(int maxEvents)
	-epochStart_ : int
	+getNumEventsInEpoch() : int {query}
	-numEventsInEpoch_ : int
	-queueEnd_ : int
	-queueFront_ : int
	+getPastEvent(int offset) : uint64_t {query}
	+operator[](int i) : uint64_t {query}
	-eventTimeSteps_ : vector<uint64_t>
	+clear() : void
	+insertEvent(uint64_t timeStep) : void
	+resize(int maxEvents) : void
	+startNewEpoch() : void
}


class FixedLayout {
	+FixedLayout()
	+~FixedLayout()
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


abstract class Layout {
	+Layout()
	+~Layout()
	+numCallerVertices_ : BGSIZE
	+numEndogenouslyActiveNeurons_ : BGSIZE
	+dist2_ : CompleteMatrix*
	+dist_ : CompleteMatrix*
	+xloc_ : VectorMatrix*
	+yloc_ : VectorMatrix*
	-gridLayout_ : bool
	+starterMap_ : bool*
	+{abstract} edgType(const int srcVertex, const int destVertex) : edgeType
	#fileLogger_ : log4cplus::Logger
	+getVertices() : shared_ptr<AllVertices> {query}
	#vertices_ : shared_ptr<AllVertices>
	#callerVertexList_ : vector<int>
	#endogenouslyActiveNeuronList_ : vector<int>
	#inhibitoryNeuronLayout_ : vector<int>
	+probedNeuronList_ : vector<int>
	#psapVertexList_ : vector<int>
	#responderVertexList_ : vector<int>
	+vertexTypeMap_ : vertexType*
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	-initVerticesLocs() : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+setupLayout() : void
}


class LayoutFactory {
	-LayoutFactory()
	+~LayoutFactory()
	-invokeCreateFunction(const string& className) : Layout*
	+{static} getInstance() : LayoutFactory*
	-createFunctions : LayoutFunctionMap
	+createLayout(const string& className) : shared_ptr<Layout>
	-layoutInstance : shared_ptr<Layout>
	-registerClass(const string& className, CreateFunction function) : void
}


class VerticesFactory {
	-VerticesFactory()
	+~VerticesFactory()
	-invokeCreateFunction(const string& className) : AllVertices*
	+{static} getInstance() : VerticesFactory*
	-createFunctions : VerticesFunctionMap
	+createVertices(const string& className) : shared_ptr<AllVertices>
	-verticesInstance : shared_ptr<AllVertices>
	-registerClass(const string& className, CreateFunction function) : void
}


class AllIFNeuronsDeviceProperties {
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
}


class AllIZHNeuronsDeviceProperties {
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
}


class AllSpikingNeuronsDeviceProperties {
	+hasFired_ : bool*
	+spikeCountOffset_ : int*
	+spikeCount_ : int*
	+spikeHistory_ : uint64_t**
}


class AllVerticesDeviceProperties {
	+summationPoints_ : BGFLOAT*
}





/' Inheritance relationships '/

.AllIFNeurons <|- - .AllIZHNeurons


.AllIFNeurons <|- - .AllLIFNeurons


.AllIFNeuronsDeviceProperties <|- - .AllIZHNeuronsDeviceProperties


.AllSpikingNeurons <|- - .AllIFNeurons


.AllSpikingNeuronsDeviceProperties <|- - .AllIFNeuronsDeviceProperties


.AllVertices <|- - .AllSpikingNeurons


.AllVerticesDeviceProperties <|- - .AllSpikingNeuronsDeviceProperties


.Layout <|- - .DynamicLayout


.Layout <|- - .FixedLayout





/' Aggregation relationships '/

.AllSpikingNeurons *- - .EventBuffer


.Layout *- - .AllVertices


.LayoutFactory *- - .Layout


.VerticesFactory *- - .AllVertices






/' Nested objects '/



@enduml

@startuml LayoutClassDiagram






class AllIFNeurons {
	+AllIFNeurons()
	+~AllIFNeurons()
	-IinjectRange_ : BGFLOAT
	-InoiseRange_ : BGFLOAT
	-VinitRange_ : BGFLOAT
	-VresetRange_ : BGFLOAT
	-VrestingRange_ : BGFLOAT
	-VthreshRange_ : BGFLOAT
	-starterVresetRange_ : BGFLOAT
	-starterVthreshRange_ : BGFLOAT
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
	+toString(const int index) : string {query}
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+loadParameters() : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int i) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int i) : void {query}
}


class AllIZHNeurons {
	+AllIZHNeurons()
	+~AllIZHNeurons()
	+{static} Create() : AllVertices*
	-excAconst_ : BGFLOAT
	-excBconst_ : BGFLOAT
	-excCconst_ : BGFLOAT
	-excDconst_ : BGFLOAT
	-inhAconst_ : BGFLOAT
	-inhBconst_ : BGFLOAT
	-inhCconst_ : BGFLOAT
	-inhDconst_ : BGFLOAT
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
	-{static} DEFAULT_a : static constexpr BGFLOAT
	-{static} DEFAULT_b : static constexpr BGFLOAT
	-{static} DEFAULT_c : static constexpr BGFLOAT
	-{static} DEFAULT_d : static constexpr BGFLOAT
	+toString(const int index) : string {query}
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#fire(const int index) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int index) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int index) : void {query}
}


class AllLIFNeurons {
	+AllLIFNeurons()
	+~AllLIFNeurons()
	+{static} Create() : AllVertices*
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#fire(const int index) : void
	+printParameters() : void {query}
}


abstract class AllSpikingNeurons {
	+AllSpikingNeurons()
	+~AllSpikingNeurons()
	#fAllowBackPropagation_ : bool
	+getSpikeHistory(int index, int offIndex) : uint64_t
	+vertexEvents_ : vector<EventBuffer>
	+hasFired_ : vector<bool>
	#{abstract} advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, const EdgeIndexMap* edgeIndexMap) : void
	#clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} clearNeuronSpikeCounts(void* allVerticesDevice) : void
	+clearSpikeCounts() : void
	#copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	#copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	#fire(const int index) : void
	+setAdvanceVerticesDeviceParams(AllEdges& synapses) : void
	+setupVertices() : void
}


abstract class AllVertices {
	+AllVertices()
	+~AllVertices()
	+summationPoints_ : BGFLOAT*
	#size_ : int
	#fileLogger_ : log4cplus::Logger
	#vertexLogger_ : log4cplus::Logger
	+{abstract} toString(const int i) : string {query}
	+{abstract} advanceVertices(AllEdges& edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	+{abstract} advanceVertices(AllEdges& edges, const EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+{abstract} copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronHostToDevice(void* allVerticesDevice) : void
	+{abstract} createAllVertices(Layout* layout) : void
	+{abstract} deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+{abstract} setAdvanceVerticesDeviceParams(AllEdges& edges) : void
	+setupVertices() : void
}


class DynamicLayout {
	+DynamicLayout()
	+~DynamicLayout()
	-fractionEndogenouslyActive_ : BGFLOAT
	-fractionExcitatory_ : BGFLOAT
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class EventBuffer {
	+EventBuffer(int maxEvents)
	-epochStart_ : int
	+getNumEventsInEpoch() : int {query}
	-numEventsInEpoch_ : int
	-queueEnd_ : int
	-queueFront_ : int
	+getPastEvent(int offset) : uint64_t {query}
	+operator[](int i) : uint64_t {query}
	-eventTimeSteps_ : vector<uint64_t>
	+clear() : void
	+insertEvent(uint64_t timeStep) : void
	+resize(int maxEvents) : void
	+startNewEpoch() : void
}


class FixedLayout {
	+FixedLayout()
	+~FixedLayout()
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


abstract class Layout {
	+Layout()
	+~Layout()
	+numCallerVertices_ : BGSIZE
	+numEndogenouslyActiveNeurons_ : BGSIZE
	+dist2_ : CompleteMatrix*
	+dist_ : CompleteMatrix*
	+xloc_ : VectorMatrix*
	+yloc_ : VectorMatrix*
	-gridLayout_ : bool
	+starterMap_ : bool*
	+{abstract} edgType(const int srcVertex, const int destVertex) : edgeType
	#fileLogger_ : log4cplus::Logger
	+getVertices() : shared_ptr<AllVertices> {query}
	#vertices_ : shared_ptr<AllVertices>
	#callerVertexList_ : vector<int>
	#endogenouslyActiveNeuronList_ : vector<int>
	#inhibitoryNeuronLayout_ : vector<int>
	+probedNeuronList_ : vector<int>
	#psapVertexList_ : vector<int>
	#responderVertexList_ : vector<int>
	+vertexTypeMap_ : vertexType*
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	-initVerticesLocs() : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+setupLayout() : void
}


class LayoutFactory {
	-LayoutFactory()
	+~LayoutFactory()
	-invokeCreateFunction(const string& className) : Layout*
	+{static} getInstance() : LayoutFactory*
	-createFunctions : LayoutFunctionMap
	+createLayout(const string& className) : shared_ptr<Layout>
	-layoutInstance : shared_ptr<Layout>
	-registerClass(const string& className, CreateFunction function) : void
}


class VerticesFactory {
	-VerticesFactory()
	+~VerticesFactory()
	-invokeCreateFunction(const string& className) : AllVertices*
	+{static} getInstance() : VerticesFactory*
	-createFunctions : VerticesFunctionMap
	+createVertices(const string& className) : shared_ptr<AllVertices>
	-verticesInstance : shared_ptr<AllVertices>
	-registerClass(const string& className, CreateFunction function) : void
}


class AllIFNeuronsDeviceProperties {
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
}


class AllIZHNeuronsDeviceProperties {
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
}


class AllSpikingNeuronsDeviceProperties {
	+hasFired_ : bool*
	+spikeCountOffset_ : int*
	+spikeCount_ : int*
	+spikeHistory_ : uint64_t**
}


class AllVerticesDeviceProperties {
	+summationPoints_ : BGFLOAT*
}






.AllIFNeurons <|- - .AllIZHNeurons


.AllIFNeurons <|- - .AllLIFNeurons


.AllIFNeuronsDeviceProperties <|- - .AllIZHNeuronsDeviceProperties


.AllSpikingNeurons <|- - .AllIFNeurons


.AllSpikingNeuronsDeviceProperties <|- - .AllIFNeuronsDeviceProperties


.AllVertices <|- - .AllSpikingNeurons


.AllVerticesDeviceProperties <|- - .AllSpikingNeuronsDeviceProperties


.Layout <|- - .DynamicLayout


.Layout <|- - .FixedLayout






.AllSpikingNeurons *- - .EventBuffer


.Layout *- - .AllVertices


.LayoutFactory *- - .Layout


.VerticesFactory *- - .AllVertices









@enduml

PlantUML version 1.2020.23(Sun Dec 13 19:14:58 GMT 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>