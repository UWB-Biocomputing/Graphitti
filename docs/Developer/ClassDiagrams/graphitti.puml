@startuml GraphittiClassDiagram





/' Objects '/

class AllDSSynapses {
	+AllDSSynapses()
	+AllDSSynapses(const int numVertices, const int maxEdges)
	+~AllDSSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDSSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDSSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, BGFLOAT* sumPoint, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDSSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllDynamicSTDPSynapses {
	+AllDynamicSTDPSynapses()
	+AllDynamicSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllDynamicSTDPSynapses()
	+{static} Create() : AllEdges*
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
	#allocDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdges, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	#copyDeviceToHost(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, BGFLOAT* sumPoint, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllDynamicSTDPSynapsesDeviceProperties& allEdgesDeviceProps) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllEdges {
	+AllEdges()
	+AllEdges(const int numVertices, const int maxEdges)
	+~AllEdges()
	+W_ : BGFLOAT*
	+summationPoint_ : BGFLOAT**
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	#edgeOrdinalToType(const int typeOrdinal) : edgeType
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	+addEdge(BGSIZE& iEdg, edgeType type, const int srcVertex, const int destVertex, BGFLOAT* sumPoint, const BGFLOAT deltaT) : void
	+{abstract} advanceEdge(const BGSIZE iEdg, AllVertices* vertices) : void
	+{abstract} advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	+advanceEdges(AllVertices* vertices, EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+{abstract} allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+{abstract} copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice) : void
	+{abstract} copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+{abstract} createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, BGFLOAT* sumPoint, const BGFLOAT deltaT, edgeType type) : void
	+createEdgeIndexMap(shared_ptr<EdgeIndexMap> edgeIndexMap) : void
	+{abstract} deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	+eraseEdge(const int neuronIndex, const BGSIZE iEdg) : void
	+load(Archive& archive) : void
	+loadParameters() : void
	+{abstract} printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+save(Archive& archive) : void {query}
	+{abstract} setAdvanceEdgesDeviceParams() : void
	+{abstract} setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllIFNeurons {
	+AllIFNeurons()
	+~AllIFNeurons()
	-IinjectRange_ : BGFLOAT
	-InoiseRange_ : BGFLOAT
	-VinitRange_ : BGFLOAT
	-VresetRange_ : BGFLOAT
	-VrestingRange_ : BGFLOAT
	-VthreshRange_ : BGFLOAT
	-starterVresetRange_ : BGFLOAT
	-starterVthreshRange_ : BGFLOAT
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
	+toString(const int index) : string {query}
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIFNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+loadParameters() : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int i) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int i) : void {query}
}


class AllIZHNeurons {
	+AllIZHNeurons()
	+~AllIZHNeurons()
	+{static} Create() : AllVertices*
	-excAconst_ : BGFLOAT
	-excBconst_ : BGFLOAT
	-excCconst_ : BGFLOAT
	-excDconst_ : BGFLOAT
	-inhAconst_ : BGFLOAT
	-inhBconst_ : BGFLOAT
	-inhCconst_ : BGFLOAT
	-inhDconst_ : BGFLOAT
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
	-{static} DEFAULT_a : static constexpr BGFLOAT
	-{static} DEFAULT_b : static constexpr BGFLOAT
	-{static} DEFAULT_c : static constexpr BGFLOAT
	-{static} DEFAULT_d : static constexpr BGFLOAT
	+toString(const int index) : string {query}
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+clearNeuronSpikeCounts(void* allVerticesDevice) : void
	#copyDeviceToHost(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	#copyHostToDevice(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	+copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+copyNeuronHostToDevice(void* allVerticesDevice) : void
	+createAllVertices(Layout* layout) : void
	#createNeuron(int neuronIndex, Layout* layout) : void
	#deleteDeviceStruct(AllIZHNeuronsDeviceProperties& allVerticesDevice) : void
	+deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+deserialize(istream& input) : void
	#fire(const int index) : void
	#initNeuronConstsFromParamValues(int neuronIndex, const BGFLOAT deltaT) : void
	+printParameters() : void {query}
	#readNeuron(istream& input, int index) : void
	+serialize(ostream& output) : void {query}
	#setNeuronDefaults(const int index) : void
	+setupVertices() : void
	#writeNeuron(ostream& output, int index) : void {query}
}


class AllLIFNeurons {
	+AllLIFNeurons()
	+~AllLIFNeurons()
	+{static} Create() : AllVertices*
	#advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	#fire(const int index) : void
	+printParameters() : void {query}
}


class AllNeuroEdges {
	+AllNeuroEdges()
	+~AllNeuroEdges()
	+psr_ : BGFLOAT*
	+edgSign(const edgeType type) : int
	+{static} SYNAPSE_STRENGTH_ADJUSTMENT : static constexpr BGFLOAT
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


class AllSTDPSynapses {
	+AllSTDPSynapses()
	+AllSTDPSynapses(const int numVertices, const int maxEdges)
	+~AllSTDPSynapses()
	+{static} Create() : AllEdges*
	+Aneg_E_ : BGFLOAT
	+Aneg_I_ : BGFLOAT
	+Apos_E_ : BGFLOAT
	+Apos_I_ : BGFLOAT
	+Wex_E_ : BGFLOAT
	+Wex_I_ : BGFLOAT
	+defaultSTDPgap_ : BGFLOAT
	#synapticWeightModification(const BGSIZE iEdg, BGFLOAT edgeWeight, double delta) : BGFLOAT
	+tauneg_E_ : BGFLOAT
	+tauneg_I_ : BGFLOAT
	+taupos_E_ : BGFLOAT
	+taupos_I_ : BGFLOAT
	+tauspost_E_ : BGFLOAT
	+tauspost_I_ : BGFLOAT
	+tauspre_E_ : BGFLOAT
	+tauspre_I_ : BGFLOAT
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueuePost(const BGSIZE iEdg) : bool
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyDeviceToHost(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSTDPSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, BGFLOAT* sumPoint, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSTDPSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	-stdpLearning(const BGSIZE iEdg, double delta, double epost, double epre, int srcVertex, int destVertex) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllSpikingNeurons {
	+AllSpikingNeurons()
	+~AllSpikingNeurons()
	#fAllowBackPropagation_ : bool
	+getSpikeHistory(int index, int offIndex) : uint64_t
	+vertexEvents_ : vector<EventBuffer>
	+hasFired_ : vector<bool>
	#{abstract} advanceNeuron(const int index) : void
	+advanceVertices(AllEdges& synapses, const EdgeIndexMap* edgeIndexMap) : void
	#clearDeviceSpikeCounts(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} clearNeuronSpikeCounts(void* allVerticesDevice) : void
	+clearSpikeCounts() : void
	#copyDeviceSpikeCountsToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	#copyDeviceSpikeHistoryToHost(AllSpikingNeuronsDeviceProperties& allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeCountsToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronDeviceSpikeHistoryToHost(void* allVerticesDevice) : void
	#fire(const int index) : void
	+setAdvanceVerticesDeviceParams(AllEdges& synapses) : void
	+setupVertices() : void
}


class AllSpikingSynapses {
	+AllSpikingSynapses()
	+AllSpikingSynapses(const int numVertices, const int maxEdges)
	+~AllSpikingSynapses()
	+{static} Create() : AllEdges*
	+delay_EE_ : BGFLOAT
	+delay_EI_ : BGFLOAT
	+delay_IE_ : BGFLOAT
	+delay_II_ : BGFLOAT
	+tau_EE_ : BGFLOAT
	+tau_EI_ : BGFLOAT
	+tau_IE_ : BGFLOAT
	+tau_II_ : BGFLOAT
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+allowBackPropagation() : bool
	#isSpikeQueue(const BGSIZE iEdg) : bool
	#updateDecay(const BGSIZE iEdg, const BGFLOAT deltaT) : bool
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
	+advanceEdge(const BGSIZE iEdg, AllVertices* neurons) : void
	+advanceEdges(void* allEdgesDevice, void* allVerticesDevice, void* edgeIndexMapDevice) : void
	#allocDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice) : void
	+allocEdgeDeviceStruct(void** allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#changePSR(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+copyDeviceEdgeCountsToHost(void* allEdgesDevice) : void
	+copyDeviceEdgeSumIdxToHost(void* allEdgesDevice) : void
	#copyDeviceToHost(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+copyEdgeDeviceToHost(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice) : void
	+copyEdgeHostToDevice(void* allEdgesDevice, int numVertices, int maxEdgesPerVertex) : void
	#copyHostToDevice(void* allEdgesDevice, AllSpikingSynapsesDeviceProperties& allEdgesDeviceProps, int numVertices, int maxEdgesPerVertex) : void
	+createEdge(const BGSIZE iEdg, int srcVertex, int destVertex, BGFLOAT* sumPoint, const BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(AllSpikingSynapsesDeviceProperties& allEdgesDevice) : void
	+deleteEdgeDeviceStruct(void* allEdgesDevice) : void
	#initSpikeQueue(const BGSIZE iEdg) : void
	+loadParameters() : void
	+postSpikeHit(const BGSIZE iEdg) : void
	+preSpikeHit(const BGSIZE iEdg) : void
	+printGPUEdgesProps(void* allEdgesDeviceProps) : void {query}
	+printParameters() : void {query}
	+printSynapsesProps() : void {query}
	#readEdge(istream& input, const BGSIZE iEdg) : void
	+resetEdge(const BGSIZE iEdg, const BGFLOAT deltaT) : void
	+setAdvanceEdgesDeviceParams() : void
	+setEdgeClassID() : void
	+setupEdges() : void
	#setupEdges(const int numVertices, const int maxEdges) : void
	#writeEdge(ostream& output, const BGSIZE iEdg) : void {query}
}


abstract class AllVertices {
	+AllVertices()
	+~AllVertices()
	+summationMap_ : BGFLOAT*
	#size_ : int
	#fileLogger_ : log4cplus::Logger
	#vertexLogger_ : log4cplus::Logger
	+{abstract} toString(const int i) : string {query}
	+{abstract} advanceVertices(AllEdges& edges, void* allVerticesDevice, void* allEdgesDevice, float* randNoise, EdgeIndexMap* edgeIndexMapDevice) : void
	+{abstract} advanceVertices(AllEdges& edges, const EdgeIndexMap* edgeIndexMap) : void
	+{abstract} allocNeuronDeviceStruct(void** allVerticesDevice) : void
	+{abstract} copyNeuronDeviceToHost(void* allVerticesDevice) : void
	+{abstract} copyNeuronHostToDevice(void* allVerticesDevice) : void
	+{abstract} createAllVertices(Layout* layout) : void
	+{abstract} deleteNeuronDeviceStruct(void* allVerticesDevice) : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+{abstract} setAdvanceVerticesDeviceParams(AllEdges& edges) : void
	+setupVertices() : void
}


class CPUModel {
	+CPUModel()
	+~CPUModel()
	+advance() : void
	+copyCPUtoGPU() : void
	+copyGPUtoCPU() : void
	+finish() : void
	+updateConnections() : void
}


class ConnGrowth {
	+ConnGrowth()
	+~ConnGrowth()
	+W_ : CompleteMatrix*
	+area_ : CompleteMatrix*
	+delta_ : CompleteMatrix*
	+{static} Create() : Connections*
	+growthParams_ : GrowthParams
	+deltaR_ : VectorMatrix*
	+outgrowth_ : VectorMatrix*
	+radii_ : VectorMatrix*
	+rates_ : VectorMatrix*
	+updateConnections(AllVertices& neurons, Layout* layout) : bool
	+radiiSize_ : int
	+spikeCounts_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+printRadii() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* neurons, AllEdges* synapses) : void
	-updateConns(AllVertices& neurons) : void
	-updateFrontiers(const int numVertices, Layout* layout) : void
	-updateOverlap(BGFLOAT numVertices, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& neurons, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnStatic {
	+ConnStatic()
	+~ConnStatic()
	-excWeight_ : BGFLOAT
	+getConnsRadiusThresh() : BGFLOAT {query}
	-inhWeight_ : BGFLOAT
	-rewiringProbability_ : BGFLOAT
	-threshConnsRadius_ : BGFLOAT
	-WCurrentEpoch_ : BGFLOAT*
	+getWCurrentEpoch() : BGFLOAT* {query}
	+{static} Create() : Connections*
	-connsPerVertex_ : int
	-radiiSize_ : int
	-destVertexIndexCurrentEpoch_ : int*
	+getDestVertexIndexCurrentEpoch() : int* {query}
	+getSourceVertexIndexCurrentEpoch() : int* {query}
	-sourceVertexIndexCurrentEpoch_ : int*
	+load(Archive& archive) : void
	+loadParameters() : void
	+printParameters() : void {query}
	+save(Archive& archive) : void {query}
	+setupConnections(Layout* layout, AllVertices* vertices, AllEdges* edges) : void
}


abstract class Connections {
	+Connections()
	+~Connections()
	+updateConnections(AllVertices& vertices, Layout* layout) : bool
	#edgeLogger_ : log4cplus::Logger
	#fileLogger_ : log4cplus::Logger
	#edges_ : shared_ptr<AllEdges>
	+getEdges() : shared_ptr<AllEdges> {query}
	+getEdgeIndexMap() : shared_ptr<EdgeIndexMap> {query}
	#synapseIndexMap_ : shared_ptr<EdgeIndexMap>
	+createEdgeIndexMap() : void
	+createSynapsesFromWeights(const int numVertices, Layout* layout, AllVertices& vertices, AllEdges& synapses) : void
	+{abstract} loadParameters() : void
	+{abstract} printParameters() : void {query}
	+{abstract} setupConnections(Layout* layout, AllVertices* vertices, AllEdges* synapses) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, AllSpikingNeuronsDeviceProperties* allVerticesDevice, AllSpikingSynapsesDeviceProperties* allEdgesDevice, Layout* layout) : void
	+updateSynapsesWeights(const int numVertices, AllVertices& vertices, AllEdges& synapses, Layout* layout) : void
}


class ConnectionsFactory {
	-ConnectionsFactory()
	+~ConnectionsFactory()
	-invokeCreateFunction(const string& className) : Connections*
	+{static} getInstance() : ConnectionsFactory*
	-createFunctions : ConnectionsFunctionMap
	-connectionsInstance : shared_ptr<Connections>
	+createConnections(const string& className) : shared_ptr<Connections>
	-registerClass(const string& className, CreateFunction function) : void
}


class DynamicLayout {
	+DynamicLayout()
	+~DynamicLayout()
	-fractionEndogenouslyActive_ : BGFLOAT
	-fractionExcitatory_ : BGFLOAT
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class EdgesFactory {
	-EdgesFactory()
	+~EdgesFactory()
	-invokeCreateFunction(const string& className) : AllEdges*
	+{static} getInstance() : EdgesFactory*
	-createFunctions : EdgesFunctionMap
	+createEdges(const string& className) : shared_ptr<AllEdges>
	-edgesInstance_ : shared_ptr<AllEdges>
	-registerClass(const string& className, CreateFunction function) : void
}


class EventBuffer {
	+EventBuffer(int maxEvents)
	-epochStart_ : int
	+getNumEventsInEpoch() : int {query}
	-numEventsInEpoch_ : int
	-queueEnd_ : int
	-queueFront_ : int
	+getPastEvent(int offset) : uint64_t {query}
	+operator[](int i) : uint64_t {query}
	-eventTimeSteps_ : vector<uint64_t>
	+clear() : void
	+insertEvent(uint64_t timeStep) : void
	+resize(int maxEvents) : void
	+startNewEpoch() : void
}


class FixedLayout {
	+FixedLayout()
	+~FixedLayout()
	+{static} Create() : Layout*
	+edgType(const int srcVertex, const int destVertex) : edgeType
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	+loadParameters() : void
	+printParameters() : void {query}
}


class GPUModel {
	+GPUModel()
	+~GPUModel()
	#allVerticesDevice_ : AllSpikingNeuronsDeviceProperties*
	#allEdgesDevice_ : AllSpikingSynapsesDeviceProperties*
	#synapseIndexMapDevice_ : EdgeIndexMap*
	#randNoise_d : float*
	-addEdge(AllEdges& synapses, edgeType type, const int srcVertex, const int destVertex, Coordinate& source, Coordinate& dest, BGFLOAT* sumPoint, BGFLOAT deltaT) : void
	+advance() : void
	#allocDeviceStruct(void** allVerticesDevice, void** allEdgesDevice) : void
	-allocSynapseImap(int count) : void
	#calcSummationMap() : void
	+copyCPUtoGPU() : void
	+copyGPUtoCPU() : void
	+copySynapseIndexMapHostToDevice(EdgeIndexMap& synapseIndexMapHost, int numVertices) : void
	-createEdge(AllEdges& synapses, const int neuronIndex, const int synapseIndex, Coordinate source, Coordinate dest, BGFLOAT* sp, BGFLOAT deltaT, edgeType type) : void
	#deleteDeviceStruct(void** allVerticesDevice, void** allEdgesDevice) : void
	-deleteSynapseImap() : void
	-eraseEdge(AllEdges& synapses, const int neuronIndex, const int synapseIndex) : void
	+finish() : void
	+printGPUSynapsesPropsModel() : void {query}
	+setupSim() : void
	+updateConnections() : void
	-updateHistory() : void
}


class GenericFunctionNode {
	+GenericFunctionNode(const Operations::op& operationType, const std::function<void ( )>& function)
	-function<void()
	+~GenericFunctionNode()
	+invokeFunction(const Operations::op& operation) : bool {query}
}


class Hdf5GrowthRecorder {
	+Hdf5GrowthRecorder()
	+~Hdf5GrowthRecorder()
	#radiiHistory_ : BGFLOAT*
	#ratesHistory_ : BGFLOAT*
	#dataSetRadiiHist_ : DataSet
	#dataSetRatesHist_ : DataSet
	+{static} Create() : Recorder*
	+compileHistories(AllVertices& neurons) : void
	+getValues() : void
	#initDataSet() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+term() : void
	#writeRadiiRates() : void
}


class Hdf5Recorder {
	+Hdf5Recorder()
	#dataSetNeuronThresh_ : DataSet*
	#dataSetNeuronTypes_ : DataSet*
	#dataSetProbedNeurons_ : DataSet*
	#dataSetSimulationEndTime_ : DataSet*
	#dataSetSpikesHist_ : DataSet*
	#dataSetSpikesProbedNeurons_ : DataSet*
	#dataSetStarterNeurons_ : DataSet*
	#dataSetTsim_ : DataSet*
	#dataSetXloc_ : DataSet*
	#dataSetYloc_ : DataSet*
	#resultOut_ : H5File*
	+{static} Create() : Recorder*
	#offsetSpikesProbedNeurons_ : hsize_t*
	#spikesHistory_ : int*
	#spikesProbedNeurons_ : vector<uint64_t>*
	+compileHistories(AllVertices& neurons) : void
	#getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+init() : void
	#initDataSet() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& neurons) : void
	+term() : void
}


abstract class IFunctionNode {
	+~IFunctionNode()
	#operationType_ : Operations::op
	+{abstract} invokeFunction(const Operations::op& operation) : bool {query}
}


abstract class Recorder {
	+~Recorder()
	#fileLogger_ : log4cplus::Logger
	#resultFileName_ : string
	+{abstract} compileHistories(AllVertices& vertices) : void
	#{abstract} getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+{abstract} getValues() : void
	+{abstract} init() : void
	+{abstract} initDefaultValues() : void
	+{abstract} initValues() : void
	+{abstract} printParameters() : void
	+{abstract} saveSimData(const AllVertices& vertices) : void
	+{abstract} term() : void
}


abstract class Layout {
	+Layout()
	+~Layout()
	+numCallerVertices_ : BGSIZE
	+numEndogenouslyActiveNeurons_ : BGSIZE
	+dist2_ : CompleteMatrix*
	+dist_ : CompleteMatrix*
	+xloc_ : VectorMatrix*
	+yloc_ : VectorMatrix*
	-gridLayout_ : bool
	+starterMap_ : bool*
	+{abstract} edgType(const int srcVertex, const int destVertex) : edgeType
	#fileLogger_ : log4cplus::Logger
	+getVertices() : shared_ptr<AllVertices> {query}
	#vertices_ : shared_ptr<AllVertices>
	#callerVertexList_ : vector<int>
	#endogenouslyActiveNeuronList_ : vector<int>
	#inhibitoryNeuronLayout_ : vector<int>
	+probedNeuronList_ : vector<int>
	#psapVertexList_ : vector<int>
	#responderVertexList_ : vector<int>
	+vertexTypeMap_ : vertexType*
	+generateVertexTypeMap(int numVertices) : void
	+initStarterMap(const int numVertices) : void
	-initVerticesLocs() : void
	+{abstract} loadParameters() : void
	+printParameters() : void {query}
	+setupLayout() : void
}


class LayoutFactory {
	-LayoutFactory()
	+~LayoutFactory()
	-invokeCreateFunction(const string& className) : Layout*
	+{static} getInstance() : LayoutFactory*
	-createFunctions : LayoutFunctionMap
	+createLayout(const string& className) : shared_ptr<Layout>
	-layoutInstance : shared_ptr<Layout>
	-registerClass(const string& className, CreateFunction function) : void
}


abstract class Model {
	+Model()
	+~Model()
	#fileLogger_ : log4cplus::Logger
	#connections_ : shared_ptr<Connections>
	+getConnections() : shared_ptr<Connections> {query}
	+getRecorder() : shared_ptr<Recorder> {query}
	#recorder_ : shared_ptr<Recorder>
	+getLayout() : shared_ptr<Layout> {query}
	#layout_ : shared_ptr<Layout>
	+{abstract} advance() : void
	#{abstract} copyCPUtoGPU() : void
	#{abstract} copyGPUtoCPU() : void
	#createAllVertices() : void
	+{abstract} finish() : void
	#logSimStep() : void {query}
	+saveResults() : void
	+setupSim() : void
	+{abstract} updateConnections() : void
	+updateHistory() : void
}


class OperationManager {
	-OperationManager()
	+~OperationManager()
	+{static} getInstance() : OperationManager&
	-functionList_ : list<unique_ptr<IFunctionNode>>
	-logger_ : log4cplus::Logger
	+operationToString(const Operations::op& operation) : string {query}
	+executeOperation(const Operations::op& operation) : void {query}
	+registerOperation(const Operations::op& operation, const function<void ( )>& function) : void
}


class Operations {
}


class RecorderFactory {
	-RecorderFactory()
	+~RecorderFactory()
	-invokeCreateFunction(const string& className) : Recorder*
	+{static} getInstance() : RecorderFactory*
	-createFunctions : RecorderFunctionMap
	+createRecorder(const string& className) : shared_ptr<Recorder>
	-recorderInstance : shared_ptr<Recorder>
	-registerClass(const string& className, CreateFunction function) : void
}


class Simulator {
	-Simulator()
	+~Simulator()
	-deltaT_ : BGFLOAT
	-epochDuration_ : BGFLOAT
	+getDeltaT() : BGFLOAT {query}
	+getEpochDuration() : BGFLOAT {query}
	+getMaxRate() : BGFLOAT {query}
	-maxRate_ : BGFLOAT
	+getPSummationMap() : BGFLOAT* {query}
	-pSummationMap_ : BGFLOAT*
	+{static} getInstance() : Simulator&
	+getShort_timer() : Timer
	+getTimer() : Timer
	-short_timer : Timer
	-timer : Timer
	+instantiateSimulatorObjects() : bool
	+getRgEndogenouslyActiveNeuronMap() : bool* {query}
	-rgEndogenouslyActiveNeuronMap_ : bool*
	-currentEpoch_ : int
	+getCurrentStep() : int {query}
	+getHeight() : int {query}
	+getMaxEdgesPerVertex() : int {query}
	+getMaxFiringRate() : int {query}
	+getNumEpochs() : int {query}
	+getTotalVertices() : int {query}
	+getWidth() : int {query}
	-height_ : int
	-maxEdgesPerVertex_ : int
	-maxFiringRate_ : int
	-numEpochs_ : int
	-totalNeurons_ : int
	-width_ : int
	-consoleLogger_ : log4cplus::Logger
	-edgeLogger_ : log4cplus::Logger
	-fileLogger_ : log4cplus::Logger
	+getInitRngSeed() : long {query}
	+getNoiseRngSeed() : long {query}
	-initRngSeed_ : long
	-noiseRngSeed_ : long
	+getModel() : shared_ptr<Model> {query}
	-model_ : shared_ptr<Model>
	-configFileName_ : string
	-deserializationFileName_ : string
	+getConfigFileName() : string {query}
	+getDeserializationFileName() : string {query}
	+getSerializationFileName() : string {query}
	+getStimulusFileName() : string {query}
	-serializationFileName_ : string
	-stimulusFileName_ : string
	+getRgNeuronTypeMap() : vertexType* {query}
	-rgNeuronTypeMap_ : vertexType*
	+advanceEpoch(const int& currentEpoch) : void {query}
	+copyCPUSynapseToGPU() : void
	+copyGPUSynapseToCPU() : void
	+finish() : void
	-freeResources() : void
	+loadParameters() : void
	+printParameters() : void {query}
	+reset() : void
	+saveResults() : void {query}
	+setConfigFileName(const string& fileName) : void
	+setDeserializationFileName(const string& fileName) : void
	+setPSummationMap(BGFLOAT* summationMap) : void
	+setSerializationFileName(const string& fileName) : void
	+setStimulusFileName(const string& fileName) : void
	+setup() : void
	+simulate() : void
}


class VerticesFactory {
	-VerticesFactory()
	+~VerticesFactory()
	-invokeCreateFunction(const string& className) : AllVertices*
	+{static} getInstance() : VerticesFactory*
	-createFunctions : VerticesFunctionMap
	+createVertices(const string& className) : shared_ptr<AllVertices>
	-verticesInstance : shared_ptr<AllVertices>
	-registerClass(const string& className, CreateFunction function) : void
}


class XmlRecorder {
	+XmlRecorder()
	+{static} Create() : Recorder*
	#spikesHistory_ : VectorMatrix
	#resultOut_ : ofstream
	+compileHistories(AllVertices& vertices) : void
	#getStarterNeuronMatrix(VectorMatrix& matrix, const bool* starterMap) : void
	+getValues() : void
	+init() : void
	+initDefaultValues() : void
	+initValues() : void
	+printParameters() : void
	+saveSimData(const AllVertices& vertices) : void
	+term() : void
}


enum Operations::op {
	copyFromGPU
	copyToGPU
	deallocateGPUMemory
	deserialize
	loadParameters
	printParameters
	restoreToDefault
	serialize
}


enum enumClassSynapses {
	classAllDSSynapses
	classAllDynamicSTDPSynapses
	classAllSTDPSynapses
	classAllSpikingSynapses
	undefClassSynapses
}


class AllDSSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllDynamicSTDPSynapsesDeviceProperties {
	+D_ : BGFLOAT*
	+F_ : BGFLOAT*
	+U_ : BGFLOAT*
	+r_ : BGFLOAT*
	+u_ : BGFLOAT*
	+lastSpike_ : uint64_t*
}


class AllEdgesDeviceProperties {
	+W_ : BGFLOAT*
	+psr_ : BGFLOAT*
	+maxEdgesPerVertex_ : BGSIZE
	+totalEdgeCount_ : BGSIZE
	+edgeCounts_ : BGSIZE*
	+inUse_ : bool*
	+type_ : edgeType*
	+countVertices_ : int
	+destVertexIndex_ : int*
	+sourceVertexIndex_ : int*
}


class AllIFNeuronsDeviceProperties {
	+C1_ : BGFLOAT*
	+C2_ : BGFLOAT*
	+Cm_ : BGFLOAT*
	+I0_ : BGFLOAT*
	+Iinject_ : BGFLOAT*
	+Inoise_ : BGFLOAT*
	+Isyn_ : BGFLOAT*
	+Rm_ : BGFLOAT*
	+Tau_ : BGFLOAT*
	+Trefract_ : BGFLOAT*
	+Vinit_ : BGFLOAT*
	+Vm_ : BGFLOAT*
	+Vreset_ : BGFLOAT*
	+Vrest_ : BGFLOAT*
	+Vthresh_ : BGFLOAT*
	+numStepsInRefractoryPeriod_ : int*
}


class AllIZHNeuronsDeviceProperties {
	+Aconst_ : BGFLOAT*
	+Bconst_ : BGFLOAT*
	+C3_ : BGFLOAT*
	+Cconst_ : BGFLOAT*
	+Dconst_ : BGFLOAT*
	+u_ : BGFLOAT*
}


class AllSTDPSynapsesDeviceProperties {
	+Aneg_ : BGFLOAT*
	+Apos_ : BGFLOAT*
	+STDPgap_ : BGFLOAT*
	+Wex_ : BGFLOAT*
	+muneg_ : BGFLOAT*
	+mupos_ : BGFLOAT*
	+tauneg_ : BGFLOAT*
	+taupos_ : BGFLOAT*
	+tauspost_ : BGFLOAT*
	+tauspre_ : BGFLOAT*
	+useFroemkeDanSTDP_ : bool*
	+delayIndexPost_ : int*
	+delayQueuePostLength_ : int*
	+totalDelayPost_ : int*
	+delayQueuePost_ : uint32_t*
}


class AllSpikingNeuronsDeviceProperties {
	+hasFired_ : bool*
	+spikeCountOffset_ : int*
	+spikeCount_ : int*
	+spikeHistory_ : uint64_t**
}


class AllSpikingSynapsesDeviceProperties {
	+decay_ : BGFLOAT*
	+tau_ : BGFLOAT*
	+delayIndex_ : int*
	+delayQueueLength_ : int*
	+totalDelay_ : int*
	+delayQueue_ : uint32_t*
}


class AllVerticesDeviceProperties {
	+summationMap_ : BGFLOAT*
}


class ConnGrowth::GrowthParams {
	+beta : BGFLOAT
	+epsilon : BGFLOAT
	+maxRate : BGFLOAT
	+minRadius : BGFLOAT
	+rho : BGFLOAT
	+startRadius : BGFLOAT
	+targetRate : BGFLOAT
}


class ConnStatic::DistDestVertex {
	+dist : BGFLOAT
	+operator<(DistDestVertex other) : bool {query}
	+destVertex : int
}


class EdgeIndexMap {
	+EdgeIndexMap()
	+EdgeIndexMap(int vertexCount, int edgeCount)
	+~EdgeIndexMap()
	-numOfEdges_ : BGSIZE
	-numOfVertices_ : BGSIZE
	+incomingEdgeBegin_ : BGSIZE*
	+incomingEdgeCount_ : BGSIZE*
	+incomingEdgeIndexMap_ : BGSIZE*
	+outgoingEdgeBegin_ : BGSIZE*
	+outgoingEdgeCount_ : BGSIZE*
	+outgoingEdgeIndexMap_ : BGSIZE*
}





/' Inheritance relationships '/

.AllEdges <|-- .AllNeuroEdges


.AllEdgesDeviceProperties <|-- .AllSpikingSynapsesDeviceProperties


.AllIFNeurons <|-- .AllIZHNeurons


.AllIFNeurons <|-- .AllLIFNeurons


.AllIFNeuronsDeviceProperties <|-- .AllIZHNeuronsDeviceProperties


.AllNeuroEdges <|-- .AllSpikingSynapses


.AllSTDPSynapses <|-- .AllDynamicSTDPSynapses


.AllSTDPSynapsesDeviceProperties <|-- .AllDynamicSTDPSynapsesDeviceProperties


.AllSpikingNeurons <|-- .AllIFNeurons


.AllSpikingNeuronsDeviceProperties <|-- .AllIFNeuronsDeviceProperties


.AllSpikingSynapses <|-- .AllDSSynapses


.AllSpikingSynapses <|-- .AllSTDPSynapses


.AllSpikingSynapsesDeviceProperties <|-- .AllDSSynapsesDeviceProperties


.AllSpikingSynapsesDeviceProperties <|-- .AllSTDPSynapsesDeviceProperties


.AllVertices <|-- .AllSpikingNeurons


.AllVerticesDeviceProperties <|-- .AllSpikingNeuronsDeviceProperties


.Connections <|-- .ConnGrowth


.Connections <|-- .ConnStatic


.Hdf5Recorder <|-- .Hdf5GrowthRecorder


.IFunctionNode <|-- .GenericFunctionNode


.Recorder <|-- .Hdf5Recorder


.Recorder <|-- .XmlRecorder


.Layout <|-- .DynamicLayout


.Layout <|-- .FixedLayout


.Model <|-- .CPUModel


.Model <|-- .GPUModel





/' Aggregation relationships '/

.AllSpikingNeurons *-- .EventBuffer


.Connections *-- .AllEdges


.Connections *-- .EdgeIndexMap


.ConnectionsFactory *-- .Connections


.EdgesFactory *-- .AllEdges


.GPUModel o-- .AllSpikingNeuronsDeviceProperties


.GPUModel o-- .AllSpikingSynapsesDeviceProperties


.GPUModel o-- .EdgeIndexMap


.IFunctionNode *-- .Operations


.IFunctionNode *-- .Operations::op


.Layout *-- .AllVertices


.LayoutFactory *-- .Layout


.Model *-- .Connections


.Model *-- .Recorder


.Model *-- .Layout


.OperationManager *-- .IFunctionNode


.RecorderFactory *-- .Recorder


.Simulator *-- .Model


.VerticesFactory *-- .AllVertices






/' Nested objects '/

.ConnGrowth +-- .ConnGrowth::GrowthParams


.ConnStatic +-- .ConnStatic::DistDestVertex


.Operations +-- .Operations::op




@enduml
